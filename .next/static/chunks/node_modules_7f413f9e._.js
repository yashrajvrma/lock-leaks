(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push([typeof document === "object" ? document.currentScript : undefined, {

"[project]/node_modules/@swc/helpers/cjs/_interop_require_default.cjs [client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
exports._ = _interop_require_default;
}}),
"[project]/node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs [client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        default: obj
    };
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
            else newObj[key] = obj[key];
        }
    }
    newObj.default = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}
exports._ = _interop_require_wildcard;
}}),
"[project]/node_modules/@swc/helpers/cjs/_class_private_field_loose_base.cjs [client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
function _class_private_field_loose_base(receiver, privateKey) {
    if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
        throw new TypeError("attempted to use private field on non-instance");
    }
    return receiver;
}
exports._ = _class_private_field_loose_base;
}}),
"[project]/node_modules/@swc/helpers/cjs/_class_private_field_loose_key.cjs [client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var id = 0;
function _class_private_field_loose_key(name) {
    return "__private_" + id++ + "_" + name;
}
exports._ = _class_private_field_loose_key;
}}),
"[project]/node_modules/@swc/helpers/cjs/_tagged_template_literal_loose.cjs [client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
function _tagged_template_literal_loose(strings, raw) {
    if (!raw) raw = strings.slice(0);
    strings.raw = raw;
    return strings;
}
exports._ = _tagged_template_literal_loose;
}}),
"[project]/node_modules/react/cjs/react.development.js [client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/**
 * @license React
 * react.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/polyfills/process.js [client] (ecmascript)");
"use strict";
"production" !== ("TURBOPACK compile-time value", "development") && function() {
    function defineDeprecationWarning(methodName, info) {
        Object.defineProperty(Component.prototype, methodName, {
            get: function() {
                console.warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
            }
        });
    }
    function getIteratorFn(maybeIterable) {
        if (null === maybeIterable || "object" !== typeof maybeIterable) return null;
        maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
        return "function" === typeof maybeIterable ? maybeIterable : null;
    }
    function warnNoop(publicInstance, callerName) {
        publicInstance = (publicInstance = publicInstance.constructor) && (publicInstance.displayName || publicInstance.name) || "ReactClass";
        var warningKey = publicInstance + "." + callerName;
        didWarnStateUpdateForUnmountedComponent[warningKey] || (console.error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, publicInstance), didWarnStateUpdateForUnmountedComponent[warningKey] = !0);
    }
    function Component(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
    }
    function ComponentDummy() {}
    function PureComponent(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
    }
    function testStringCoercion(value) {
        return "" + value;
    }
    function checkKeyStringCoercion(value) {
        try {
            testStringCoercion(value);
            var JSCompiler_inline_result = !1;
        } catch (e) {
            JSCompiler_inline_result = !0;
        }
        if (JSCompiler_inline_result) {
            JSCompiler_inline_result = console;
            var JSCompiler_temp_const = JSCompiler_inline_result.error;
            var JSCompiler_inline_result$jscomp$0 = "function" === typeof Symbol && Symbol.toStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            JSCompiler_temp_const.call(JSCompiler_inline_result, "The provided key is an unsupported type %s. This value must be coerced to a string before using it here.", JSCompiler_inline_result$jscomp$0);
            return testStringCoercion(value);
        }
    }
    function getComponentNameFromType(type) {
        if (null == type) return null;
        if ("function" === typeof type) return type.$$typeof === REACT_CLIENT_REFERENCE ? null : type.displayName || type.name || null;
        if ("string" === typeof type) return type;
        switch(type){
            case REACT_FRAGMENT_TYPE:
                return "Fragment";
            case REACT_PROFILER_TYPE:
                return "Profiler";
            case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
            case REACT_SUSPENSE_TYPE:
                return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            case REACT_ACTIVITY_TYPE:
                return "Activity";
        }
        if ("object" === typeof type) switch("number" === typeof type.tag && console.error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), type.$$typeof){
            case REACT_PORTAL_TYPE:
                return "Portal";
            case REACT_CONTEXT_TYPE:
                return (type.displayName || "Context") + ".Provider";
            case REACT_CONSUMER_TYPE:
                return (type._context.displayName || "Context") + ".Consumer";
            case REACT_FORWARD_REF_TYPE:
                var innerType = type.render;
                type = type.displayName;
                type || (type = innerType.displayName || innerType.name || "", type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef");
                return type;
            case REACT_MEMO_TYPE:
                return innerType = type.displayName || null, null !== innerType ? innerType : getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE:
                innerType = type._payload;
                type = type._init;
                try {
                    return getComponentNameFromType(type(innerType));
                } catch (x) {}
        }
        return null;
    }
    function getTaskName(type) {
        if (type === REACT_FRAGMENT_TYPE) return "<>";
        if ("object" === typeof type && null !== type && type.$$typeof === REACT_LAZY_TYPE) return "<...>";
        try {
            var name = getComponentNameFromType(type);
            return name ? "<" + name + ">" : "<...>";
        } catch (x) {
            return "<...>";
        }
    }
    function getOwner() {
        var dispatcher = ReactSharedInternals.A;
        return null === dispatcher ? null : dispatcher.getOwner();
    }
    function UnknownOwner() {
        return Error("react-stack-top-frame");
    }
    function hasValidKey(config) {
        if (hasOwnProperty.call(config, "key")) {
            var getter = Object.getOwnPropertyDescriptor(config, "key").get;
            if (getter && getter.isReactWarning) return !1;
        }
        return void 0 !== config.key;
    }
    function defineKeyPropWarningGetter(props, displayName) {
        function warnAboutAccessingKey() {
            specialPropKeyWarningShown || (specialPropKeyWarningShown = !0, console.error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)", displayName));
        }
        warnAboutAccessingKey.isReactWarning = !0;
        Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: !0
        });
    }
    function elementRefGetterWithDeprecationWarning() {
        var componentName = getComponentNameFromType(this.type);
        didWarnAboutElementRef[componentName] || (didWarnAboutElementRef[componentName] = !0, console.error("Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release."));
        componentName = this.props.ref;
        return void 0 !== componentName ? componentName : null;
    }
    function ReactElement(type, key, self, source, owner, props, debugStack, debugTask) {
        self = props.ref;
        type = {
            $$typeof: REACT_ELEMENT_TYPE,
            type: type,
            key: key,
            props: props,
            _owner: owner
        };
        null !== (void 0 !== self ? self : null) ? Object.defineProperty(type, "ref", {
            enumerable: !1,
            get: elementRefGetterWithDeprecationWarning
        }) : Object.defineProperty(type, "ref", {
            enumerable: !1,
            value: null
        });
        type._store = {};
        Object.defineProperty(type._store, "validated", {
            configurable: !1,
            enumerable: !1,
            writable: !0,
            value: 0
        });
        Object.defineProperty(type, "_debugInfo", {
            configurable: !1,
            enumerable: !1,
            writable: !0,
            value: null
        });
        Object.defineProperty(type, "_debugStack", {
            configurable: !1,
            enumerable: !1,
            writable: !0,
            value: debugStack
        });
        Object.defineProperty(type, "_debugTask", {
            configurable: !1,
            enumerable: !1,
            writable: !0,
            value: debugTask
        });
        Object.freeze && (Object.freeze(type.props), Object.freeze(type));
        return type;
    }
    function cloneAndReplaceKey(oldElement, newKey) {
        newKey = ReactElement(oldElement.type, newKey, void 0, void 0, oldElement._owner, oldElement.props, oldElement._debugStack, oldElement._debugTask);
        oldElement._store && (newKey._store.validated = oldElement._store.validated);
        return newKey;
    }
    function isValidElement(object) {
        return "object" === typeof object && null !== object && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function escape(key) {
        var escaperLookup = {
            "=": "=0",
            ":": "=2"
        };
        return "$" + key.replace(/[=:]/g, function(match) {
            return escaperLookup[match];
        });
    }
    function getElementKey(element, index) {
        return "object" === typeof element && null !== element && null != element.key ? (checkKeyStringCoercion(element.key), escape("" + element.key)) : index.toString(36);
    }
    function noop$1() {}
    function resolveThenable(thenable) {
        switch(thenable.status){
            case "fulfilled":
                return thenable.value;
            case "rejected":
                throw thenable.reason;
            default:
                switch("string" === typeof thenable.status ? thenable.then(noop$1, noop$1) : (thenable.status = "pending", thenable.then(function(fulfilledValue) {
                    "pending" === thenable.status && (thenable.status = "fulfilled", thenable.value = fulfilledValue);
                }, function(error) {
                    "pending" === thenable.status && (thenable.status = "rejected", thenable.reason = error);
                })), thenable.status){
                    case "fulfilled":
                        return thenable.value;
                    case "rejected":
                        throw thenable.reason;
                }
        }
        throw thenable;
    }
    function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
        var type = typeof children;
        if ("undefined" === type || "boolean" === type) children = null;
        var invokeCallback = !1;
        if (null === children) invokeCallback = !0;
        else switch(type){
            case "bigint":
            case "string":
            case "number":
                invokeCallback = !0;
                break;
            case "object":
                switch(children.$$typeof){
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                        invokeCallback = !0;
                        break;
                    case REACT_LAZY_TYPE:
                        return invokeCallback = children._init, mapIntoArray(invokeCallback(children._payload), array, escapedPrefix, nameSoFar, callback);
                }
        }
        if (invokeCallback) {
            invokeCallback = children;
            callback = callback(invokeCallback);
            var childKey = "" === nameSoFar ? "." + getElementKey(invokeCallback, 0) : nameSoFar;
            isArrayImpl(callback) ? (escapedPrefix = "", null != childKey && (escapedPrefix = childKey.replace(userProvidedKeyEscapeRegex, "$&/") + "/"), mapIntoArray(callback, array, escapedPrefix, "", function(c) {
                return c;
            })) : null != callback && (isValidElement(callback) && (null != callback.key && (invokeCallback && invokeCallback.key === callback.key || checkKeyStringCoercion(callback.key)), escapedPrefix = cloneAndReplaceKey(callback, escapedPrefix + (null == callback.key || invokeCallback && invokeCallback.key === callback.key ? "" : ("" + callback.key).replace(userProvidedKeyEscapeRegex, "$&/") + "/") + childKey), "" !== nameSoFar && null != invokeCallback && isValidElement(invokeCallback) && null == invokeCallback.key && invokeCallback._store && !invokeCallback._store.validated && (escapedPrefix._store.validated = 2), callback = escapedPrefix), array.push(callback));
            return 1;
        }
        invokeCallback = 0;
        childKey = "" === nameSoFar ? "." : nameSoFar + ":";
        if (isArrayImpl(children)) for(var i = 0; i < children.length; i++)nameSoFar = children[i], type = childKey + getElementKey(nameSoFar, i), invokeCallback += mapIntoArray(nameSoFar, array, escapedPrefix, type, callback);
        else if (i = getIteratorFn(children), "function" === typeof i) for(i === children.entries && (didWarnAboutMaps || console.warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead."), didWarnAboutMaps = !0), children = i.call(children), i = 0; !(nameSoFar = children.next()).done;)nameSoFar = nameSoFar.value, type = childKey + getElementKey(nameSoFar, i++), invokeCallback += mapIntoArray(nameSoFar, array, escapedPrefix, type, callback);
        else if ("object" === type) {
            if ("function" === typeof children.then) return mapIntoArray(resolveThenable(children), array, escapedPrefix, nameSoFar, callback);
            array = String(children);
            throw Error("Objects are not valid as a React child (found: " + ("[object Object]" === array ? "object with keys {" + Object.keys(children).join(", ") + "}" : array) + "). If you meant to render a collection of children, use an array instead.");
        }
        return invokeCallback;
    }
    function mapChildren(children, func, context) {
        if (null == children) return children;
        var result = [], count = 0;
        mapIntoArray(children, result, "", "", function(child) {
            return func.call(context, child, count++);
        });
        return result;
    }
    function lazyInitializer(payload) {
        if (-1 === payload._status) {
            var ctor = payload._result;
            ctor = ctor();
            ctor.then(function(moduleObject) {
                if (0 === payload._status || -1 === payload._status) payload._status = 1, payload._result = moduleObject;
            }, function(error) {
                if (0 === payload._status || -1 === payload._status) payload._status = 2, payload._result = error;
            });
            -1 === payload._status && (payload._status = 0, payload._result = ctor);
        }
        if (1 === payload._status) return ctor = payload._result, void 0 === ctor && console.error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", ctor), "default" in ctor || console.error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", ctor), ctor.default;
        throw payload._result;
    }
    function resolveDispatcher() {
        var dispatcher = ReactSharedInternals.H;
        null === dispatcher && console.error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.");
        return dispatcher;
    }
    function noop() {}
    function enqueueTask(task) {
        if (null === enqueueTaskImpl) try {
            var requireString = ("require" + Math.random()).slice(0, 7);
            enqueueTaskImpl = (module && module[requireString]).call(module, "timers").setImmediate;
        } catch (_err) {
            enqueueTaskImpl = function(callback) {
                !1 === didWarnAboutMessageChannel && (didWarnAboutMessageChannel = !0, "undefined" === typeof MessageChannel && console.error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning."));
                var channel = new MessageChannel();
                channel.port1.onmessage = callback;
                channel.port2.postMessage(void 0);
            };
        }
        return enqueueTaskImpl(task);
    }
    function aggregateErrors(errors) {
        return 1 < errors.length && "function" === typeof AggregateError ? new AggregateError(errors) : errors[0];
    }
    function popActScope(prevActQueue, prevActScopeDepth) {
        prevActScopeDepth !== actScopeDepth - 1 && console.error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
        actScopeDepth = prevActScopeDepth;
    }
    function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
        var queue = ReactSharedInternals.actQueue;
        if (null !== queue) if (0 !== queue.length) try {
            flushActQueue(queue);
            enqueueTask(function() {
                return recursivelyFlushAsyncActWork(returnValue, resolve, reject);
            });
            return;
        } catch (error) {
            ReactSharedInternals.thrownErrors.push(error);
        }
        else ReactSharedInternals.actQueue = null;
        0 < ReactSharedInternals.thrownErrors.length ? (queue = aggregateErrors(ReactSharedInternals.thrownErrors), ReactSharedInternals.thrownErrors.length = 0, reject(queue)) : resolve(returnValue);
    }
    function flushActQueue(queue) {
        if (!isFlushing) {
            isFlushing = !0;
            var i = 0;
            try {
                for(; i < queue.length; i++){
                    var callback = queue[i];
                    do {
                        ReactSharedInternals.didUsePromise = !1;
                        var continuation = callback(!1);
                        if (null !== continuation) {
                            if (ReactSharedInternals.didUsePromise) {
                                queue[i] = callback;
                                queue.splice(0, i);
                                return;
                            }
                            callback = continuation;
                        } else break;
                    }while (1)
                }
                queue.length = 0;
            } catch (error) {
                queue.splice(0, i + 1), ReactSharedInternals.thrownErrors.push(error);
            } finally{
                isFlushing = !1;
            }
        }
    }
    "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
    var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler");
    Symbol.for("react.provider");
    var REACT_CONSUMER_TYPE = Symbol.for("react.consumer"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_ACTIVITY_TYPE = Symbol.for("react.activity"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator, didWarnStateUpdateForUnmountedComponent = {}, ReactNoopUpdateQueue = {
        isMounted: function() {
            return !1;
        },
        enqueueForceUpdate: function(publicInstance) {
            warnNoop(publicInstance, "forceUpdate");
        },
        enqueueReplaceState: function(publicInstance) {
            warnNoop(publicInstance, "replaceState");
        },
        enqueueSetState: function(publicInstance) {
            warnNoop(publicInstance, "setState");
        }
    }, assign = Object.assign, emptyObject = {};
    Object.freeze(emptyObject);
    Component.prototype.isReactComponent = {};
    Component.prototype.setState = function(partialState, callback) {
        if ("object" !== typeof partialState && "function" !== typeof partialState && null != partialState) throw Error("takes an object of state variables to update or a function which returns an object of state variables.");
        this.updater.enqueueSetState(this, partialState, callback, "setState");
    };
    Component.prototype.forceUpdate = function(callback) {
        this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
    };
    var deprecatedAPIs = {
        isMounted: [
            "isMounted",
            "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."
        ],
        replaceState: [
            "replaceState",
            "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."
        ]
    }, fnName;
    for(fnName in deprecatedAPIs)deprecatedAPIs.hasOwnProperty(fnName) && defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    ComponentDummy.prototype = Component.prototype;
    deprecatedAPIs = PureComponent.prototype = new ComponentDummy();
    deprecatedAPIs.constructor = PureComponent;
    assign(deprecatedAPIs, Component.prototype);
    deprecatedAPIs.isPureReactComponent = !0;
    var isArrayImpl = Array.isArray, REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference"), ReactSharedInternals = {
        H: null,
        A: null,
        T: null,
        S: null,
        V: null,
        actQueue: null,
        isBatchingLegacy: !1,
        didScheduleLegacyUpdate: !1,
        didUsePromise: !1,
        thrownErrors: [],
        getCurrentStack: null,
        recentlyCreatedOwnerStacks: 0
    }, hasOwnProperty = Object.prototype.hasOwnProperty, createTask = console.createTask ? console.createTask : function() {
        return null;
    };
    deprecatedAPIs = {
        react_stack_bottom_frame: function(callStackForError) {
            return callStackForError();
        }
    };
    var specialPropKeyWarningShown, didWarnAboutOldJSXRuntime;
    var didWarnAboutElementRef = {};
    var unknownOwnerDebugStack = deprecatedAPIs.react_stack_bottom_frame.bind(deprecatedAPIs, UnknownOwner)();
    var unknownOwnerDebugTask = createTask(getTaskName(UnknownOwner));
    var didWarnAboutMaps = !1, userProvidedKeyEscapeRegex = /\/+/g, reportGlobalError = "function" === typeof reportError ? reportError : function(error) {
        if ("object" === typeof window && "function" === typeof window.ErrorEvent) {
            var event = new window.ErrorEvent("error", {
                bubbles: !0,
                cancelable: !0,
                message: "object" === typeof error && null !== error && "string" === typeof error.message ? String(error.message) : String(error),
                error: error
            });
            if (!window.dispatchEvent(event)) return;
        } else if ("object" === typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"] && "function" === typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"].emit) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"].emit("uncaughtException", error);
            return;
        }
        console.error(error);
    }, didWarnAboutMessageChannel = !1, enqueueTaskImpl = null, actScopeDepth = 0, didWarnNoAwaitAct = !1, isFlushing = !1, queueSeveralMicrotasks = "function" === typeof queueMicrotask ? function(callback) {
        queueMicrotask(function() {
            return queueMicrotask(callback);
        });
    } : enqueueTask;
    deprecatedAPIs = Object.freeze({
        __proto__: null,
        c: function(size) {
            return resolveDispatcher().useMemoCache(size);
        }
    });
    exports.Children = {
        map: mapChildren,
        forEach: function(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
                forEachFunc.apply(this, arguments);
            }, forEachContext);
        },
        count: function(children) {
            var n = 0;
            mapChildren(children, function() {
                n++;
            });
            return n;
        },
        toArray: function(children) {
            return mapChildren(children, function(child) {
                return child;
            }) || [];
        },
        only: function(children) {
            if (!isValidElement(children)) throw Error("React.Children.only expected to receive a single React element child.");
            return children;
        }
    };
    exports.Component = Component;
    exports.Fragment = REACT_FRAGMENT_TYPE;
    exports.Profiler = REACT_PROFILER_TYPE;
    exports.PureComponent = PureComponent;
    exports.StrictMode = REACT_STRICT_MODE_TYPE;
    exports.Suspense = REACT_SUSPENSE_TYPE;
    exports.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = ReactSharedInternals;
    exports.__COMPILER_RUNTIME = deprecatedAPIs;
    exports.act = function(callback) {
        var prevActQueue = ReactSharedInternals.actQueue, prevActScopeDepth = actScopeDepth;
        actScopeDepth++;
        var queue = ReactSharedInternals.actQueue = null !== prevActQueue ? prevActQueue : [], didAwaitActCall = !1;
        try {
            var result = callback();
        } catch (error) {
            ReactSharedInternals.thrownErrors.push(error);
        }
        if (0 < ReactSharedInternals.thrownErrors.length) throw popActScope(prevActQueue, prevActScopeDepth), callback = aggregateErrors(ReactSharedInternals.thrownErrors), ReactSharedInternals.thrownErrors.length = 0, callback;
        if (null !== result && "object" === typeof result && "function" === typeof result.then) {
            var thenable = result;
            queueSeveralMicrotasks(function() {
                didAwaitActCall || didWarnNoAwaitAct || (didWarnNoAwaitAct = !0, console.error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);"));
            });
            return {
                then: function(resolve, reject) {
                    didAwaitActCall = !0;
                    thenable.then(function(returnValue) {
                        popActScope(prevActQueue, prevActScopeDepth);
                        if (0 === prevActScopeDepth) {
                            try {
                                flushActQueue(queue), enqueueTask(function() {
                                    return recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                                });
                            } catch (error$0) {
                                ReactSharedInternals.thrownErrors.push(error$0);
                            }
                            if (0 < ReactSharedInternals.thrownErrors.length) {
                                var _thrownError = aggregateErrors(ReactSharedInternals.thrownErrors);
                                ReactSharedInternals.thrownErrors.length = 0;
                                reject(_thrownError);
                            }
                        } else resolve(returnValue);
                    }, function(error) {
                        popActScope(prevActQueue, prevActScopeDepth);
                        0 < ReactSharedInternals.thrownErrors.length ? (error = aggregateErrors(ReactSharedInternals.thrownErrors), ReactSharedInternals.thrownErrors.length = 0, reject(error)) : reject(error);
                    });
                }
            };
        }
        var returnValue$jscomp$0 = result;
        popActScope(prevActQueue, prevActScopeDepth);
        0 === prevActScopeDepth && (flushActQueue(queue), 0 !== queue.length && queueSeveralMicrotasks(function() {
            didAwaitActCall || didWarnNoAwaitAct || (didWarnNoAwaitAct = !0, console.error("A component suspended inside an `act` scope, but the `act` call was not awaited. When testing React components that depend on asynchronous data, you must await the result:\n\nawait act(() => ...)"));
        }), ReactSharedInternals.actQueue = null);
        if (0 < ReactSharedInternals.thrownErrors.length) throw callback = aggregateErrors(ReactSharedInternals.thrownErrors), ReactSharedInternals.thrownErrors.length = 0, callback;
        return {
            then: function(resolve, reject) {
                didAwaitActCall = !0;
                0 === prevActScopeDepth ? (ReactSharedInternals.actQueue = queue, enqueueTask(function() {
                    return recursivelyFlushAsyncActWork(returnValue$jscomp$0, resolve, reject);
                })) : resolve(returnValue$jscomp$0);
            }
        };
    };
    exports.cache = function(fn) {
        return function() {
            return fn.apply(null, arguments);
        };
    };
    exports.captureOwnerStack = function() {
        var getCurrentStack = ReactSharedInternals.getCurrentStack;
        return null === getCurrentStack ? null : getCurrentStack();
    };
    exports.cloneElement = function(element, config, children) {
        if (null === element || void 0 === element) throw Error("The argument must be a React element, but you passed " + element + ".");
        var props = assign({}, element.props), key = element.key, owner = element._owner;
        if (null != config) {
            var JSCompiler_inline_result;
            a: {
                if (hasOwnProperty.call(config, "ref") && (JSCompiler_inline_result = Object.getOwnPropertyDescriptor(config, "ref").get) && JSCompiler_inline_result.isReactWarning) {
                    JSCompiler_inline_result = !1;
                    break a;
                }
                JSCompiler_inline_result = void 0 !== config.ref;
            }
            JSCompiler_inline_result && (owner = getOwner());
            hasValidKey(config) && (checkKeyStringCoercion(config.key), key = "" + config.key);
            for(propName in config)!hasOwnProperty.call(config, propName) || "key" === propName || "__self" === propName || "__source" === propName || "ref" === propName && void 0 === config.ref || (props[propName] = config[propName]);
        }
        var propName = arguments.length - 2;
        if (1 === propName) props.children = children;
        else if (1 < propName) {
            JSCompiler_inline_result = Array(propName);
            for(var i = 0; i < propName; i++)JSCompiler_inline_result[i] = arguments[i + 2];
            props.children = JSCompiler_inline_result;
        }
        props = ReactElement(element.type, key, void 0, void 0, owner, props, element._debugStack, element._debugTask);
        for(key = 2; key < arguments.length; key++)owner = arguments[key], isValidElement(owner) && owner._store && (owner._store.validated = 1);
        return props;
    };
    exports.createContext = function(defaultValue) {
        defaultValue = {
            $$typeof: REACT_CONTEXT_TYPE,
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            _threadCount: 0,
            Provider: null,
            Consumer: null
        };
        defaultValue.Provider = defaultValue;
        defaultValue.Consumer = {
            $$typeof: REACT_CONSUMER_TYPE,
            _context: defaultValue
        };
        defaultValue._currentRenderer = null;
        defaultValue._currentRenderer2 = null;
        return defaultValue;
    };
    exports.createElement = function(type, config, children) {
        for(var i = 2; i < arguments.length; i++){
            var node = arguments[i];
            isValidElement(node) && node._store && (node._store.validated = 1);
        }
        i = {};
        node = null;
        if (null != config) for(propName in didWarnAboutOldJSXRuntime || !("__self" in config) || "key" in config || (didWarnAboutOldJSXRuntime = !0, console.warn("Your app (or one of its dependencies) is using an outdated JSX transform. Update to the modern JSX transform for faster performance: https://react.dev/link/new-jsx-transform")), hasValidKey(config) && (checkKeyStringCoercion(config.key), node = "" + config.key), config)hasOwnProperty.call(config, propName) && "key" !== propName && "__self" !== propName && "__source" !== propName && (i[propName] = config[propName]);
        var childrenLength = arguments.length - 2;
        if (1 === childrenLength) i.children = children;
        else if (1 < childrenLength) {
            for(var childArray = Array(childrenLength), _i = 0; _i < childrenLength; _i++)childArray[_i] = arguments[_i + 2];
            Object.freeze && Object.freeze(childArray);
            i.children = childArray;
        }
        if (type && type.defaultProps) for(propName in childrenLength = type.defaultProps, childrenLength)void 0 === i[propName] && (i[propName] = childrenLength[propName]);
        node && defineKeyPropWarningGetter(i, "function" === typeof type ? type.displayName || type.name || "Unknown" : type);
        var propName = 1e4 > ReactSharedInternals.recentlyCreatedOwnerStacks++;
        return ReactElement(type, node, void 0, void 0, getOwner(), i, propName ? Error("react-stack-top-frame") : unknownOwnerDebugStack, propName ? createTask(getTaskName(type)) : unknownOwnerDebugTask);
    };
    exports.createRef = function() {
        var refObject = {
            current: null
        };
        Object.seal(refObject);
        return refObject;
    };
    exports.forwardRef = function(render) {
        null != render && render.$$typeof === REACT_MEMO_TYPE ? console.error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).") : "function" !== typeof render ? console.error("forwardRef requires a render function but was given %s.", null === render ? "null" : typeof render) : 0 !== render.length && 2 !== render.length && console.error("forwardRef render functions accept exactly two parameters: props and ref. %s", 1 === render.length ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
        null != render && null != render.defaultProps && console.error("forwardRef render functions do not support defaultProps. Did you accidentally pass a React component?");
        var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render: render
        }, ownName;
        Object.defineProperty(elementType, "displayName", {
            enumerable: !1,
            configurable: !0,
            get: function() {
                return ownName;
            },
            set: function(name) {
                ownName = name;
                render.name || render.displayName || (Object.defineProperty(render, "name", {
                    value: name
                }), render.displayName = name);
            }
        });
        return elementType;
    };
    exports.isValidElement = isValidElement;
    exports.lazy = function(ctor) {
        return {
            $$typeof: REACT_LAZY_TYPE,
            _payload: {
                _status: -1,
                _result: ctor
            },
            _init: lazyInitializer
        };
    };
    exports.memo = function(type, compare) {
        null == type && console.error("memo: The first argument must be a component. Instead received: %s", null === type ? "null" : typeof type);
        compare = {
            $$typeof: REACT_MEMO_TYPE,
            type: type,
            compare: void 0 === compare ? null : compare
        };
        var ownName;
        Object.defineProperty(compare, "displayName", {
            enumerable: !1,
            configurable: !0,
            get: function() {
                return ownName;
            },
            set: function(name) {
                ownName = name;
                type.name || type.displayName || (Object.defineProperty(type, "name", {
                    value: name
                }), type.displayName = name);
            }
        });
        return compare;
    };
    exports.startTransition = function(scope) {
        var prevTransition = ReactSharedInternals.T, currentTransition = {};
        ReactSharedInternals.T = currentTransition;
        currentTransition._updatedFibers = new Set();
        try {
            var returnValue = scope(), onStartTransitionFinish = ReactSharedInternals.S;
            null !== onStartTransitionFinish && onStartTransitionFinish(currentTransition, returnValue);
            "object" === typeof returnValue && null !== returnValue && "function" === typeof returnValue.then && returnValue.then(noop, reportGlobalError);
        } catch (error) {
            reportGlobalError(error);
        } finally{
            null === prevTransition && currentTransition._updatedFibers && (scope = currentTransition._updatedFibers.size, currentTransition._updatedFibers.clear(), 10 < scope && console.warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.")), ReactSharedInternals.T = prevTransition;
        }
    };
    exports.unstable_useCacheRefresh = function() {
        return resolveDispatcher().useCacheRefresh();
    };
    exports.use = function(usable) {
        return resolveDispatcher().use(usable);
    };
    exports.useActionState = function(action, initialState, permalink) {
        return resolveDispatcher().useActionState(action, initialState, permalink);
    };
    exports.useCallback = function(callback, deps) {
        return resolveDispatcher().useCallback(callback, deps);
    };
    exports.useContext = function(Context) {
        var dispatcher = resolveDispatcher();
        Context.$$typeof === REACT_CONSUMER_TYPE && console.error("Calling useContext(Context.Consumer) is not supported and will cause bugs. Did you mean to call useContext(Context) instead?");
        return dispatcher.useContext(Context);
    };
    exports.useDebugValue = function(value, formatterFn) {
        return resolveDispatcher().useDebugValue(value, formatterFn);
    };
    exports.useDeferredValue = function(value, initialValue) {
        return resolveDispatcher().useDeferredValue(value, initialValue);
    };
    exports.useEffect = function(create, createDeps, update) {
        null == create && console.warn("React Hook useEffect requires an effect callback. Did you forget to pass a callback to the hook?");
        var dispatcher = resolveDispatcher();
        if ("function" === typeof update) throw Error("useEffect CRUD overload is not enabled in this build of React.");
        return dispatcher.useEffect(create, createDeps);
    };
    exports.useId = function() {
        return resolveDispatcher().useId();
    };
    exports.useImperativeHandle = function(ref, create, deps) {
        return resolveDispatcher().useImperativeHandle(ref, create, deps);
    };
    exports.useInsertionEffect = function(create, deps) {
        null == create && console.warn("React Hook useInsertionEffect requires an effect callback. Did you forget to pass a callback to the hook?");
        return resolveDispatcher().useInsertionEffect(create, deps);
    };
    exports.useLayoutEffect = function(create, deps) {
        null == create && console.warn("React Hook useLayoutEffect requires an effect callback. Did you forget to pass a callback to the hook?");
        return resolveDispatcher().useLayoutEffect(create, deps);
    };
    exports.useMemo = function(create, deps) {
        return resolveDispatcher().useMemo(create, deps);
    };
    exports.useOptimistic = function(passthrough, reducer) {
        return resolveDispatcher().useOptimistic(passthrough, reducer);
    };
    exports.useReducer = function(reducer, initialArg, init) {
        return resolveDispatcher().useReducer(reducer, initialArg, init);
    };
    exports.useRef = function(initialValue) {
        return resolveDispatcher().useRef(initialValue);
    };
    exports.useState = function(initialState) {
        return resolveDispatcher().useState(initialState);
    };
    exports.useSyncExternalStore = function(subscribe, getSnapshot, getServerSnapshot) {
        return resolveDispatcher().useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
    };
    exports.useTransition = function() {
        return resolveDispatcher().useTransition();
    };
    exports.version = "19.1.1";
    "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
}();
}}),
"[project]/node_modules/react/index.js [client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/polyfills/process.js [client] (ecmascript)");
'use strict';
if ("TURBOPACK compile-time falsy", 0) {
    "TURBOPACK unreachable";
} else {
    module.exports = __turbopack_context__.r("[project]/node_modules/react/cjs/react.development.js [client] (ecmascript)");
}
}}),
"[project]/node_modules/react/cjs/react-jsx-runtime.development.js [client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/**
 * @license React
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/polyfills/process.js [client] (ecmascript)");
"use strict";
"production" !== ("TURBOPACK compile-time value", "development") && function() {
    function getComponentNameFromType(type) {
        if (null == type) return null;
        if ("function" === typeof type) return type.$$typeof === REACT_CLIENT_REFERENCE ? null : type.displayName || type.name || null;
        if ("string" === typeof type) return type;
        switch(type){
            case REACT_FRAGMENT_TYPE:
                return "Fragment";
            case REACT_PROFILER_TYPE:
                return "Profiler";
            case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
            case REACT_SUSPENSE_TYPE:
                return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            case REACT_ACTIVITY_TYPE:
                return "Activity";
        }
        if ("object" === typeof type) switch("number" === typeof type.tag && console.error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), type.$$typeof){
            case REACT_PORTAL_TYPE:
                return "Portal";
            case REACT_CONTEXT_TYPE:
                return (type.displayName || "Context") + ".Provider";
            case REACT_CONSUMER_TYPE:
                return (type._context.displayName || "Context") + ".Consumer";
            case REACT_FORWARD_REF_TYPE:
                var innerType = type.render;
                type = type.displayName;
                type || (type = innerType.displayName || innerType.name || "", type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef");
                return type;
            case REACT_MEMO_TYPE:
                return innerType = type.displayName || null, null !== innerType ? innerType : getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE:
                innerType = type._payload;
                type = type._init;
                try {
                    return getComponentNameFromType(type(innerType));
                } catch (x) {}
        }
        return null;
    }
    function testStringCoercion(value) {
        return "" + value;
    }
    function checkKeyStringCoercion(value) {
        try {
            testStringCoercion(value);
            var JSCompiler_inline_result = !1;
        } catch (e) {
            JSCompiler_inline_result = !0;
        }
        if (JSCompiler_inline_result) {
            JSCompiler_inline_result = console;
            var JSCompiler_temp_const = JSCompiler_inline_result.error;
            var JSCompiler_inline_result$jscomp$0 = "function" === typeof Symbol && Symbol.toStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            JSCompiler_temp_const.call(JSCompiler_inline_result, "The provided key is an unsupported type %s. This value must be coerced to a string before using it here.", JSCompiler_inline_result$jscomp$0);
            return testStringCoercion(value);
        }
    }
    function getTaskName(type) {
        if (type === REACT_FRAGMENT_TYPE) return "<>";
        if ("object" === typeof type && null !== type && type.$$typeof === REACT_LAZY_TYPE) return "<...>";
        try {
            var name = getComponentNameFromType(type);
            return name ? "<" + name + ">" : "<...>";
        } catch (x) {
            return "<...>";
        }
    }
    function getOwner() {
        var dispatcher = ReactSharedInternals.A;
        return null === dispatcher ? null : dispatcher.getOwner();
    }
    function UnknownOwner() {
        return Error("react-stack-top-frame");
    }
    function hasValidKey(config) {
        if (hasOwnProperty.call(config, "key")) {
            var getter = Object.getOwnPropertyDescriptor(config, "key").get;
            if (getter && getter.isReactWarning) return !1;
        }
        return void 0 !== config.key;
    }
    function defineKeyPropWarningGetter(props, displayName) {
        function warnAboutAccessingKey() {
            specialPropKeyWarningShown || (specialPropKeyWarningShown = !0, console.error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)", displayName));
        }
        warnAboutAccessingKey.isReactWarning = !0;
        Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: !0
        });
    }
    function elementRefGetterWithDeprecationWarning() {
        var componentName = getComponentNameFromType(this.type);
        didWarnAboutElementRef[componentName] || (didWarnAboutElementRef[componentName] = !0, console.error("Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release."));
        componentName = this.props.ref;
        return void 0 !== componentName ? componentName : null;
    }
    function ReactElement(type, key, self, source, owner, props, debugStack, debugTask) {
        self = props.ref;
        type = {
            $$typeof: REACT_ELEMENT_TYPE,
            type: type,
            key: key,
            props: props,
            _owner: owner
        };
        null !== (void 0 !== self ? self : null) ? Object.defineProperty(type, "ref", {
            enumerable: !1,
            get: elementRefGetterWithDeprecationWarning
        }) : Object.defineProperty(type, "ref", {
            enumerable: !1,
            value: null
        });
        type._store = {};
        Object.defineProperty(type._store, "validated", {
            configurable: !1,
            enumerable: !1,
            writable: !0,
            value: 0
        });
        Object.defineProperty(type, "_debugInfo", {
            configurable: !1,
            enumerable: !1,
            writable: !0,
            value: null
        });
        Object.defineProperty(type, "_debugStack", {
            configurable: !1,
            enumerable: !1,
            writable: !0,
            value: debugStack
        });
        Object.defineProperty(type, "_debugTask", {
            configurable: !1,
            enumerable: !1,
            writable: !0,
            value: debugTask
        });
        Object.freeze && (Object.freeze(type.props), Object.freeze(type));
        return type;
    }
    function jsxDEVImpl(type, config, maybeKey, isStaticChildren, source, self, debugStack, debugTask) {
        var children = config.children;
        if (void 0 !== children) if (isStaticChildren) if (isArrayImpl(children)) {
            for(isStaticChildren = 0; isStaticChildren < children.length; isStaticChildren++)validateChildKeys(children[isStaticChildren]);
            Object.freeze && Object.freeze(children);
        } else console.error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
        else validateChildKeys(children);
        if (hasOwnProperty.call(config, "key")) {
            children = getComponentNameFromType(type);
            var keys = Object.keys(config).filter(function(k) {
                return "key" !== k;
            });
            isStaticChildren = 0 < keys.length ? "{key: someKey, " + keys.join(": ..., ") + ": ...}" : "{key: someKey}";
            didWarnAboutKeySpread[children + isStaticChildren] || (keys = 0 < keys.length ? "{" + keys.join(": ..., ") + ": ...}" : "{}", console.error('A props object containing a "key" prop is being spread into JSX:\n  let props = %s;\n  <%s {...props} />\nReact keys must be passed directly to JSX without using spread:\n  let props = %s;\n  <%s key={someKey} {...props} />', isStaticChildren, children, keys, children), didWarnAboutKeySpread[children + isStaticChildren] = !0);
        }
        children = null;
        void 0 !== maybeKey && (checkKeyStringCoercion(maybeKey), children = "" + maybeKey);
        hasValidKey(config) && (checkKeyStringCoercion(config.key), children = "" + config.key);
        if ("key" in config) {
            maybeKey = {};
            for(var propName in config)"key" !== propName && (maybeKey[propName] = config[propName]);
        } else maybeKey = config;
        children && defineKeyPropWarningGetter(maybeKey, "function" === typeof type ? type.displayName || type.name || "Unknown" : type);
        return ReactElement(type, children, self, source, getOwner(), maybeKey, debugStack, debugTask);
    }
    function validateChildKeys(node) {
        "object" === typeof node && null !== node && node.$$typeof === REACT_ELEMENT_TYPE && node._store && (node._store.validated = 1);
    }
    var React = __turbopack_context__.r("[project]/node_modules/react/index.js [client] (ecmascript)"), REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler");
    Symbol.for("react.provider");
    var REACT_CONSUMER_TYPE = Symbol.for("react.consumer"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_ACTIVITY_TYPE = Symbol.for("react.activity"), REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference"), ReactSharedInternals = React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, hasOwnProperty = Object.prototype.hasOwnProperty, isArrayImpl = Array.isArray, createTask = console.createTask ? console.createTask : function() {
        return null;
    };
    React = {
        react_stack_bottom_frame: function(callStackForError) {
            return callStackForError();
        }
    };
    var specialPropKeyWarningShown;
    var didWarnAboutElementRef = {};
    var unknownOwnerDebugStack = React.react_stack_bottom_frame.bind(React, UnknownOwner)();
    var unknownOwnerDebugTask = createTask(getTaskName(UnknownOwner));
    var didWarnAboutKeySpread = {};
    exports.Fragment = REACT_FRAGMENT_TYPE;
    exports.jsx = function(type, config, maybeKey, source, self) {
        var trackActualOwner = 1e4 > ReactSharedInternals.recentlyCreatedOwnerStacks++;
        return jsxDEVImpl(type, config, maybeKey, !1, source, self, trackActualOwner ? Error("react-stack-top-frame") : unknownOwnerDebugStack, trackActualOwner ? createTask(getTaskName(type)) : unknownOwnerDebugTask);
    };
    exports.jsxs = function(type, config, maybeKey, source, self) {
        var trackActualOwner = 1e4 > ReactSharedInternals.recentlyCreatedOwnerStacks++;
        return jsxDEVImpl(type, config, maybeKey, !0, source, self, trackActualOwner ? Error("react-stack-top-frame") : unknownOwnerDebugStack, trackActualOwner ? createTask(getTaskName(type)) : unknownOwnerDebugTask);
    };
}();
}}),
"[project]/node_modules/react/jsx-runtime.js [client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/polyfills/process.js [client] (ecmascript)");
'use strict';
if ("TURBOPACK compile-time falsy", 0) {
    "TURBOPACK unreachable";
} else {
    module.exports = __turbopack_context__.r("[project]/node_modules/react/cjs/react-jsx-runtime.development.js [client] (ecmascript)");
}
}}),
"[project]/node_modules/react/cjs/react-jsx-dev-runtime.development.js [client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/**
 * @license React
 * react-jsx-dev-runtime.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/polyfills/process.js [client] (ecmascript)");
"use strict";
"production" !== ("TURBOPACK compile-time value", "development") && function() {
    function getComponentNameFromType(type) {
        if (null == type) return null;
        if ("function" === typeof type) return type.$$typeof === REACT_CLIENT_REFERENCE ? null : type.displayName || type.name || null;
        if ("string" === typeof type) return type;
        switch(type){
            case REACT_FRAGMENT_TYPE:
                return "Fragment";
            case REACT_PROFILER_TYPE:
                return "Profiler";
            case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
            case REACT_SUSPENSE_TYPE:
                return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            case REACT_ACTIVITY_TYPE:
                return "Activity";
        }
        if ("object" === typeof type) switch("number" === typeof type.tag && console.error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), type.$$typeof){
            case REACT_PORTAL_TYPE:
                return "Portal";
            case REACT_CONTEXT_TYPE:
                return (type.displayName || "Context") + ".Provider";
            case REACT_CONSUMER_TYPE:
                return (type._context.displayName || "Context") + ".Consumer";
            case REACT_FORWARD_REF_TYPE:
                var innerType = type.render;
                type = type.displayName;
                type || (type = innerType.displayName || innerType.name || "", type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef");
                return type;
            case REACT_MEMO_TYPE:
                return innerType = type.displayName || null, null !== innerType ? innerType : getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE:
                innerType = type._payload;
                type = type._init;
                try {
                    return getComponentNameFromType(type(innerType));
                } catch (x) {}
        }
        return null;
    }
    function testStringCoercion(value) {
        return "" + value;
    }
    function checkKeyStringCoercion(value) {
        try {
            testStringCoercion(value);
            var JSCompiler_inline_result = !1;
        } catch (e) {
            JSCompiler_inline_result = !0;
        }
        if (JSCompiler_inline_result) {
            JSCompiler_inline_result = console;
            var JSCompiler_temp_const = JSCompiler_inline_result.error;
            var JSCompiler_inline_result$jscomp$0 = "function" === typeof Symbol && Symbol.toStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            JSCompiler_temp_const.call(JSCompiler_inline_result, "The provided key is an unsupported type %s. This value must be coerced to a string before using it here.", JSCompiler_inline_result$jscomp$0);
            return testStringCoercion(value);
        }
    }
    function getTaskName(type) {
        if (type === REACT_FRAGMENT_TYPE) return "<>";
        if ("object" === typeof type && null !== type && type.$$typeof === REACT_LAZY_TYPE) return "<...>";
        try {
            var name = getComponentNameFromType(type);
            return name ? "<" + name + ">" : "<...>";
        } catch (x) {
            return "<...>";
        }
    }
    function getOwner() {
        var dispatcher = ReactSharedInternals.A;
        return null === dispatcher ? null : dispatcher.getOwner();
    }
    function UnknownOwner() {
        return Error("react-stack-top-frame");
    }
    function hasValidKey(config) {
        if (hasOwnProperty.call(config, "key")) {
            var getter = Object.getOwnPropertyDescriptor(config, "key").get;
            if (getter && getter.isReactWarning) return !1;
        }
        return void 0 !== config.key;
    }
    function defineKeyPropWarningGetter(props, displayName) {
        function warnAboutAccessingKey() {
            specialPropKeyWarningShown || (specialPropKeyWarningShown = !0, console.error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)", displayName));
        }
        warnAboutAccessingKey.isReactWarning = !0;
        Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: !0
        });
    }
    function elementRefGetterWithDeprecationWarning() {
        var componentName = getComponentNameFromType(this.type);
        didWarnAboutElementRef[componentName] || (didWarnAboutElementRef[componentName] = !0, console.error("Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release."));
        componentName = this.props.ref;
        return void 0 !== componentName ? componentName : null;
    }
    function ReactElement(type, key, self, source, owner, props, debugStack, debugTask) {
        self = props.ref;
        type = {
            $$typeof: REACT_ELEMENT_TYPE,
            type: type,
            key: key,
            props: props,
            _owner: owner
        };
        null !== (void 0 !== self ? self : null) ? Object.defineProperty(type, "ref", {
            enumerable: !1,
            get: elementRefGetterWithDeprecationWarning
        }) : Object.defineProperty(type, "ref", {
            enumerable: !1,
            value: null
        });
        type._store = {};
        Object.defineProperty(type._store, "validated", {
            configurable: !1,
            enumerable: !1,
            writable: !0,
            value: 0
        });
        Object.defineProperty(type, "_debugInfo", {
            configurable: !1,
            enumerable: !1,
            writable: !0,
            value: null
        });
        Object.defineProperty(type, "_debugStack", {
            configurable: !1,
            enumerable: !1,
            writable: !0,
            value: debugStack
        });
        Object.defineProperty(type, "_debugTask", {
            configurable: !1,
            enumerable: !1,
            writable: !0,
            value: debugTask
        });
        Object.freeze && (Object.freeze(type.props), Object.freeze(type));
        return type;
    }
    function jsxDEVImpl(type, config, maybeKey, isStaticChildren, source, self, debugStack, debugTask) {
        var children = config.children;
        if (void 0 !== children) if (isStaticChildren) if (isArrayImpl(children)) {
            for(isStaticChildren = 0; isStaticChildren < children.length; isStaticChildren++)validateChildKeys(children[isStaticChildren]);
            Object.freeze && Object.freeze(children);
        } else console.error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
        else validateChildKeys(children);
        if (hasOwnProperty.call(config, "key")) {
            children = getComponentNameFromType(type);
            var keys = Object.keys(config).filter(function(k) {
                return "key" !== k;
            });
            isStaticChildren = 0 < keys.length ? "{key: someKey, " + keys.join(": ..., ") + ": ...}" : "{key: someKey}";
            didWarnAboutKeySpread[children + isStaticChildren] || (keys = 0 < keys.length ? "{" + keys.join(": ..., ") + ": ...}" : "{}", console.error('A props object containing a "key" prop is being spread into JSX:\n  let props = %s;\n  <%s {...props} />\nReact keys must be passed directly to JSX without using spread:\n  let props = %s;\n  <%s key={someKey} {...props} />', isStaticChildren, children, keys, children), didWarnAboutKeySpread[children + isStaticChildren] = !0);
        }
        children = null;
        void 0 !== maybeKey && (checkKeyStringCoercion(maybeKey), children = "" + maybeKey);
        hasValidKey(config) && (checkKeyStringCoercion(config.key), children = "" + config.key);
        if ("key" in config) {
            maybeKey = {};
            for(var propName in config)"key" !== propName && (maybeKey[propName] = config[propName]);
        } else maybeKey = config;
        children && defineKeyPropWarningGetter(maybeKey, "function" === typeof type ? type.displayName || type.name || "Unknown" : type);
        return ReactElement(type, children, self, source, getOwner(), maybeKey, debugStack, debugTask);
    }
    function validateChildKeys(node) {
        "object" === typeof node && null !== node && node.$$typeof === REACT_ELEMENT_TYPE && node._store && (node._store.validated = 1);
    }
    var React = __turbopack_context__.r("[project]/node_modules/react/index.js [client] (ecmascript)"), REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler");
    Symbol.for("react.provider");
    var REACT_CONSUMER_TYPE = Symbol.for("react.consumer"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_ACTIVITY_TYPE = Symbol.for("react.activity"), REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference"), ReactSharedInternals = React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, hasOwnProperty = Object.prototype.hasOwnProperty, isArrayImpl = Array.isArray, createTask = console.createTask ? console.createTask : function() {
        return null;
    };
    React = {
        react_stack_bottom_frame: function(callStackForError) {
            return callStackForError();
        }
    };
    var specialPropKeyWarningShown;
    var didWarnAboutElementRef = {};
    var unknownOwnerDebugStack = React.react_stack_bottom_frame.bind(React, UnknownOwner)();
    var unknownOwnerDebugTask = createTask(getTaskName(UnknownOwner));
    var didWarnAboutKeySpread = {};
    exports.Fragment = REACT_FRAGMENT_TYPE;
    exports.jsxDEV = function(type, config, maybeKey, isStaticChildren, source, self) {
        var trackActualOwner = 1e4 > ReactSharedInternals.recentlyCreatedOwnerStacks++;
        return jsxDEVImpl(type, config, maybeKey, isStaticChildren, source, self, trackActualOwner ? Error("react-stack-top-frame") : unknownOwnerDebugStack, trackActualOwner ? createTask(getTaskName(type)) : unknownOwnerDebugTask);
    };
}();
}}),
"[project]/node_modules/react/jsx-dev-runtime.js [client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/polyfills/process.js [client] (ecmascript)");
'use strict';
if ("TURBOPACK compile-time falsy", 0) {
    "TURBOPACK unreachable";
} else {
    module.exports = __turbopack_context__.r("[project]/node_modules/react/cjs/react-jsx-dev-runtime.development.js [client] (ecmascript)");
}
}}),
"[project]/node_modules/scheduler/cjs/scheduler.development.js [client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/**
 * @license React
 * scheduler.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/polyfills/process.js [client] (ecmascript)");
"use strict";
"production" !== ("TURBOPACK compile-time value", "development") && function() {
    function performWorkUntilDeadline() {
        needsPaint = !1;
        if (isMessageLoopRunning) {
            var currentTime = exports.unstable_now();
            startTime = currentTime;
            var hasMoreWork = !0;
            try {
                a: {
                    isHostCallbackScheduled = !1;
                    isHostTimeoutScheduled && (isHostTimeoutScheduled = !1, localClearTimeout(taskTimeoutID), taskTimeoutID = -1);
                    isPerformingWork = !0;
                    var previousPriorityLevel = currentPriorityLevel;
                    try {
                        b: {
                            advanceTimers(currentTime);
                            for(currentTask = peek(taskQueue); null !== currentTask && !(currentTask.expirationTime > currentTime && shouldYieldToHost());){
                                var callback = currentTask.callback;
                                if ("function" === typeof callback) {
                                    currentTask.callback = null;
                                    currentPriorityLevel = currentTask.priorityLevel;
                                    var continuationCallback = callback(currentTask.expirationTime <= currentTime);
                                    currentTime = exports.unstable_now();
                                    if ("function" === typeof continuationCallback) {
                                        currentTask.callback = continuationCallback;
                                        advanceTimers(currentTime);
                                        hasMoreWork = !0;
                                        break b;
                                    }
                                    currentTask === peek(taskQueue) && pop(taskQueue);
                                    advanceTimers(currentTime);
                                } else pop(taskQueue);
                                currentTask = peek(taskQueue);
                            }
                            if (null !== currentTask) hasMoreWork = !0;
                            else {
                                var firstTimer = peek(timerQueue);
                                null !== firstTimer && requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                                hasMoreWork = !1;
                            }
                        }
                        break a;
                    } finally{
                        currentTask = null, currentPriorityLevel = previousPriorityLevel, isPerformingWork = !1;
                    }
                    hasMoreWork = void 0;
                }
            } finally{
                hasMoreWork ? schedulePerformWorkUntilDeadline() : isMessageLoopRunning = !1;
            }
        }
    }
    function push(heap, node) {
        var index = heap.length;
        heap.push(node);
        a: for(; 0 < index;){
            var parentIndex = index - 1 >>> 1, parent = heap[parentIndex];
            if (0 < compare(parent, node)) heap[parentIndex] = node, heap[index] = parent, index = parentIndex;
            else break a;
        }
    }
    function peek(heap) {
        return 0 === heap.length ? null : heap[0];
    }
    function pop(heap) {
        if (0 === heap.length) return null;
        var first = heap[0], last = heap.pop();
        if (last !== first) {
            heap[0] = last;
            a: for(var index = 0, length = heap.length, halfLength = length >>> 1; index < halfLength;){
                var leftIndex = 2 * (index + 1) - 1, left = heap[leftIndex], rightIndex = leftIndex + 1, right = heap[rightIndex];
                if (0 > compare(left, last)) rightIndex < length && 0 > compare(right, left) ? (heap[index] = right, heap[rightIndex] = last, index = rightIndex) : (heap[index] = left, heap[leftIndex] = last, index = leftIndex);
                else if (rightIndex < length && 0 > compare(right, last)) heap[index] = right, heap[rightIndex] = last, index = rightIndex;
                else break a;
            }
        }
        return first;
    }
    function compare(a, b) {
        var diff = a.sortIndex - b.sortIndex;
        return 0 !== diff ? diff : a.id - b.id;
    }
    function advanceTimers(currentTime) {
        for(var timer = peek(timerQueue); null !== timer;){
            if (null === timer.callback) pop(timerQueue);
            else if (timer.startTime <= currentTime) pop(timerQueue), timer.sortIndex = timer.expirationTime, push(taskQueue, timer);
            else break;
            timer = peek(timerQueue);
        }
    }
    function handleTimeout(currentTime) {
        isHostTimeoutScheduled = !1;
        advanceTimers(currentTime);
        if (!isHostCallbackScheduled) if (null !== peek(taskQueue)) isHostCallbackScheduled = !0, isMessageLoopRunning || (isMessageLoopRunning = !0, schedulePerformWorkUntilDeadline());
        else {
            var firstTimer = peek(timerQueue);
            null !== firstTimer && requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
        }
    }
    function shouldYieldToHost() {
        return needsPaint ? !0 : exports.unstable_now() - startTime < frameInterval ? !1 : !0;
    }
    function requestHostTimeout(callback, ms) {
        taskTimeoutID = localSetTimeout(function() {
            callback(exports.unstable_now());
        }, ms);
    }
    "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
    exports.unstable_now = void 0;
    if ("object" === typeof performance && "function" === typeof performance.now) {
        var localPerformance = performance;
        exports.unstable_now = function() {
            return localPerformance.now();
        };
    } else {
        var localDate = Date, initialTime = localDate.now();
        exports.unstable_now = function() {
            return localDate.now() - initialTime;
        };
    }
    var taskQueue = [], timerQueue = [], taskIdCounter = 1, currentTask = null, currentPriorityLevel = 3, isPerformingWork = !1, isHostCallbackScheduled = !1, isHostTimeoutScheduled = !1, needsPaint = !1, localSetTimeout = "function" === typeof setTimeout ? setTimeout : null, localClearTimeout = "function" === typeof clearTimeout ? clearTimeout : null, localSetImmediate = "undefined" !== typeof setImmediate ? setImmediate : null, isMessageLoopRunning = !1, taskTimeoutID = -1, frameInterval = 5, startTime = -1;
    if ("function" === typeof localSetImmediate) var schedulePerformWorkUntilDeadline = function() {
        localSetImmediate(performWorkUntilDeadline);
    };
    else if ("undefined" !== typeof MessageChannel) {
        var channel = new MessageChannel(), port = channel.port2;
        channel.port1.onmessage = performWorkUntilDeadline;
        schedulePerformWorkUntilDeadline = function() {
            port.postMessage(null);
        };
    } else schedulePerformWorkUntilDeadline = function() {
        localSetTimeout(performWorkUntilDeadline, 0);
    };
    exports.unstable_IdlePriority = 5;
    exports.unstable_ImmediatePriority = 1;
    exports.unstable_LowPriority = 4;
    exports.unstable_NormalPriority = 3;
    exports.unstable_Profiling = null;
    exports.unstable_UserBlockingPriority = 2;
    exports.unstable_cancelCallback = function(task) {
        task.callback = null;
    };
    exports.unstable_forceFrameRate = function(fps) {
        0 > fps || 125 < fps ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : frameInterval = 0 < fps ? Math.floor(1e3 / fps) : 5;
    };
    exports.unstable_getCurrentPriorityLevel = function() {
        return currentPriorityLevel;
    };
    exports.unstable_next = function(eventHandler) {
        switch(currentPriorityLevel){
            case 1:
            case 2:
            case 3:
                var priorityLevel = 3;
                break;
            default:
                priorityLevel = currentPriorityLevel;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
            return eventHandler();
        } finally{
            currentPriorityLevel = previousPriorityLevel;
        }
    };
    exports.unstable_requestPaint = function() {
        needsPaint = !0;
    };
    exports.unstable_runWithPriority = function(priorityLevel, eventHandler) {
        switch(priorityLevel){
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
                break;
            default:
                priorityLevel = 3;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
            return eventHandler();
        } finally{
            currentPriorityLevel = previousPriorityLevel;
        }
    };
    exports.unstable_scheduleCallback = function(priorityLevel, callback, options) {
        var currentTime = exports.unstable_now();
        "object" === typeof options && null !== options ? (options = options.delay, options = "number" === typeof options && 0 < options ? currentTime + options : currentTime) : options = currentTime;
        switch(priorityLevel){
            case 1:
                var timeout = -1;
                break;
            case 2:
                timeout = 250;
                break;
            case 5:
                timeout = 1073741823;
                break;
            case 4:
                timeout = 1e4;
                break;
            default:
                timeout = 5e3;
        }
        timeout = options + timeout;
        priorityLevel = {
            id: taskIdCounter++,
            callback: callback,
            priorityLevel: priorityLevel,
            startTime: options,
            expirationTime: timeout,
            sortIndex: -1
        };
        options > currentTime ? (priorityLevel.sortIndex = options, push(timerQueue, priorityLevel), null === peek(taskQueue) && priorityLevel === peek(timerQueue) && (isHostTimeoutScheduled ? (localClearTimeout(taskTimeoutID), taskTimeoutID = -1) : isHostTimeoutScheduled = !0, requestHostTimeout(handleTimeout, options - currentTime))) : (priorityLevel.sortIndex = timeout, push(taskQueue, priorityLevel), isHostCallbackScheduled || isPerformingWork || (isHostCallbackScheduled = !0, isMessageLoopRunning || (isMessageLoopRunning = !0, schedulePerformWorkUntilDeadline())));
        return priorityLevel;
    };
    exports.unstable_shouldYield = shouldYieldToHost;
    exports.unstable_wrapCallback = function(callback) {
        var parentPriorityLevel = currentPriorityLevel;
        return function() {
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
                return callback.apply(this, arguments);
            } finally{
                currentPriorityLevel = previousPriorityLevel;
            }
        };
    };
    "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
}();
}}),
"[project]/node_modules/scheduler/index.js [client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/build/polyfills/process.js [client] (ecmascript)");
'use strict';
if ("TURBOPACK compile-time falsy", 0) {
    "TURBOPACK unreachable";
} else {
    module.exports = __turbopack_context__.r("[project]/node_modules/scheduler/cjs/scheduler.development.js [client] (ecmascript)");
}
}}),
"[project]/node_modules/react-tsparticles/esm/Utils.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "deepCompare": (()=>deepCompare)
});
const isObject = (val)=>typeof val === "object" && val !== null;
function deepCompare(obj1, obj2, excludeKeyFn = ()=>false) {
    if (!isObject(obj1) || !isObject(obj2)) {
        return obj1 === obj2;
    }
    const keys1 = Object.keys(obj1).filter((key)=>!excludeKeyFn(key)), keys2 = Object.keys(obj2).filter((key)=>!excludeKeyFn(key));
    if (keys1.length !== keys2.length) {
        return false;
    }
    for (const key of keys1){
        const value1 = obj1[key], value2 = obj2[key];
        if (isObject(value1) && isObject(value2)) {
            if (value1 === obj2 && value2 === obj1) {
                continue;
            }
            if (!deepCompare(value1, value2, excludeKeyFn)) {
                return false;
            }
        } else if (Array.isArray(value1) && Array.isArray(value2)) {
            if (!deepCompareArrays(value1, value2, excludeKeyFn)) {
                return false;
            }
        } else if (value1 !== value2) {
            return false;
        }
    }
    return true;
}
function deepCompareArrays(arr1, arr2, excludeKeyFn) {
    if (arr1.length !== arr2.length) {
        return false;
    }
    for(let i = 0; i < arr1.length; i++){
        const val1 = arr1[i], val2 = arr2[i];
        if (Array.isArray(val1) && Array.isArray(val2)) {
            if (!deepCompareArrays(val1, val2, excludeKeyFn)) {
                return false;
            }
        } else if (isObject(val1) && isObject(val2)) {
            if (!deepCompare(val1, val2, excludeKeyFn)) {
                return false;
            }
        } else if (val1 !== val2) {
            return false;
        }
    }
    return true;
}
}}),
"[project]/node_modules/react-tsparticles/esm/Particles.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/react/index.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/index.js [client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$tsparticles$2f$esm$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/react-tsparticles/esm/Utils.js [client] (ecmascript)");
;
;
;
const defaultId = "tsparticles";
class Particles extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Component"] {
    constructor(props){
        super(props);
        this.state = {
            init: false,
            library: undefined
        };
    }
    destroy() {
        if (!this.state.library) {
            return;
        }
        this.state.library.destroy();
        this.setState({
            library: undefined
        });
    }
    shouldComponentUpdate(nextProps) {
        const nextOptions = nextProps.options ?? nextProps.params, currentOptions = this.props.options ?? this.props.params;
        return nextProps.url !== this.props.url || nextProps.id !== this.props.id || nextProps.canvasClassName !== this.props.canvasClassName || nextProps.className !== this.props.className || nextProps.height !== this.props.height || nextProps.width !== this.props.width || !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$tsparticles$2f$esm$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["deepCompare"])(nextProps.style, this.props.style) || nextProps.init !== this.props.init || nextProps.loaded !== this.props.loaded || !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$tsparticles$2f$esm$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["deepCompare"])(nextOptions, currentOptions, (key)=>key.startsWith("_"));
    }
    componentDidUpdate() {
        this.refresh();
    }
    forceUpdate() {
        this.refresh().then(()=>{
            super.forceUpdate();
        });
    }
    componentDidMount() {
        (async ()=>{
            if (this.props.init) {
                await this.props.init(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["tsParticles"]);
            }
            this.setState({
                init: true
            }, async ()=>{
                await this.loadParticles();
            });
        })();
    }
    componentWillUnmount() {
        this.destroy();
    }
    render() {
        const { width, height, className, canvasClassName, id } = this.props;
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"].createElement("div", {
            className: className,
            id: id
        }, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"].createElement("canvas", {
            className: canvasClassName,
            style: {
                ...this.props.style,
                width,
                height
            }
        }));
    }
    async refresh() {
        this.destroy();
        await this.loadParticles();
    }
    async loadParticles() {
        if (!this.state.init) {
            return;
        }
        const id = this.props.id ?? Particles.defaultProps.id ?? defaultId, container = await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["tsParticles"].load({
            url: this.props.url,
            id,
            options: this.props.options ?? this.props.params
        });
        if (this.props.container) {
            this.props.container.current = container;
        }
        this.setState({
            library: container
        });
        if (this.props.loaded) {
            await this.props.loaded(container);
        }
    }
}
Particles.defaultProps = {
    width: "100%",
    height: "100%",
    options: {},
    style: {},
    url: undefined,
    id: defaultId
};
const __TURBOPACK__default__export__ = Particles;
}}),
"[project]/node_modules/react-tsparticles/esm/index.js [client] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$tsparticles$2f$esm$2f$Particles$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/react-tsparticles/esm/Particles.js [client] (ecmascript)");
;
const __TURBOPACK__default__export__ = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$tsparticles$2f$esm$2f$Particles$2e$js__$5b$client$5d$__$28$ecmascript$29$__["default"];
;
}}),
"[project]/node_modules/react-tsparticles/esm/index.js [client] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$tsparticles$2f$esm$2f$Particles$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/react-tsparticles/esm/Particles.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$react$2d$tsparticles$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/react-tsparticles/esm/index.js [client] (ecmascript) <locals>");
}}),
"[project]/node_modules/tsparticles-particles.js/esm/marcbruederlin/Particles.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Particles": (()=>Particles)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/index.js [client] (ecmascript) <locals>");
;
class Particles {
    static init(options) {
        const particles = new Particles(), selector = options.selector;
        if (!selector) {
            throw new Error("No selector provided");
        }
        const el = document.querySelector(selector);
        if (!el) {
            throw new Error("No element found for selector");
        }
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["tsParticles"].set(selector.replace(".", "").replace("!", ""), el, {
            fullScreen: {
                enable: false
            },
            particles: {
                color: {
                    value: options.color ?? "!000000"
                },
                links: {
                    color: "random",
                    distance: options.minDistance ?? 120,
                    enable: options.connectParticles ?? false
                },
                move: {
                    enable: true,
                    speed: options.speed ?? 0.5
                },
                number: {
                    value: options.maxParticles ?? 100
                },
                size: {
                    value: {
                        min: 1,
                        max: options.sizeVariations ?? 3
                    }
                }
            },
            responsive: options.responsive?.map((responsive)=>({
                    maxWidth: responsive.breakpoint,
                    options: {
                        particles: {
                            color: {
                                value: responsive.options?.color
                            },
                            links: {
                                distance: responsive.options?.minDistance,
                                enable: responsive.options?.connectParticles
                            },
                            number: {
                                value: options.maxParticles
                            },
                            move: {
                                enable: true,
                                speed: responsive.options?.speed
                            },
                            size: {
                                value: responsive.options?.sizeVariations
                            }
                        }
                    }
                }))
        }).then((container)=>{
            particles._container = container;
        });
        return particles;
    }
    destroy() {
        const container = this._container;
        container && container.destroy();
    }
    pauseAnimation() {
        const container = this._container;
        container && container.pause();
    }
    resumeAnimation() {
        const container = this._container;
        container && container.play();
    }
}
}}),
"[project]/node_modules/tsparticles-particles.js/esm/VincentGarreau/particles.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "initParticlesJS": (()=>initParticlesJS)
});
const initParticlesJS = (engine)=>{
    const particlesJS = (tagId, options)=>{
        return engine.load(tagId, options);
    };
    particlesJS.load = (tagId, pathConfigJson, callback)=>{
        engine.loadJSON(tagId, pathConfigJson).then((container)=>{
            if (container) {
                callback(container);
            }
        }).catch(()=>{
            callback(undefined);
        });
    };
    particlesJS.setOnClickHandler = (callback)=>{
        engine.setOnClickHandler(callback);
    };
    const pJSDom = engine.dom();
    return {
        particlesJS,
        pJSDom
    };
};
;
}}),
"[project]/node_modules/tsparticles-particles.js/esm/index.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "initPjs": (()=>initPjs)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$particles$2e$js$2f$esm$2f$marcbruederlin$2f$Particles$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-particles.js/esm/marcbruederlin/Particles.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$particles$2e$js$2f$esm$2f$VincentGarreau$2f$particles$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-particles.js/esm/VincentGarreau/particles.js [client] (ecmascript)");
;
;
const initPjs = (engine)=>{
    const { particlesJS, pJSDom } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$particles$2e$js$2f$esm$2f$VincentGarreau$2f$particles$2e$js__$5b$client$5d$__$28$ecmascript$29$__["initParticlesJS"])(engine);
    window.particlesJS = particlesJS;
    window.pJSDom = pJSDom;
    window.Particles = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$particles$2e$js$2f$esm$2f$marcbruederlin$2f$Particles$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Particles"];
    return {
        particlesJS,
        pJSDom,
        Particles: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$particles$2e$js$2f$esm$2f$marcbruederlin$2f$Particles$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Particles"]
    };
};
;
}}),
"[project]/node_modules/tsparticles-move-base/esm/Utils.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "applyDistance": (()=>applyDistance),
    "applyPath": (()=>applyPath),
    "getProximitySpeedFactor": (()=>getProximitySpeedFactor),
    "move": (()=>move),
    "spin": (()=>spin)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/NumberUtils.js [client] (ecmascript)");
;
function applyDistance(particle) {
    const initialPosition = particle.initialPosition, { dx, dy } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getDistances"])(initialPosition, particle.position), dxFixed = Math.abs(dx), dyFixed = Math.abs(dy), { maxDistance } = particle.retina, hDistance = maxDistance.horizontal, vDistance = maxDistance.vertical;
    if (!hDistance && !vDistance) {
        return;
    }
    if ((hDistance && dxFixed >= hDistance || vDistance && dyFixed >= vDistance) && !particle.misplaced) {
        particle.misplaced = !!hDistance && dxFixed > hDistance || !!vDistance && dyFixed > vDistance;
        if (hDistance) {
            particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;
        }
        if (vDistance) {
            particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;
        }
    } else if ((!hDistance || dxFixed < hDistance) && (!vDistance || dyFixed < vDistance) && particle.misplaced) {
        particle.misplaced = false;
    } else if (particle.misplaced) {
        const pos = particle.position, vel = particle.velocity;
        if (hDistance && (pos.x < initialPosition.x && vel.x < 0 || pos.x > initialPosition.x && vel.x > 0)) {
            vel.x *= -(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getRandom"])();
        }
        if (vDistance && (pos.y < initialPosition.y && vel.y < 0 || pos.y > initialPosition.y && vel.y > 0)) {
            vel.y *= -(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getRandom"])();
        }
    }
}
function move(particle, moveOptions, moveSpeed, maxSpeed, moveDrift, delta) {
    applyPath(particle, delta);
    const gravityOptions = particle.gravity, gravityFactor = gravityOptions?.enable && gravityOptions.inverse ? -1 : 1;
    if (moveDrift && moveSpeed) {
        particle.velocity.x += moveDrift * delta.factor / (60 * moveSpeed);
    }
    if (gravityOptions?.enable && moveSpeed) {
        particle.velocity.y += gravityFactor * (gravityOptions.acceleration * delta.factor) / (60 * moveSpeed);
    }
    const decay = particle.moveDecay;
    particle.velocity.multTo(decay);
    const velocity = particle.velocity.mult(moveSpeed);
    if (gravityOptions?.enable && maxSpeed > 0 && (!gravityOptions.inverse && velocity.y >= 0 && velocity.y >= maxSpeed || gravityOptions.inverse && velocity.y <= 0 && velocity.y <= -maxSpeed)) {
        velocity.y = gravityFactor * maxSpeed;
        if (moveSpeed) {
            particle.velocity.y = velocity.y / moveSpeed;
        }
    }
    const zIndexOptions = particle.options.zIndex, zVelocityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.velocityRate;
    velocity.multTo(zVelocityFactor);
    const { position } = particle;
    position.addTo(velocity);
    if (moveOptions.vibrate) {
        position.x += Math.sin(position.x * Math.cos(position.y));
        position.y += Math.cos(position.y * Math.sin(position.x));
    }
}
function spin(particle, moveSpeed) {
    const container = particle.container;
    if (!particle.spin) {
        return;
    }
    const updateFunc = {
        x: particle.spin.direction === "clockwise" ? Math.cos : Math.sin,
        y: particle.spin.direction === "clockwise" ? Math.sin : Math.cos
    };
    particle.position.x = particle.spin.center.x + particle.spin.radius * updateFunc.x(particle.spin.angle);
    particle.position.y = particle.spin.center.y + particle.spin.radius * updateFunc.y(particle.spin.angle);
    particle.spin.radius += particle.spin.acceleration;
    const maxCanvasSize = Math.max(container.canvas.size.width, container.canvas.size.height);
    if (particle.spin.radius > maxCanvasSize / 2) {
        particle.spin.radius = maxCanvasSize / 2;
        particle.spin.acceleration *= -1;
    } else if (particle.spin.radius < 0) {
        particle.spin.radius = 0;
        particle.spin.acceleration *= -1;
    }
    particle.spin.angle += moveSpeed / 100 * (1 - particle.spin.radius / maxCanvasSize);
}
function applyPath(particle, delta) {
    const particlesOptions = particle.options, pathOptions = particlesOptions.move.path, pathEnabled = pathOptions.enable;
    if (!pathEnabled) {
        return;
    }
    if (particle.lastPathTime <= particle.pathDelay) {
        particle.lastPathTime += delta.value;
        return;
    }
    const path = particle.pathGenerator?.generate(particle, delta);
    if (path) {
        particle.velocity.addTo(path);
    }
    if (pathOptions.clamp) {
        particle.velocity.x = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["clamp"])(particle.velocity.x, -1, 1);
        particle.velocity.y = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["clamp"])(particle.velocity.y, -1, 1);
    }
    particle.lastPathTime -= particle.pathDelay;
}
function getProximitySpeedFactor(particle) {
    return particle.slow.inRange ? particle.slow.factor : 1;
}
}}),
"[project]/node_modules/tsparticles-move-base/esm/BaseMover.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "BaseMover": (()=>BaseMover)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/NumberUtils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$move$2d$base$2f$esm$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-move-base/esm/Utils.js [client] (ecmascript)");
;
;
const diffFactor = 2;
class BaseMover {
    constructor(){
        this._initSpin = (particle)=>{
            const container = particle.container, options = particle.options, spinOptions = options.move.spin;
            if (!spinOptions.enable) {
                return;
            }
            const spinPos = spinOptions.position ?? {
                x: 50,
                y: 50
            }, spinCenter = {
                x: spinPos.x / 100 * container.canvas.size.width,
                y: spinPos.y / 100 * container.canvas.size.height
            }, pos = particle.getPosition(), distance = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getDistance"])(pos, spinCenter), spinAcceleration = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getRangeValue"])(spinOptions.acceleration);
            particle.retina.spinAcceleration = spinAcceleration * container.retina.pixelRatio;
            particle.spin = {
                center: spinCenter,
                direction: particle.velocity.x >= 0 ? "clockwise" : "counter-clockwise",
                angle: particle.velocity.angle,
                radius: distance,
                acceleration: particle.retina.spinAcceleration
            };
        };
    }
    init(particle) {
        const options = particle.options, gravityOptions = options.move.gravity;
        particle.gravity = {
            enable: gravityOptions.enable,
            acceleration: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getRangeValue"])(gravityOptions.acceleration),
            inverse: gravityOptions.inverse
        };
        this._initSpin(particle);
    }
    isEnabled(particle) {
        return !particle.destroyed && particle.options.move.enable;
    }
    move(particle, delta) {
        const particleOptions = particle.options, moveOptions = particleOptions.move;
        if (!moveOptions.enable) {
            return;
        }
        const container = particle.container, pxRatio = container.retina.pixelRatio, slowFactor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$move$2d$base$2f$esm$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getProximitySpeedFactor"])(particle), baseSpeed = (particle.retina.moveSpeed ??= (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getRangeValue"])(moveOptions.speed) * pxRatio) * container.retina.reduceFactor, moveDrift = particle.retina.moveDrift ??= (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getRangeValue"])(particle.options.move.drift) * pxRatio, maxSize = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getRangeMax"])(particleOptions.size.value) * pxRatio, sizeFactor = moveOptions.size ? particle.getRadius() / maxSize : 1, moveSpeed = baseSpeed * sizeFactor * slowFactor * (delta.factor || 1) / diffFactor, maxSpeed = particle.retina.maxSpeed ?? container.retina.maxSpeed;
        if (moveOptions.spin.enable) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$move$2d$base$2f$esm$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["spin"])(particle, moveSpeed);
        } else {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$move$2d$base$2f$esm$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["move"])(particle, moveOptions, moveSpeed, maxSpeed, moveDrift, delta);
        }
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$move$2d$base$2f$esm$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["applyDistance"])(particle);
    }
}
}}),
"[project]/node_modules/tsparticles-move-base/esm/index.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "loadBaseMover": (()=>loadBaseMover)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$move$2d$base$2f$esm$2f$BaseMover$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-move-base/esm/BaseMover.js [client] (ecmascript)");
;
async function loadBaseMover(engine, refresh = true) {
    await engine.addMover("base", ()=>new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$move$2d$base$2f$esm$2f$BaseMover$2e$js__$5b$client$5d$__$28$ecmascript$29$__["BaseMover"](), refresh);
}
}}),
"[project]/node_modules/tsparticles-shape-circle/esm/CircleDrawer.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "CircleDrawer": (()=>CircleDrawer)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/Utils.js [client] (ecmascript)");
;
class CircleDrawer {
    draw(context, particle, radius) {
        if (!particle.circleRange) {
            particle.circleRange = {
                min: 0,
                max: Math.PI * 2
            };
        }
        const circleRange = particle.circleRange;
        context.arc(0, 0, radius, circleRange.min, circleRange.max, false);
    }
    getSidesCount() {
        return 12;
    }
    particleInit(container, particle) {
        const shapeData = particle.shapeData, angle = shapeData?.angle ?? {
            max: 360,
            min: 0
        };
        particle.circleRange = !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["isObject"])(angle) ? {
            min: 0,
            max: angle * Math.PI / 180
        } : {
            min: angle.min * Math.PI / 180,
            max: angle.max * Math.PI / 180
        };
    }
}
}}),
"[project]/node_modules/tsparticles-shape-circle/esm/index.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "loadCircleShape": (()=>loadCircleShape)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$circle$2f$esm$2f$CircleDrawer$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-shape-circle/esm/CircleDrawer.js [client] (ecmascript)");
;
async function loadCircleShape(engine, refresh = true) {
    await engine.addShape("circle", new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$circle$2f$esm$2f$CircleDrawer$2e$js__$5b$client$5d$__$28$ecmascript$29$__["CircleDrawer"](), refresh);
}
}}),
"[project]/node_modules/tsparticles-updater-color/esm/Utils.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "updateColor": (()=>updateColor)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/NumberUtils.js [client] (ecmascript)");
;
function updateColorValue(delta, colorValue, valueAnimation, max, decrease) {
    if (!colorValue || !valueAnimation.enable || (colorValue.maxLoops ?? 0) > 0 && (colorValue.loops ?? 0) > (colorValue.maxLoops ?? 0)) {
        return;
    }
    if (!colorValue.time) {
        colorValue.time = 0;
    }
    if ((colorValue.delayTime ?? 0) > 0 && colorValue.time < (colorValue.delayTime ?? 0)) {
        colorValue.time += delta.value;
    }
    if ((colorValue.delayTime ?? 0) > 0 && colorValue.time < (colorValue.delayTime ?? 0)) {
        return;
    }
    const offset = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["randomInRange"])(valueAnimation.offset), velocity = (colorValue.velocity ?? 0) * delta.factor + offset * 3.6, decay = colorValue.decay ?? 1;
    if (!decrease || colorValue.status === "increasing") {
        colorValue.value += velocity;
        if (colorValue.value > max) {
            if (!colorValue.loops) {
                colorValue.loops = 0;
            }
            colorValue.loops++;
            if (decrease) {
                colorValue.status = "decreasing";
                colorValue.value -= colorValue.value % max;
            }
        }
    } else {
        colorValue.value -= velocity;
        if (colorValue.value < 0) {
            if (!colorValue.loops) {
                colorValue.loops = 0;
            }
            colorValue.loops++;
            colorValue.status = "increasing";
            colorValue.value += colorValue.value;
        }
    }
    if (colorValue.velocity && decay !== 1) {
        colorValue.velocity *= decay;
    }
    if (colorValue.value > max) {
        colorValue.value %= max;
    }
}
function updateColor(particle, delta) {
    const { h: hAnimation, s: sAnimation, l: lAnimation } = particle.options.color.animation, { color } = particle;
    if (!color) {
        return;
    }
    const { h, s, l } = color;
    if (h) {
        updateColorValue(delta, h, hAnimation, 360, false);
    }
    if (s) {
        updateColorValue(delta, s, sAnimation, 100, true);
    }
    if (l) {
        updateColorValue(delta, l, lAnimation, 100, true);
    }
}
}}),
"[project]/node_modules/tsparticles-updater-color/esm/ColorUpdater.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "ColorUpdater": (()=>ColorUpdater)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$ColorUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/ColorUtils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$color$2f$esm$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-updater-color/esm/Utils.js [client] (ecmascript)");
;
;
class ColorUpdater {
    constructor(container){
        this.container = container;
    }
    init(particle) {
        const hslColor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$ColorUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["rangeColorToHsl"])(particle.options.color, particle.id, particle.options.reduceDuplicates);
        if (hslColor) {
            particle.color = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$ColorUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getHslAnimationFromHsl"])(hslColor, particle.options.color.animation, this.container.retina.reduceFactor);
        }
    }
    isEnabled(particle) {
        const { h: hAnimation, s: sAnimation, l: lAnimation } = particle.options.color.animation, { color } = particle;
        return !particle.destroyed && !particle.spawning && (color?.h.value !== undefined && hAnimation.enable || color?.s.value !== undefined && sAnimation.enable || color?.l.value !== undefined && lAnimation.enable);
    }
    update(particle, delta) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$color$2f$esm$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["updateColor"])(particle, delta);
    }
}
}}),
"[project]/node_modules/tsparticles-updater-color/esm/index.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "loadColorUpdater": (()=>loadColorUpdater)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$color$2f$esm$2f$ColorUpdater$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-updater-color/esm/ColorUpdater.js [client] (ecmascript)");
;
async function loadColorUpdater(engine, refresh = true) {
    await engine.addParticleUpdater("color", (container)=>new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$color$2f$esm$2f$ColorUpdater$2e$js__$5b$client$5d$__$28$ecmascript$29$__["ColorUpdater"](container), refresh);
}
}}),
"[project]/node_modules/tsparticles-updater-opacity/esm/Utils.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "updateOpacity": (()=>updateOpacity)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/NumberUtils.js [client] (ecmascript)");
;
function checkDestroy(particle, value, minValue, maxValue) {
    switch(particle.options.opacity.animation.destroy){
        case "max":
            if (value >= maxValue) {
                particle.destroy();
            }
            break;
        case "min":
            if (value <= minValue) {
                particle.destroy();
            }
            break;
    }
}
function updateOpacity(particle, delta) {
    const data = particle.opacity;
    if (particle.destroyed || !data?.enable || (data.maxLoops ?? 0) > 0 && (data.loops ?? 0) > (data.maxLoops ?? 0)) {
        return;
    }
    const minValue = data.min, maxValue = data.max, decay = data.decay ?? 1;
    if (!data.time) {
        data.time = 0;
    }
    if ((data.delayTime ?? 0) > 0 && data.time < (data.delayTime ?? 0)) {
        data.time += delta.value;
    }
    if ((data.delayTime ?? 0) > 0 && data.time < (data.delayTime ?? 0)) {
        return;
    }
    switch(data.status){
        case "increasing":
            if (data.value >= maxValue) {
                data.status = "decreasing";
                if (!data.loops) {
                    data.loops = 0;
                }
                data.loops++;
            } else {
                data.value += (data.velocity ?? 0) * delta.factor;
            }
            break;
        case "decreasing":
            if (data.value <= minValue) {
                data.status = "increasing";
                if (!data.loops) {
                    data.loops = 0;
                }
                data.loops++;
            } else {
                data.value -= (data.velocity ?? 0) * delta.factor;
            }
            break;
    }
    if (data.velocity && data.decay !== 1) {
        data.velocity *= decay;
    }
    checkDestroy(particle, data.value, minValue, maxValue);
    if (!particle.destroyed) {
        data.value = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["clamp"])(data.value, minValue, maxValue);
    }
}
}}),
"[project]/node_modules/tsparticles-updater-opacity/esm/OpacityUpdater.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "OpacityUpdater": (()=>OpacityUpdater)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/NumberUtils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/Utils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$opacity$2f$esm$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-updater-opacity/esm/Utils.js [client] (ecmascript)");
;
;
class OpacityUpdater {
    constructor(container){
        this.container = container;
    }
    init(particle) {
        const opacityOptions = particle.options.opacity;
        particle.opacity = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["initParticleNumericAnimationValue"])(opacityOptions, 1);
        const opacityAnimation = opacityOptions.animation;
        if (opacityAnimation.enable) {
            particle.opacity.velocity = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getRangeValue"])(opacityAnimation.speed) / 100 * this.container.retina.reduceFactor;
            if (!opacityAnimation.sync) {
                particle.opacity.velocity *= (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getRandom"])();
            }
        }
    }
    isEnabled(particle) {
        return !particle.destroyed && !particle.spawning && !!particle.opacity && particle.opacity.enable && ((particle.opacity.maxLoops ?? 0) <= 0 || (particle.opacity.maxLoops ?? 0) > 0 && (particle.opacity.loops ?? 0) < (particle.opacity.maxLoops ?? 0));
    }
    reset(particle) {
        if (particle.opacity) {
            particle.opacity.time = 0;
            particle.opacity.loops = 0;
        }
    }
    update(particle, delta) {
        if (!this.isEnabled(particle)) {
            return;
        }
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$opacity$2f$esm$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["updateOpacity"])(particle, delta);
    }
}
}}),
"[project]/node_modules/tsparticles-updater-opacity/esm/index.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "loadOpacityUpdater": (()=>loadOpacityUpdater)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$opacity$2f$esm$2f$OpacityUpdater$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-updater-opacity/esm/OpacityUpdater.js [client] (ecmascript)");
;
async function loadOpacityUpdater(engine, refresh = true) {
    await engine.addParticleUpdater("opacity", (container)=>new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$opacity$2f$esm$2f$OpacityUpdater$2e$js__$5b$client$5d$__$28$ecmascript$29$__["OpacityUpdater"](container), refresh);
}
}}),
"[project]/node_modules/tsparticles-updater-out-modes/esm/Utils.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "bounceHorizontal": (()=>bounceHorizontal),
    "bounceVertical": (()=>bounceVertical)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/NumberUtils.js [client] (ecmascript)");
;
function bounceHorizontal(data) {
    if (data.outMode !== "bounce" && data.outMode !== "bounce-horizontal" && data.outMode !== "bounceHorizontal" && data.outMode !== "split" || data.direction !== "left" && data.direction !== "right") {
        return;
    }
    if (data.bounds.right < 0 && data.direction === "left") {
        data.particle.position.x = data.size + data.offset.x;
    } else if (data.bounds.left > data.canvasSize.width && data.direction === "right") {
        data.particle.position.x = data.canvasSize.width - data.size - data.offset.x;
    }
    const velocity = data.particle.velocity.x;
    let bounced = false;
    if (data.direction === "right" && data.bounds.right >= data.canvasSize.width && velocity > 0 || data.direction === "left" && data.bounds.left <= 0 && velocity < 0) {
        const newVelocity = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getValue"])(data.particle.options.bounce.horizontal);
        data.particle.velocity.x *= -newVelocity;
        bounced = true;
    }
    if (!bounced) {
        return;
    }
    const minPos = data.offset.x + data.size;
    if (data.bounds.right >= data.canvasSize.width && data.direction === "right") {
        data.particle.position.x = data.canvasSize.width - minPos;
    } else if (data.bounds.left <= 0 && data.direction === "left") {
        data.particle.position.x = minPos;
    }
    if (data.outMode === "split") {
        data.particle.destroy();
    }
}
function bounceVertical(data) {
    if (data.outMode !== "bounce" && data.outMode !== "bounce-vertical" && data.outMode !== "bounceVertical" && data.outMode !== "split" || data.direction !== "bottom" && data.direction !== "top") {
        return;
    }
    if (data.bounds.bottom < 0 && data.direction === "top") {
        data.particle.position.y = data.size + data.offset.y;
    } else if (data.bounds.top > data.canvasSize.height && data.direction === "bottom") {
        data.particle.position.y = data.canvasSize.height - data.size - data.offset.y;
    }
    const velocity = data.particle.velocity.y;
    let bounced = false;
    if (data.direction === "bottom" && data.bounds.bottom >= data.canvasSize.height && velocity > 0 || data.direction === "top" && data.bounds.top <= 0 && velocity < 0) {
        const newVelocity = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getValue"])(data.particle.options.bounce.vertical);
        data.particle.velocity.y *= -newVelocity;
        bounced = true;
    }
    if (!bounced) {
        return;
    }
    const minPos = data.offset.y + data.size;
    if (data.bounds.bottom >= data.canvasSize.height && data.direction === "bottom") {
        data.particle.position.y = data.canvasSize.height - minPos;
    } else if (data.bounds.top <= 0 && data.direction === "top") {
        data.particle.position.y = minPos;
    }
    if (data.outMode === "split") {
        data.particle.destroy();
    }
}
}}),
"[project]/node_modules/tsparticles-updater-out-modes/esm/BounceOutMode.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "BounceOutMode": (()=>BounceOutMode)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/Utils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$out$2d$modes$2f$esm$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-updater-out-modes/esm/Utils.js [client] (ecmascript)");
;
;
class BounceOutMode {
    constructor(container){
        this.container = container;
        this.modes = [
            "bounce",
            "bounce-vertical",
            "bounce-horizontal",
            "bounceVertical",
            "bounceHorizontal",
            "split"
        ];
    }
    update(particle, direction, delta, outMode) {
        if (!this.modes.includes(outMode)) {
            return;
        }
        const container = this.container;
        let handled = false;
        for (const [, plugin] of container.plugins){
            if (plugin.particleBounce !== undefined) {
                handled = plugin.particleBounce(particle, delta, direction);
            }
            if (handled) {
                break;
            }
        }
        if (handled) {
            return;
        }
        const pos = particle.getPosition(), offset = particle.offset, size = particle.getRadius(), bounds = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["calculateBounds"])(pos, size), canvasSize = container.canvas.size;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$out$2d$modes$2f$esm$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["bounceHorizontal"])({
            particle,
            outMode,
            direction,
            bounds,
            canvasSize,
            offset,
            size
        });
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$out$2d$modes$2f$esm$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["bounceVertical"])({
            particle,
            outMode,
            direction,
            bounds,
            canvasSize,
            offset,
            size
        });
    }
}
}}),
"[project]/node_modules/tsparticles-updater-out-modes/esm/DestroyOutMode.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "DestroyOutMode": (()=>DestroyOutMode)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Vector$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Core/Utils/Vector.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/NumberUtils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/Utils.js [client] (ecmascript)");
;
class DestroyOutMode {
    constructor(container){
        this.container = container;
        this.modes = [
            "destroy"
        ];
    }
    update(particle, direction, _delta, outMode) {
        if (!this.modes.includes(outMode)) {
            return;
        }
        const container = this.container;
        switch(particle.outType){
            case "normal":
            case "outside":
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["isPointInside"])(particle.position, container.canvas.size, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Vector$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Vector"].origin, particle.getRadius(), direction)) {
                    return;
                }
                break;
            case "inside":
                {
                    const { dx, dy } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getDistances"])(particle.position, particle.moveCenter);
                    const { x: vx, y: vy } = particle.velocity;
                    if (vx < 0 && dx > particle.moveCenter.radius || vy < 0 && dy > particle.moveCenter.radius || vx >= 0 && dx < -particle.moveCenter.radius || vy >= 0 && dy < -particle.moveCenter.radius) {
                        return;
                    }
                    break;
                }
        }
        container.particles.remove(particle, undefined, true);
    }
}
}}),
"[project]/node_modules/tsparticles-updater-out-modes/esm/NoneOutMode.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "NoneOutMode": (()=>NoneOutMode)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Vector$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Core/Utils/Vector.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/Utils.js [client] (ecmascript)");
;
class NoneOutMode {
    constructor(container){
        this.container = container;
        this.modes = [
            "none"
        ];
    }
    update(particle, direction, delta, outMode) {
        if (!this.modes.includes(outMode)) {
            return;
        }
        if (particle.options.move.distance.horizontal && (direction === "left" || direction === "right") || particle.options.move.distance.vertical && (direction === "top" || direction === "bottom")) {
            return;
        }
        const gravityOptions = particle.options.move.gravity, container = this.container;
        const canvasSize = container.canvas.size;
        const pRadius = particle.getRadius();
        if (!gravityOptions.enable) {
            if (particle.velocity.y > 0 && particle.position.y <= canvasSize.height + pRadius || particle.velocity.y < 0 && particle.position.y >= -pRadius || particle.velocity.x > 0 && particle.position.x <= canvasSize.width + pRadius || particle.velocity.x < 0 && particle.position.x >= -pRadius) {
                return;
            }
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["isPointInside"])(particle.position, container.canvas.size, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Vector$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Vector"].origin, pRadius, direction)) {
                container.particles.remove(particle);
            }
        } else {
            const position = particle.position;
            if (!gravityOptions.inverse && position.y > canvasSize.height + pRadius && direction === "bottom" || gravityOptions.inverse && position.y < -pRadius && direction === "top") {
                container.particles.remove(particle);
            }
        }
    }
}
}}),
"[project]/node_modules/tsparticles-updater-out-modes/esm/OutOutMode.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "OutOutMode": (()=>OutOutMode)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Vector$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Core/Utils/Vector.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/Utils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/NumberUtils.js [client] (ecmascript)");
;
class OutOutMode {
    constructor(container){
        this.container = container;
        this.modes = [
            "out"
        ];
    }
    update(particle, direction, delta, outMode) {
        if (!this.modes.includes(outMode)) {
            return;
        }
        const container = this.container;
        switch(particle.outType){
            case "inside":
                {
                    const { x: vx, y: vy } = particle.velocity;
                    const circVec = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Vector$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Vector"].origin;
                    circVec.length = particle.moveCenter.radius;
                    circVec.angle = particle.velocity.angle + Math.PI;
                    circVec.addTo(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Vector$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Vector"].create(particle.moveCenter));
                    const { dx, dy } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getDistances"])(particle.position, circVec);
                    if (vx <= 0 && dx >= 0 || vy <= 0 && dy >= 0 || vx >= 0 && dx <= 0 || vy >= 0 && dy <= 0) {
                        return;
                    }
                    particle.position.x = Math.floor((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["randomInRange"])({
                        min: 0,
                        max: container.canvas.size.width
                    }));
                    particle.position.y = Math.floor((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["randomInRange"])({
                        min: 0,
                        max: container.canvas.size.height
                    }));
                    const { dx: newDx, dy: newDy } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getDistances"])(particle.position, particle.moveCenter);
                    particle.direction = Math.atan2(-newDy, -newDx);
                    particle.velocity.angle = particle.direction;
                    break;
                }
            default:
                {
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["isPointInside"])(particle.position, container.canvas.size, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Vector$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Vector"].origin, particle.getRadius(), direction)) {
                        return;
                    }
                    switch(particle.outType){
                        case "outside":
                            {
                                particle.position.x = Math.floor((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["randomInRange"])({
                                    min: -particle.moveCenter.radius,
                                    max: particle.moveCenter.radius
                                })) + particle.moveCenter.x;
                                particle.position.y = Math.floor((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["randomInRange"])({
                                    min: -particle.moveCenter.radius,
                                    max: particle.moveCenter.radius
                                })) + particle.moveCenter.y;
                                const { dx, dy } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getDistances"])(particle.position, particle.moveCenter);
                                if (particle.moveCenter.radius) {
                                    particle.direction = Math.atan2(dy, dx);
                                    particle.velocity.angle = particle.direction;
                                }
                                break;
                            }
                        case "normal":
                            {
                                const wrap = particle.options.move.warp, canvasSize = container.canvas.size, newPos = {
                                    bottom: canvasSize.height + particle.getRadius() + particle.offset.y,
                                    left: -particle.getRadius() - particle.offset.x,
                                    right: canvasSize.width + particle.getRadius() + particle.offset.x,
                                    top: -particle.getRadius() - particle.offset.y
                                }, sizeValue = particle.getRadius(), nextBounds = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["calculateBounds"])(particle.position, sizeValue);
                                if (direction === "right" && nextBounds.left > canvasSize.width + particle.offset.x) {
                                    particle.position.x = newPos.left;
                                    particle.initialPosition.x = particle.position.x;
                                    if (!wrap) {
                                        particle.position.y = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getRandom"])() * canvasSize.height;
                                        particle.initialPosition.y = particle.position.y;
                                    }
                                } else if (direction === "left" && nextBounds.right < -particle.offset.x) {
                                    particle.position.x = newPos.right;
                                    particle.initialPosition.x = particle.position.x;
                                    if (!wrap) {
                                        particle.position.y = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getRandom"])() * canvasSize.height;
                                        particle.initialPosition.y = particle.position.y;
                                    }
                                }
                                if (direction === "bottom" && nextBounds.top > canvasSize.height + particle.offset.y) {
                                    if (!wrap) {
                                        particle.position.x = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getRandom"])() * canvasSize.width;
                                        particle.initialPosition.x = particle.position.x;
                                    }
                                    particle.position.y = newPos.top;
                                    particle.initialPosition.y = particle.position.y;
                                } else if (direction === "top" && nextBounds.bottom < -particle.offset.y) {
                                    if (!wrap) {
                                        particle.position.x = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getRandom"])() * canvasSize.width;
                                        particle.initialPosition.x = particle.position.x;
                                    }
                                    particle.position.y = newPos.bottom;
                                    particle.initialPosition.y = particle.position.y;
                                }
                                break;
                            }
                    }
                    break;
                }
        }
    }
}
}}),
"[project]/node_modules/tsparticles-updater-out-modes/esm/OutOfCanvasUpdater.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "OutOfCanvasUpdater": (()=>OutOfCanvasUpdater)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$out$2d$modes$2f$esm$2f$BounceOutMode$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-updater-out-modes/esm/BounceOutMode.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$out$2d$modes$2f$esm$2f$DestroyOutMode$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-updater-out-modes/esm/DestroyOutMode.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$out$2d$modes$2f$esm$2f$NoneOutMode$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-updater-out-modes/esm/NoneOutMode.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$out$2d$modes$2f$esm$2f$OutOutMode$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-updater-out-modes/esm/OutOutMode.js [client] (ecmascript)");
;
;
;
;
class OutOfCanvasUpdater {
    constructor(container){
        this.container = container;
        this._updateOutMode = (particle, delta, outMode, direction)=>{
            for (const updater of this.updaters){
                updater.update(particle, direction, delta, outMode);
            }
        };
        this.updaters = [
            new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$out$2d$modes$2f$esm$2f$BounceOutMode$2e$js__$5b$client$5d$__$28$ecmascript$29$__["BounceOutMode"](container),
            new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$out$2d$modes$2f$esm$2f$DestroyOutMode$2e$js__$5b$client$5d$__$28$ecmascript$29$__["DestroyOutMode"](container),
            new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$out$2d$modes$2f$esm$2f$OutOutMode$2e$js__$5b$client$5d$__$28$ecmascript$29$__["OutOutMode"](container),
            new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$out$2d$modes$2f$esm$2f$NoneOutMode$2e$js__$5b$client$5d$__$28$ecmascript$29$__["NoneOutMode"](container)
        ];
    }
    init() {}
    isEnabled(particle) {
        return !particle.destroyed && !particle.spawning;
    }
    update(particle, delta) {
        const outModes = particle.options.move.outModes;
        this._updateOutMode(particle, delta, outModes.bottom ?? outModes.default, "bottom");
        this._updateOutMode(particle, delta, outModes.left ?? outModes.default, "left");
        this._updateOutMode(particle, delta, outModes.right ?? outModes.default, "right");
        this._updateOutMode(particle, delta, outModes.top ?? outModes.default, "top");
    }
}
}}),
"[project]/node_modules/tsparticles-updater-out-modes/esm/index.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "loadOutModesUpdater": (()=>loadOutModesUpdater)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$out$2d$modes$2f$esm$2f$OutOfCanvasUpdater$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-updater-out-modes/esm/OutOfCanvasUpdater.js [client] (ecmascript)");
;
async function loadOutModesUpdater(engine, refresh = true) {
    await engine.addParticleUpdater("outModes", (container)=>new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$out$2d$modes$2f$esm$2f$OutOfCanvasUpdater$2e$js__$5b$client$5d$__$28$ecmascript$29$__["OutOfCanvasUpdater"](container), refresh);
}
}}),
"[project]/node_modules/tsparticles-updater-size/esm/Utils.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "updateSize": (()=>updateSize)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/NumberUtils.js [client] (ecmascript)");
;
function checkDestroy(particle, value, minValue, maxValue) {
    switch(particle.options.size.animation.destroy){
        case "max":
            if (value >= maxValue) {
                particle.destroy();
            }
            break;
        case "min":
            if (value <= minValue) {
                particle.destroy();
            }
            break;
    }
}
function updateSize(particle, delta) {
    const data = particle.size;
    if (particle.destroyed || !data || !data.enable || (data.maxLoops ?? 0) > 0 && (data.loops ?? 0) > (data.maxLoops ?? 0)) {
        return;
    }
    const sizeVelocity = (data.velocity ?? 0) * delta.factor, minValue = data.min, maxValue = data.max, decay = data.decay ?? 1;
    if (!data.time) {
        data.time = 0;
    }
    if ((data.delayTime ?? 0) > 0 && data.time < (data.delayTime ?? 0)) {
        data.time += delta.value;
    }
    if ((data.delayTime ?? 0) > 0 && data.time < (data.delayTime ?? 0)) {
        return;
    }
    switch(data.status){
        case "increasing":
            if (data.value >= maxValue) {
                data.status = "decreasing";
                if (!data.loops) {
                    data.loops = 0;
                }
                data.loops++;
            } else {
                data.value += sizeVelocity;
            }
            break;
        case "decreasing":
            if (data.value <= minValue) {
                data.status = "increasing";
                if (!data.loops) {
                    data.loops = 0;
                }
                data.loops++;
            } else {
                data.value -= sizeVelocity;
            }
    }
    if (data.velocity && decay !== 1) {
        data.velocity *= decay;
    }
    checkDestroy(particle, data.value, minValue, maxValue);
    if (!particle.destroyed) {
        data.value = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["clamp"])(data.value, minValue, maxValue);
    }
}
}}),
"[project]/node_modules/tsparticles-updater-size/esm/SizeUpdater.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "SizeUpdater": (()=>SizeUpdater)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/NumberUtils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$size$2f$esm$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-updater-size/esm/Utils.js [client] (ecmascript)");
;
;
class SizeUpdater {
    init(particle) {
        const container = particle.container, sizeOptions = particle.options.size, sizeAnimation = sizeOptions.animation;
        if (sizeAnimation.enable) {
            particle.size.velocity = (particle.retina.sizeAnimationSpeed ?? container.retina.sizeAnimationSpeed) / 100 * container.retina.reduceFactor;
            if (!sizeAnimation.sync) {
                particle.size.velocity *= (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getRandom"])();
            }
        }
    }
    isEnabled(particle) {
        return !particle.destroyed && !particle.spawning && particle.size.enable && ((particle.size.maxLoops ?? 0) <= 0 || (particle.size.maxLoops ?? 0) > 0 && (particle.size.loops ?? 0) < (particle.size.maxLoops ?? 0));
    }
    reset(particle) {
        particle.size.loops = 0;
    }
    update(particle, delta) {
        if (!this.isEnabled(particle)) {
            return;
        }
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$size$2f$esm$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["updateSize"])(particle, delta);
    }
}
}}),
"[project]/node_modules/tsparticles-updater-size/esm/index.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "loadSizeUpdater": (()=>loadSizeUpdater)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$size$2f$esm$2f$SizeUpdater$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-updater-size/esm/SizeUpdater.js [client] (ecmascript)");
;
async function loadSizeUpdater(engine, refresh = true) {
    await engine.addParticleUpdater("size", ()=>new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$size$2f$esm$2f$SizeUpdater$2e$js__$5b$client$5d$__$28$ecmascript$29$__["SizeUpdater"](), refresh);
}
}}),
"[project]/node_modules/tsparticles-basic/esm/index.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "loadBasic": (()=>loadBasic)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$move$2d$base$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-move-base/esm/index.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$circle$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-shape-circle/esm/index.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$color$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-updater-color/esm/index.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$opacity$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-updater-opacity/esm/index.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$out$2d$modes$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-updater-out-modes/esm/index.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$size$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-updater-size/esm/index.js [client] (ecmascript)");
;
;
;
;
;
;
async function loadBasic(engine, refresh = true) {
    await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$move$2d$base$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__["loadBaseMover"])(engine, false);
    await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$circle$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__["loadCircleShape"])(engine, false);
    await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$color$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__["loadColorUpdater"])(engine, false);
    await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$opacity$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__["loadOpacityUpdater"])(engine, false);
    await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$out$2d$modes$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__["loadOutModesUpdater"])(engine, false);
    await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$size$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__["loadSizeUpdater"])(engine, false);
    await engine.refresh(refresh);
}
}}),
"[project]/node_modules/tsparticles-plugin-easing-quad/esm/index.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "loadEasingQuadPlugin": (()=>loadEasingQuadPlugin)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/NumberUtils.js [client] (ecmascript)");
;
async function loadEasingQuadPlugin() {
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["addEasing"])("ease-in-quad", (value)=>value ** 2);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["addEasing"])("ease-out-quad", (value)=>1 - (1 - value) ** 2);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["addEasing"])("ease-in-out-quad", (value)=>value < 0.5 ? 2 * value ** 2 : 1 - (-2 * value + 2) ** 2 / 2);
}
}}),
"[project]/node_modules/tsparticles-interaction-external-attract/esm/Options/Classes/Attract.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Attract": (()=>Attract)
});
class Attract {
    constructor(){
        this.distance = 200;
        this.duration = 0.4;
        this.easing = "ease-out-quad";
        this.factor = 1;
        this.maxSpeed = 50;
        this.speed = 1;
    }
    load(data) {
        if (!data) {
            return;
        }
        if (data.distance !== undefined) {
            this.distance = data.distance;
        }
        if (data.duration !== undefined) {
            this.duration = data.duration;
        }
        if (data.easing !== undefined) {
            this.easing = data.easing;
        }
        if (data.factor !== undefined) {
            this.factor = data.factor;
        }
        if (data.maxSpeed !== undefined) {
            this.maxSpeed = data.maxSpeed;
        }
        if (data.speed !== undefined) {
            this.speed = data.speed;
        }
    }
}
}}),
"[project]/node_modules/tsparticles-interaction-external-attract/esm/Attractor.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Attractor": (()=>Attractor)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Circle$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Core/Utils/Circle.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$ExternalInteractorBase$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Core/Utils/ExternalInteractorBase.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Vector$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Core/Utils/Vector.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/NumberUtils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/Utils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Constants$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Core/Utils/Constants.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$attract$2f$esm$2f$Options$2f$Classes$2f$Attract$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-external-attract/esm/Options/Classes/Attract.js [client] (ecmascript)");
;
;
class Attractor extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$ExternalInteractorBase$2e$js__$5b$client$5d$__$28$ecmascript$29$__["ExternalInteractorBase"] {
    constructor(engine, container){
        super(container);
        this._clickAttract = ()=>{
            const container = this.container;
            if (!container.attract) {
                container.attract = {
                    particles: []
                };
            }
            const { attract } = container;
            if (!attract.finish) {
                if (!attract.count) {
                    attract.count = 0;
                }
                attract.count++;
                if (attract.count === container.particles.count) {
                    attract.finish = true;
                }
            }
            if (attract.clicking) {
                const mousePos = container.interactivity.mouse.clickPosition, attractRadius = container.retina.attractModeDistance;
                if (!attractRadius || attractRadius < 0 || !mousePos) {
                    return;
                }
                this._processAttract(mousePos, attractRadius, new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Circle$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Circle"](mousePos.x, mousePos.y, attractRadius));
            } else if (attract.clicking === false) {
                attract.particles = [];
            }
            return;
        };
        this._hoverAttract = ()=>{
            const container = this.container, mousePos = container.interactivity.mouse.position, attractRadius = container.retina.attractModeDistance;
            if (!attractRadius || attractRadius < 0 || !mousePos) {
                return;
            }
            this._processAttract(mousePos, attractRadius, new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Circle$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Circle"](mousePos.x, mousePos.y, attractRadius));
        };
        this._processAttract = (position, attractRadius, area)=>{
            const container = this.container, attractOptions = container.actualOptions.interactivity.modes.attract;
            if (!attractOptions) {
                return;
            }
            const query = container.particles.quadTree.query(area, (p)=>this.isEnabled(p));
            for (const particle of query){
                const { dx, dy, distance } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getDistances"])(particle.position, position);
                const velocity = attractOptions.speed * attractOptions.factor;
                const attractFactor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["clamp"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getEasing"])(attractOptions.easing)(1 - distance / attractRadius) * velocity, 0, attractOptions.maxSpeed);
                const normVec = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Vector$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Vector"].create(distance === 0 ? velocity : dx / distance * attractFactor, distance === 0 ? velocity : dy / distance * attractFactor);
                particle.position.subFrom(normVec);
            }
        };
        this._engine = engine;
        if (!container.attract) {
            container.attract = {
                particles: []
            };
        }
        this.handleClickMode = (mode)=>{
            const options = this.container.actualOptions, attract = options.interactivity.modes.attract;
            if (!attract || mode !== "attract") {
                return;
            }
            if (!container.attract) {
                container.attract = {
                    particles: []
                };
            }
            container.attract.clicking = true;
            container.attract.count = 0;
            for (const particle of container.attract.particles){
                if (!this.isEnabled(particle)) {
                    continue;
                }
                particle.velocity.setTo(particle.initialVelocity);
            }
            container.attract.particles = [];
            container.attract.finish = false;
            setTimeout(()=>{
                if (container.destroyed) {
                    return;
                }
                if (!container.attract) {
                    container.attract = {
                        particles: []
                    };
                }
                container.attract.clicking = false;
            }, attract.duration * 1000);
        };
    }
    clear() {}
    init() {
        const container = this.container, attract = container.actualOptions.interactivity.modes.attract;
        if (!attract) {
            return;
        }
        container.retina.attractModeDistance = attract.distance * container.retina.pixelRatio;
    }
    async interact() {
        const container = this.container, options = container.actualOptions, mouseMoveStatus = container.interactivity.status === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Constants$2e$js__$5b$client$5d$__$28$ecmascript$29$__["mouseMoveEvent"], events = options.interactivity.events, hoverEnabled = events.onHover.enable, hoverMode = events.onHover.mode, clickEnabled = events.onClick.enable, clickMode = events.onClick.mode;
        if (mouseMoveStatus && hoverEnabled && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["isInArray"])("attract", hoverMode)) {
            this._hoverAttract();
        } else if (clickEnabled && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["isInArray"])("attract", clickMode)) {
            this._clickAttract();
        }
    }
    isEnabled(particle) {
        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events;
        if ((!mouse.position || !events.onHover.enable) && (!mouse.clickPosition || !events.onClick.enable)) {
            return false;
        }
        const hoverMode = events.onHover.mode, clickMode = events.onClick.mode;
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["isInArray"])("attract", hoverMode) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["isInArray"])("attract", clickMode);
    }
    loadModeOptions(options, ...sources) {
        if (!options.attract) {
            options.attract = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$attract$2f$esm$2f$Options$2f$Classes$2f$Attract$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Attract"]();
        }
        for (const source of sources){
            options.attract.load(source?.attract);
        }
    }
    reset() {}
}
}}),
"[project]/node_modules/tsparticles-interaction-external-attract/esm/index.js [client] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "loadExternalAttractInteraction": (()=>loadExternalAttractInteraction)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$attract$2f$esm$2f$Attractor$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-external-attract/esm/Attractor.js [client] (ecmascript)");
;
async function loadExternalAttractInteraction(engine, refresh = true) {
    await engine.addInteractor("externalAttract", (container)=>new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$attract$2f$esm$2f$Attractor$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Attractor"](engine, container), refresh);
}
;
;
}}),
"[project]/node_modules/tsparticles-interaction-external-bounce/esm/Options/Classes/Bounce.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Bounce": (()=>Bounce)
});
class Bounce {
    constructor(){
        this.distance = 200;
    }
    load(data) {
        if (!data) {
            return;
        }
        if (data.distance !== undefined) {
            this.distance = data.distance;
        }
    }
}
}}),
"[project]/node_modules/tsparticles-interaction-external-bounce/esm/Bouncer.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Bouncer": (()=>Bouncer)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Circle$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Core/Utils/Circle.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$ExternalInteractorBase$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Core/Utils/ExternalInteractorBase.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Rectangle$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Core/Utils/Rectangle.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Vector$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Core/Utils/Vector.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/Utils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Constants$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Core/Utils/Constants.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$bounce$2f$esm$2f$Options$2f$Classes$2f$Bounce$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-external-bounce/esm/Options/Classes/Bounce.js [client] (ecmascript)");
;
;
class Bouncer extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$ExternalInteractorBase$2e$js__$5b$client$5d$__$28$ecmascript$29$__["ExternalInteractorBase"] {
    constructor(container){
        super(container);
        this._processBounce = (position, radius, area)=>{
            const query = this.container.particles.quadTree.query(area, (p)=>this.isEnabled(p));
            for (const particle of query){
                if (area instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Circle$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Circle"]) {
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["circleBounce"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["circleBounceDataFromParticle"])(particle), {
                        position,
                        radius,
                        mass: radius ** 2 * Math.PI / 2,
                        velocity: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Vector$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Vector"].origin,
                        factor: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Vector$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Vector"].origin
                    });
                } else if (area instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Rectangle$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Rectangle"]) {
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["rectBounce"])(particle, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["calculateBounds"])(position, radius));
                }
            }
        };
        this._processMouseBounce = ()=>{
            const container = this.container, pxRatio = container.retina.pixelRatio, tolerance = 10 * pxRatio, mousePos = container.interactivity.mouse.position, radius = container.retina.bounceModeDistance;
            if (!radius || radius < 0 || !mousePos) {
                return;
            }
            this._processBounce(mousePos, radius, new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Circle$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Circle"](mousePos.x, mousePos.y, radius + tolerance));
        };
        this._singleSelectorBounce = (selector, div)=>{
            const container = this.container, query = document.querySelectorAll(selector);
            if (!query.length) {
                return;
            }
            query.forEach((item)=>{
                const elem = item, pxRatio = container.retina.pixelRatio, pos = {
                    x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,
                    y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio
                }, radius = elem.offsetWidth / 2 * pxRatio, tolerance = 10 * pxRatio, area = div.type === "circle" ? new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Circle$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Circle"](pos.x, pos.y, radius + tolerance) : new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Rectangle$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Rectangle"](elem.offsetLeft * pxRatio - tolerance, elem.offsetTop * pxRatio - tolerance, elem.offsetWidth * pxRatio + tolerance * 2, elem.offsetHeight * pxRatio + tolerance * 2);
                this._processBounce(pos, radius, area);
            });
        };
    }
    clear() {}
    init() {
        const container = this.container, bounce = container.actualOptions.interactivity.modes.bounce;
        if (!bounce) {
            return;
        }
        container.retina.bounceModeDistance = bounce.distance * container.retina.pixelRatio;
    }
    async interact() {
        const container = this.container, options = container.actualOptions, events = options.interactivity.events, mouseMoveStatus = container.interactivity.status === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Constants$2e$js__$5b$client$5d$__$28$ecmascript$29$__["mouseMoveEvent"], hoverEnabled = events.onHover.enable, hoverMode = events.onHover.mode, divs = events.onDiv;
        if (mouseMoveStatus && hoverEnabled && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["isInArray"])("bounce", hoverMode)) {
            this._processMouseBounce();
        } else {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["divModeExecute"])("bounce", divs, (selector, div)=>this._singleSelectorBounce(selector, div));
        }
    }
    isEnabled(particle) {
        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events, divs = events.onDiv;
        return mouse.position && events.onHover.enable && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["isInArray"])("bounce", events.onHover.mode) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["isDivModeEnabled"])("bounce", divs);
    }
    loadModeOptions(options, ...sources) {
        if (!options.bounce) {
            options.bounce = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$bounce$2f$esm$2f$Options$2f$Classes$2f$Bounce$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Bounce"]();
        }
        for (const source of sources){
            options.bounce.load(source?.bounce);
        }
    }
    reset() {}
}
}}),
"[project]/node_modules/tsparticles-interaction-external-bounce/esm/index.js [client] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "loadExternalBounceInteraction": (()=>loadExternalBounceInteraction)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$bounce$2f$esm$2f$Bouncer$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-external-bounce/esm/Bouncer.js [client] (ecmascript)");
;
async function loadExternalBounceInteraction(engine, refresh = true) {
    await engine.addInteractor("externalBounce", (container)=>new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$bounce$2f$esm$2f$Bouncer$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Bouncer"](container), refresh);
}
;
;
}}),
"[project]/node_modules/tsparticles-interaction-external-bubble/esm/Options/Classes/BubbleBase.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "BubbleBase": (()=>BubbleBase)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Options$2f$Classes$2f$OptionsColor$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Options/Classes/OptionsColor.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/Utils.js [client] (ecmascript)");
;
class BubbleBase {
    constructor(){
        this.distance = 200;
        this.duration = 0.4;
        this.mix = false;
    }
    load(data) {
        if (!data) {
            return;
        }
        if (data.distance !== undefined) {
            this.distance = data.distance;
        }
        if (data.duration !== undefined) {
            this.duration = data.duration;
        }
        if (data.mix !== undefined) {
            this.mix = data.mix;
        }
        if (data.opacity !== undefined) {
            this.opacity = data.opacity;
        }
        if (data.color !== undefined) {
            const sourceColor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["isArray"])(this.color) ? undefined : this.color;
            this.color = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["executeOnSingleOrMultiple"])(data.color, (color)=>{
                return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Options$2f$Classes$2f$OptionsColor$2e$js__$5b$client$5d$__$28$ecmascript$29$__["OptionsColor"].create(sourceColor, color);
            });
        }
        if (data.size !== undefined) {
            this.size = data.size;
        }
    }
}
}}),
"[project]/node_modules/tsparticles-interaction-external-bubble/esm/Options/Classes/BubbleDiv.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "BubbleDiv": (()=>BubbleDiv)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/Utils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$bubble$2f$esm$2f$Options$2f$Classes$2f$BubbleBase$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-external-bubble/esm/Options/Classes/BubbleBase.js [client] (ecmascript)");
;
;
class BubbleDiv extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$bubble$2f$esm$2f$Options$2f$Classes$2f$BubbleBase$2e$js__$5b$client$5d$__$28$ecmascript$29$__["BubbleBase"] {
    constructor(){
        super();
        this.selectors = [];
    }
    get ids() {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["executeOnSingleOrMultiple"])(this.selectors, (t)=>t.replace("#", ""));
    }
    set ids(value) {
        this.selectors = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["executeOnSingleOrMultiple"])(value, (t)=>`#${t}`);
    }
    load(data) {
        super.load(data);
        if (!data) {
            return;
        }
        if (data.ids !== undefined) {
            this.ids = data.ids;
        }
        if (data.selectors !== undefined) {
            this.selectors = data.selectors;
        }
    }
}
}}),
"[project]/node_modules/tsparticles-interaction-external-bubble/esm/Options/Classes/Bubble.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Bubble": (()=>Bubble)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/Utils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$bubble$2f$esm$2f$Options$2f$Classes$2f$BubbleBase$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-external-bubble/esm/Options/Classes/BubbleBase.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$bubble$2f$esm$2f$Options$2f$Classes$2f$BubbleDiv$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-external-bubble/esm/Options/Classes/BubbleDiv.js [client] (ecmascript)");
;
;
;
class Bubble extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$bubble$2f$esm$2f$Options$2f$Classes$2f$BubbleBase$2e$js__$5b$client$5d$__$28$ecmascript$29$__["BubbleBase"] {
    load(data) {
        super.load(data);
        if (!data) {
            return;
        }
        this.divs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["executeOnSingleOrMultiple"])(data.divs, (div)=>{
            const tmp = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$bubble$2f$esm$2f$Options$2f$Classes$2f$BubbleDiv$2e$js__$5b$client$5d$__$28$ecmascript$29$__["BubbleDiv"]();
            tmp.load(div);
            return tmp;
        });
    }
}
}}),
"[project]/node_modules/tsparticles-interaction-external-bubble/esm/Utils.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "calculateBubbleValue": (()=>calculateBubbleValue)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/NumberUtils.js [client] (ecmascript)");
;
function calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {
    if (modeValue >= optionsValue) {
        const value = particleValue + (modeValue - optionsValue) * ratio;
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["clamp"])(value, particleValue, modeValue);
    } else if (modeValue < optionsValue) {
        const value = particleValue - (optionsValue - modeValue) * ratio;
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["clamp"])(value, modeValue, particleValue);
    }
}
}}),
"[project]/node_modules/tsparticles-interaction-external-bubble/esm/Bubbler.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Bubbler": (()=>Bubbler)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Circle$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Core/Utils/Circle.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$ExternalInteractorBase$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Core/Utils/ExternalInteractorBase.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Rectangle$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Core/Utils/Rectangle.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$ColorUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/ColorUtils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/Utils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/NumberUtils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Constants$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Core/Utils/Constants.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$bubble$2f$esm$2f$Options$2f$Classes$2f$Bubble$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-external-bubble/esm/Options/Classes/Bubble.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$bubble$2f$esm$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-external-bubble/esm/Utils.js [client] (ecmascript)");
;
;
;
class Bubbler extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$ExternalInteractorBase$2e$js__$5b$client$5d$__$28$ecmascript$29$__["ExternalInteractorBase"] {
    constructor(container){
        super(container);
        this._clickBubble = ()=>{
            const container = this.container, options = container.actualOptions, mouseClickPos = container.interactivity.mouse.clickPosition, bubbleOptions = options.interactivity.modes.bubble;
            if (!bubbleOptions || !mouseClickPos) {
                return;
            }
            if (!container.bubble) {
                container.bubble = {};
            }
            const distance = container.retina.bubbleModeDistance;
            if (!distance || distance < 0) {
                return;
            }
            const query = container.particles.quadTree.queryCircle(mouseClickPos, distance, (p)=>this.isEnabled(p)), { bubble } = container;
            for (const particle of query){
                if (!bubble.clicking) {
                    continue;
                }
                particle.bubble.inRange = !bubble.durationEnd;
                const pos = particle.getPosition(), distMouse = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getDistance"])(pos, mouseClickPos), timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime || 0)) / 1000;
                if (timeSpent > bubbleOptions.duration) {
                    bubble.durationEnd = true;
                }
                if (timeSpent > bubbleOptions.duration * 2) {
                    bubble.clicking = false;
                    bubble.durationEnd = false;
                }
                const sizeData = {
                    bubbleObj: {
                        optValue: container.retina.bubbleModeSize,
                        value: particle.bubble.radius
                    },
                    particlesObj: {
                        optValue: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getRangeMax"])(particle.options.size.value) * container.retina.pixelRatio,
                        value: particle.size.value
                    },
                    type: "size"
                };
                this._process(particle, distMouse, timeSpent, sizeData);
                const opacityData = {
                    bubbleObj: {
                        optValue: bubbleOptions.opacity,
                        value: particle.bubble.opacity
                    },
                    particlesObj: {
                        optValue: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getRangeMax"])(particle.options.opacity.value),
                        value: particle.opacity?.value ?? 1
                    },
                    type: "opacity"
                };
                this._process(particle, distMouse, timeSpent, opacityData);
                if (!bubble.durationEnd && distMouse <= distance) {
                    this._hoverBubbleColor(particle, distMouse);
                } else {
                    delete particle.bubble.color;
                }
            }
        };
        this._hoverBubble = ()=>{
            const container = this.container, mousePos = container.interactivity.mouse.position, distance = container.retina.bubbleModeDistance;
            if (!distance || distance < 0 || mousePos === undefined) {
                return;
            }
            const query = container.particles.quadTree.queryCircle(mousePos, distance, (p)=>this.isEnabled(p));
            for (const particle of query){
                particle.bubble.inRange = true;
                const pos = particle.getPosition(), pointDistance = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getDistance"])(pos, mousePos), ratio = 1 - pointDistance / distance;
                if (pointDistance <= distance) {
                    if (ratio >= 0 && container.interactivity.status === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Constants$2e$js__$5b$client$5d$__$28$ecmascript$29$__["mouseMoveEvent"]) {
                        this._hoverBubbleSize(particle, ratio);
                        this._hoverBubbleOpacity(particle, ratio);
                        this._hoverBubbleColor(particle, ratio);
                    }
                } else {
                    this.reset(particle);
                }
                if (container.interactivity.status === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Constants$2e$js__$5b$client$5d$__$28$ecmascript$29$__["mouseLeaveEvent"]) {
                    this.reset(particle);
                }
            }
        };
        this._hoverBubbleColor = (particle, ratio, divBubble)=>{
            const options = this.container.actualOptions, bubbleOptions = divBubble ?? options.interactivity.modes.bubble;
            if (!bubbleOptions) {
                return;
            }
            if (!particle.bubble.finalColor) {
                const modeColor = bubbleOptions.color;
                if (!modeColor) {
                    return;
                }
                const bubbleColor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["itemFromSingleOrMultiple"])(modeColor);
                particle.bubble.finalColor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$ColorUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["rangeColorToHsl"])(bubbleColor);
            }
            if (!particle.bubble.finalColor) {
                return;
            }
            if (bubbleOptions.mix) {
                particle.bubble.color = undefined;
                const pColor = particle.getFillColor();
                particle.bubble.color = pColor ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$ColorUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["rgbToHsl"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$ColorUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["colorMix"])(pColor, particle.bubble.finalColor, 1 - ratio, ratio)) : particle.bubble.finalColor;
            } else {
                particle.bubble.color = particle.bubble.finalColor;
            }
        };
        this._hoverBubbleOpacity = (particle, ratio, divBubble)=>{
            const container = this.container, options = container.actualOptions, modeOpacity = divBubble?.opacity ?? options.interactivity.modes.bubble?.opacity;
            if (!modeOpacity) {
                return;
            }
            const optOpacity = particle.options.opacity.value, pOpacity = particle.opacity?.value ?? 1, opacity = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$bubble$2f$esm$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["calculateBubbleValue"])(pOpacity, modeOpacity, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getRangeMax"])(optOpacity), ratio);
            if (opacity !== undefined) {
                particle.bubble.opacity = opacity;
            }
        };
        this._hoverBubbleSize = (particle, ratio, divBubble)=>{
            const container = this.container, modeSize = divBubble?.size ? divBubble.size * container.retina.pixelRatio : container.retina.bubbleModeSize;
            if (modeSize === undefined) {
                return;
            }
            const optSize = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getRangeMax"])(particle.options.size.value) * container.retina.pixelRatio, pSize = particle.size.value, size = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$bubble$2f$esm$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["calculateBubbleValue"])(pSize, modeSize, optSize, ratio);
            if (size !== undefined) {
                particle.bubble.radius = size;
            }
        };
        this._process = (particle, distMouse, timeSpent, data)=>{
            const container = this.container, bubbleParam = data.bubbleObj.optValue, options = container.actualOptions, bubbleOptions = options.interactivity.modes.bubble;
            if (!bubbleOptions || bubbleParam === undefined) {
                return;
            }
            const bubbleDuration = bubbleOptions.duration, bubbleDistance = container.retina.bubbleModeDistance, particlesParam = data.particlesObj.optValue, pObjBubble = data.bubbleObj.value, pObj = data.particlesObj.value || 0, type = data.type;
            if (!bubbleDistance || bubbleDistance < 0 || bubbleParam === particlesParam) {
                return;
            }
            if (!container.bubble) {
                container.bubble = {};
            }
            if (container.bubble.durationEnd) {
                if (pObjBubble) {
                    if (type === "size") {
                        delete particle.bubble.radius;
                    }
                    if (type === "opacity") {
                        delete particle.bubble.opacity;
                    }
                }
            } else {
                if (distMouse <= bubbleDistance) {
                    const obj = pObjBubble ?? pObj;
                    if (obj !== bubbleParam) {
                        const value = pObj - timeSpent * (pObj - bubbleParam) / bubbleDuration;
                        if (type === "size") {
                            particle.bubble.radius = value;
                        }
                        if (type === "opacity") {
                            particle.bubble.opacity = value;
                        }
                    }
                } else {
                    if (type === "size") {
                        delete particle.bubble.radius;
                    }
                    if (type === "opacity") {
                        delete particle.bubble.opacity;
                    }
                }
            }
        };
        this._singleSelectorHover = (delta, selector, div)=>{
            const container = this.container, selectors = document.querySelectorAll(selector), bubble = container.actualOptions.interactivity.modes.bubble;
            if (!bubble || !selectors.length) {
                return;
            }
            selectors.forEach((item)=>{
                const elem = item, pxRatio = container.retina.pixelRatio, pos = {
                    x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,
                    y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio
                }, repulseRadius = elem.offsetWidth / 2 * pxRatio, area = div.type === "circle" ? new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Circle$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Circle"](pos.x, pos.y, repulseRadius) : new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Rectangle$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Rectangle"](elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio), query = container.particles.quadTree.query(area, (p)=>this.isEnabled(p));
                for (const particle of query){
                    if (!area.contains(particle.getPosition())) {
                        continue;
                    }
                    particle.bubble.inRange = true;
                    const divs = bubble.divs, divBubble = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["divMode"])(divs, elem);
                    if (!particle.bubble.div || particle.bubble.div !== elem) {
                        this.clear(particle, delta, true);
                        particle.bubble.div = elem;
                    }
                    this._hoverBubbleSize(particle, 1, divBubble);
                    this._hoverBubbleOpacity(particle, 1, divBubble);
                    this._hoverBubbleColor(particle, 1, divBubble);
                }
            });
        };
        if (!container.bubble) {
            container.bubble = {};
        }
        this.handleClickMode = (mode)=>{
            if (mode !== "bubble") {
                return;
            }
            if (!container.bubble) {
                container.bubble = {};
            }
            container.bubble.clicking = true;
        };
    }
    clear(particle, delta, force) {
        if (particle.bubble.inRange && !force) {
            return;
        }
        delete particle.bubble.div;
        delete particle.bubble.opacity;
        delete particle.bubble.radius;
        delete particle.bubble.color;
    }
    init() {
        const container = this.container, bubble = container.actualOptions.interactivity.modes.bubble;
        if (!bubble) {
            return;
        }
        container.retina.bubbleModeDistance = bubble.distance * container.retina.pixelRatio;
        if (bubble.size !== undefined) {
            container.retina.bubbleModeSize = bubble.size * container.retina.pixelRatio;
        }
    }
    async interact(delta) {
        const options = this.container.actualOptions, events = options.interactivity.events, onHover = events.onHover, onClick = events.onClick, hoverEnabled = onHover.enable, hoverMode = onHover.mode, clickEnabled = onClick.enable, clickMode = onClick.mode, divs = events.onDiv;
        if (hoverEnabled && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["isInArray"])("bubble", hoverMode)) {
            this._hoverBubble();
        } else if (clickEnabled && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["isInArray"])("bubble", clickMode)) {
            this._clickBubble();
        } else {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["divModeExecute"])("bubble", divs, (selector, div)=>this._singleSelectorHover(delta, selector, div));
        }
    }
    isEnabled(particle) {
        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events, { onClick, onDiv, onHover } = events, divBubble = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["isDivModeEnabled"])("bubble", onDiv);
        if (!(divBubble || onHover.enable && mouse.position || onClick.enable && mouse.clickPosition)) {
            return false;
        }
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["isInArray"])("bubble", onHover.mode) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["isInArray"])("bubble", onClick.mode) || divBubble;
    }
    loadModeOptions(options, ...sources) {
        if (!options.bubble) {
            options.bubble = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$bubble$2f$esm$2f$Options$2f$Classes$2f$Bubble$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Bubble"]();
        }
        for (const source of sources){
            options.bubble.load(source?.bubble);
        }
    }
    reset(particle) {
        particle.bubble.inRange = false;
    }
}
}}),
"[project]/node_modules/tsparticles-interaction-external-bubble/esm/index.js [client] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "loadExternalBubbleInteraction": (()=>loadExternalBubbleInteraction)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$bubble$2f$esm$2f$Bubbler$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-external-bubble/esm/Bubbler.js [client] (ecmascript)");
;
async function loadExternalBubbleInteraction(engine, refresh = true) {
    await engine.addInteractor("externalBubble", (container)=>new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$bubble$2f$esm$2f$Bubbler$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Bubbler"](container), refresh);
}
;
;
;
;
;
;
}}),
"[project]/node_modules/tsparticles-interaction-external-connect/esm/Options/Classes/ConnectLinks.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "ConnectLinks": (()=>ConnectLinks)
});
class ConnectLinks {
    constructor(){
        this.opacity = 0.5;
    }
    load(data) {
        if (!data) {
            return;
        }
        if (data.opacity !== undefined) {
            this.opacity = data.opacity;
        }
    }
}
}}),
"[project]/node_modules/tsparticles-interaction-external-connect/esm/Options/Classes/Connect.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Connect": (()=>Connect)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$connect$2f$esm$2f$Options$2f$Classes$2f$ConnectLinks$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-external-connect/esm/Options/Classes/ConnectLinks.js [client] (ecmascript)");
;
class Connect {
    constructor(){
        this.distance = 80;
        this.links = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$connect$2f$esm$2f$Options$2f$Classes$2f$ConnectLinks$2e$js__$5b$client$5d$__$28$ecmascript$29$__["ConnectLinks"]();
        this.radius = 60;
    }
    get lineLinked() {
        return this.links;
    }
    set lineLinked(value) {
        this.links = value;
    }
    get line_linked() {
        return this.links;
    }
    set line_linked(value) {
        this.links = value;
    }
    load(data) {
        if (!data) {
            return;
        }
        if (data.distance !== undefined) {
            this.distance = data.distance;
        }
        this.links.load(data.links ?? data.lineLinked ?? data.line_linked);
        if (data.radius !== undefined) {
            this.radius = data.radius;
        }
    }
}
}}),
"[project]/node_modules/tsparticles-interaction-external-connect/esm/Utils.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "drawConnectLine": (()=>drawConnectLine),
    "drawConnection": (()=>drawConnection),
    "gradient": (()=>gradient),
    "lineStyle": (()=>lineStyle)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$ColorUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/ColorUtils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$CanvasUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/CanvasUtils.js [client] (ecmascript)");
;
function gradient(context, p1, p2, opacity) {
    const gradStop = Math.floor(p2.getRadius() / p1.getRadius()), color1 = p1.getFillColor(), color2 = p2.getFillColor();
    if (!color1 || !color2) {
        return;
    }
    const sourcePos = p1.getPosition(), destPos = p2.getPosition(), midRgb = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$ColorUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["colorMix"])(color1, color2, p1.getRadius(), p2.getRadius()), grad = context.createLinearGradient(sourcePos.x, sourcePos.y, destPos.x, destPos.y);
    grad.addColorStop(0, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$ColorUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getStyleFromHsl"])(color1, opacity));
    grad.addColorStop(gradStop > 1 ? 1 : gradStop, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$ColorUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getStyleFromRgb"])(midRgb, opacity));
    grad.addColorStop(1, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$ColorUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getStyleFromHsl"])(color2, opacity));
    return grad;
}
function drawConnectLine(context, width, lineStyle, begin, end) {
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$CanvasUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["drawLine"])(context, begin, end);
    context.lineWidth = width;
    context.strokeStyle = lineStyle;
    context.stroke();
}
function lineStyle(container, ctx, p1, p2) {
    const options = container.actualOptions, connectOptions = options.interactivity.modes.connect;
    if (!connectOptions) {
        return;
    }
    return gradient(ctx, p1, p2, connectOptions.links.opacity);
}
function drawConnection(container, p1, p2) {
    container.canvas.draw((ctx)=>{
        const ls = lineStyle(container, ctx, p1, p2);
        if (!ls) {
            return;
        }
        const pos1 = p1.getPosition(), pos2 = p2.getPosition();
        drawConnectLine(ctx, p1.retina.linksWidth ?? 0, ls, pos1, pos2);
    });
}
}}),
"[project]/node_modules/tsparticles-interaction-external-connect/esm/Connector.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Connector": (()=>Connector)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$ExternalInteractorBase$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Core/Utils/ExternalInteractorBase.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/Utils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$connect$2f$esm$2f$Options$2f$Classes$2f$Connect$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-external-connect/esm/Options/Classes/Connect.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$connect$2f$esm$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-external-connect/esm/Utils.js [client] (ecmascript)");
;
;
;
class Connector extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$ExternalInteractorBase$2e$js__$5b$client$5d$__$28$ecmascript$29$__["ExternalInteractorBase"] {
    constructor(container){
        super(container);
    }
    clear() {}
    init() {
        const container = this.container, connect = container.actualOptions.interactivity.modes.connect;
        if (!connect) {
            return;
        }
        container.retina.connectModeDistance = connect.distance * container.retina.pixelRatio;
        container.retina.connectModeRadius = connect.radius * container.retina.pixelRatio;
    }
    async interact() {
        const container = this.container, options = container.actualOptions;
        if (options.interactivity.events.onHover.enable && container.interactivity.status === "pointermove") {
            const mousePos = container.interactivity.mouse.position;
            if (!container.retina.connectModeDistance || container.retina.connectModeDistance < 0 || !container.retina.connectModeRadius || container.retina.connectModeRadius < 0 || !mousePos) {
                return;
            }
            const distance = Math.abs(container.retina.connectModeRadius), query = container.particles.quadTree.queryCircle(mousePos, distance, (p)=>this.isEnabled(p));
            let i = 0;
            for (const p1 of query){
                const pos1 = p1.getPosition();
                for (const p2 of query.slice(i + 1)){
                    const pos2 = p2.getPosition(), distMax = Math.abs(container.retina.connectModeDistance), xDiff = Math.abs(pos1.x - pos2.x), yDiff = Math.abs(pos1.y - pos2.y);
                    if (xDiff < distMax && yDiff < distMax) {
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$connect$2f$esm$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["drawConnection"])(container, p1, p2);
                    }
                }
                ++i;
            }
        }
    }
    isEnabled(particle) {
        const container = this.container, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? container.actualOptions.interactivity).events;
        if (!(events.onHover.enable && mouse.position)) {
            return false;
        }
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["isInArray"])("connect", events.onHover.mode);
    }
    loadModeOptions(options, ...sources) {
        if (!options.connect) {
            options.connect = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$connect$2f$esm$2f$Options$2f$Classes$2f$Connect$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Connect"]();
        }
        for (const source of sources){
            options.connect.load(source?.connect);
        }
    }
    reset() {}
}
}}),
"[project]/node_modules/tsparticles-interaction-external-connect/esm/index.js [client] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "loadExternalConnectInteraction": (()=>loadExternalConnectInteraction)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$connect$2f$esm$2f$Connector$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-external-connect/esm/Connector.js [client] (ecmascript)");
;
async function loadExternalConnectInteraction(engine, refresh = true) {
    await engine.addInteractor("externalConnect", (container)=>new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$connect$2f$esm$2f$Connector$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Connector"](container), refresh);
}
;
;
;
;
}}),
"[project]/node_modules/tsparticles-interaction-external-grab/esm/Options/Classes/GrabLinks.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "GrabLinks": (()=>GrabLinks)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Options$2f$Classes$2f$OptionsColor$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Options/Classes/OptionsColor.js [client] (ecmascript)");
;
class GrabLinks {
    constructor(){
        this.blink = false;
        this.consent = false;
        this.opacity = 1;
    }
    load(data) {
        if (!data) {
            return;
        }
        if (data.blink !== undefined) {
            this.blink = data.blink;
        }
        if (data.color !== undefined) {
            this.color = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Options$2f$Classes$2f$OptionsColor$2e$js__$5b$client$5d$__$28$ecmascript$29$__["OptionsColor"].create(this.color, data.color);
        }
        if (data.consent !== undefined) {
            this.consent = data.consent;
        }
        if (data.opacity !== undefined) {
            this.opacity = data.opacity;
        }
    }
}
}}),
"[project]/node_modules/tsparticles-interaction-external-grab/esm/Options/Classes/Grab.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Grab": (()=>Grab)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$grab$2f$esm$2f$Options$2f$Classes$2f$GrabLinks$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-external-grab/esm/Options/Classes/GrabLinks.js [client] (ecmascript)");
;
class Grab {
    constructor(){
        this.distance = 100;
        this.links = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$grab$2f$esm$2f$Options$2f$Classes$2f$GrabLinks$2e$js__$5b$client$5d$__$28$ecmascript$29$__["GrabLinks"]();
    }
    get lineLinked() {
        return this.links;
    }
    set lineLinked(value) {
        this.links = value;
    }
    get line_linked() {
        return this.links;
    }
    set line_linked(value) {
        this.links = value;
    }
    load(data) {
        if (!data) {
            return;
        }
        if (data.distance !== undefined) {
            this.distance = data.distance;
        }
        this.links.load(data.links ?? data.lineLinked ?? data.line_linked);
    }
}
}}),
"[project]/node_modules/tsparticles-interaction-external-grab/esm/Utils.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "drawGrab": (()=>drawGrab),
    "drawGrabLine": (()=>drawGrabLine)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$CanvasUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/CanvasUtils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$ColorUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/ColorUtils.js [client] (ecmascript)");
;
function drawGrabLine(context, width, begin, end, colorLine, opacity) {
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$CanvasUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["drawLine"])(context, begin, end);
    context.strokeStyle = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$ColorUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getStyleFromRgb"])(colorLine, opacity);
    context.lineWidth = width;
    context.stroke();
}
function drawGrab(container, particle, lineColor, opacity, mousePos) {
    container.canvas.draw((ctx)=>{
        const beginPos = particle.getPosition();
        drawGrabLine(ctx, particle.retina.linksWidth ?? 0, beginPos, mousePos, lineColor, opacity);
    });
}
}}),
"[project]/node_modules/tsparticles-interaction-external-grab/esm/Grabber.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Grabber": (()=>Grabber)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$ExternalInteractorBase$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Core/Utils/ExternalInteractorBase.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/NumberUtils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$ColorUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/ColorUtils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/Utils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Constants$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Core/Utils/Constants.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$grab$2f$esm$2f$Options$2f$Classes$2f$Grab$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-external-grab/esm/Options/Classes/Grab.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$grab$2f$esm$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-external-grab/esm/Utils.js [client] (ecmascript)");
;
;
;
class Grabber extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$ExternalInteractorBase$2e$js__$5b$client$5d$__$28$ecmascript$29$__["ExternalInteractorBase"] {
    constructor(container){
        super(container);
    }
    clear() {}
    init() {
        const container = this.container, grab = container.actualOptions.interactivity.modes.grab;
        if (!grab) {
            return;
        }
        container.retina.grabModeDistance = grab.distance * container.retina.pixelRatio;
    }
    async interact() {
        const container = this.container, options = container.actualOptions, interactivity = options.interactivity;
        if (!interactivity.modes.grab || !interactivity.events.onHover.enable || container.interactivity.status !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Constants$2e$js__$5b$client$5d$__$28$ecmascript$29$__["mouseMoveEvent"]) {
            return;
        }
        const mousePos = container.interactivity.mouse.position;
        if (!mousePos) {
            return;
        }
        const distance = container.retina.grabModeDistance;
        if (!distance || distance < 0) {
            return;
        }
        const query = container.particles.quadTree.queryCircle(mousePos, distance, (p)=>this.isEnabled(p));
        for (const particle of query){
            const pos = particle.getPosition(), pointDistance = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getDistance"])(pos, mousePos);
            if (pointDistance > distance) {
                continue;
            }
            const grabLineOptions = interactivity.modes.grab.links, lineOpacity = grabLineOptions.opacity, opacityLine = lineOpacity - pointDistance * lineOpacity / distance;
            if (opacityLine <= 0) {
                continue;
            }
            const optColor = grabLineOptions.color ?? particle.options.links?.color;
            if (!container.particles.grabLineColor && optColor) {
                const linksOptions = interactivity.modes.grab.links;
                container.particles.grabLineColor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$ColorUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getLinkRandomColor"])(optColor, linksOptions.blink, linksOptions.consent);
            }
            const colorLine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$ColorUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getLinkColor"])(particle, undefined, container.particles.grabLineColor);
            if (!colorLine) {
                continue;
            }
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$grab$2f$esm$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["drawGrab"])(container, particle, colorLine, opacityLine, mousePos);
        }
    }
    isEnabled(particle) {
        const container = this.container, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? container.actualOptions.interactivity).events;
        return events.onHover.enable && !!mouse.position && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["isInArray"])("grab", events.onHover.mode);
    }
    loadModeOptions(options, ...sources) {
        if (!options.grab) {
            options.grab = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$grab$2f$esm$2f$Options$2f$Classes$2f$Grab$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Grab"]();
        }
        for (const source of sources){
            options.grab.load(source?.grab);
        }
    }
    reset() {}
}
}}),
"[project]/node_modules/tsparticles-interaction-external-grab/esm/index.js [client] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "loadExternalGrabInteraction": (()=>loadExternalGrabInteraction)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$grab$2f$esm$2f$Grabber$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-external-grab/esm/Grabber.js [client] (ecmascript)");
;
async function loadExternalGrabInteraction(engine, refresh = true) {
    await engine.addInteractor("externalGrab", (container)=>new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$grab$2f$esm$2f$Grabber$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Grabber"](container), refresh);
}
;
;
;
;
}}),
"[project]/node_modules/tsparticles-interaction-external-pause/esm/Pauser.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Pauser": (()=>Pauser)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$ExternalInteractorBase$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Core/Utils/ExternalInteractorBase.js [client] (ecmascript)");
;
class Pauser extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$ExternalInteractorBase$2e$js__$5b$client$5d$__$28$ecmascript$29$__["ExternalInteractorBase"] {
    constructor(container){
        super(container);
        this.handleClickMode = (mode)=>{
            if (mode !== "pause") {
                return;
            }
            const container = this.container;
            if (container.getAnimationStatus()) {
                container.pause();
            } else {
                container.play();
            }
        };
    }
    clear() {}
    init() {}
    async interact() {}
    isEnabled() {
        return true;
    }
    reset() {}
}
}}),
"[project]/node_modules/tsparticles-interaction-external-pause/esm/index.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "loadExternalPauseInteraction": (()=>loadExternalPauseInteraction)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$pause$2f$esm$2f$Pauser$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-external-pause/esm/Pauser.js [client] (ecmascript)");
;
async function loadExternalPauseInteraction(engine, refresh = true) {
    await engine.addInteractor("externalPause", (container)=>new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$pause$2f$esm$2f$Pauser$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Pauser"](container), refresh);
}
}}),
"[project]/node_modules/tsparticles-interaction-external-push/esm/Options/Classes/Push.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Push": (()=>Push)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/NumberUtils.js [client] (ecmascript)");
;
class Push {
    constructor(){
        this.default = true;
        this.groups = [];
        this.quantity = 4;
    }
    get particles_nb() {
        return this.quantity;
    }
    set particles_nb(value) {
        this.quantity = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["setRangeValue"])(value);
    }
    load(data) {
        if (!data) {
            return;
        }
        if (data.default !== undefined) {
            this.default = data.default;
        }
        if (data.groups !== undefined) {
            this.groups = data.groups.map((t)=>t);
        }
        if (!this.groups.length) {
            this.default = true;
        }
        const quantity = data.quantity ?? data.particles_nb;
        if (quantity !== undefined) {
            this.quantity = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["setRangeValue"])(quantity);
        }
    }
}
}}),
"[project]/node_modules/tsparticles-interaction-external-push/esm/Pusher.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Pusher": (()=>Pusher)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$ExternalInteractorBase$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Core/Utils/ExternalInteractorBase.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/NumberUtils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/Utils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$push$2f$esm$2f$Options$2f$Classes$2f$Push$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-external-push/esm/Options/Classes/Push.js [client] (ecmascript)");
;
;
class Pusher extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$ExternalInteractorBase$2e$js__$5b$client$5d$__$28$ecmascript$29$__["ExternalInteractorBase"] {
    constructor(container){
        super(container);
        this.handleClickMode = (mode)=>{
            if (mode !== "push") {
                return;
            }
            const container = this.container, options = container.actualOptions, pushOptions = options.interactivity.modes.push;
            if (!pushOptions) {
                return;
            }
            const quantity = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getRangeValue"])(pushOptions.quantity);
            if (quantity <= 0) {
                return;
            }
            const group = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["itemFromArray"])([
                undefined,
                ...pushOptions.groups
            ]), groupOptions = group !== undefined ? container.actualOptions.particles.groups[group] : undefined;
            container.particles.push(quantity, container.interactivity.mouse, groupOptions, group);
        };
    }
    clear() {}
    init() {}
    async interact() {}
    isEnabled() {
        return true;
    }
    loadModeOptions(options, ...sources) {
        if (!options.push) {
            options.push = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$push$2f$esm$2f$Options$2f$Classes$2f$Push$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Push"]();
        }
        for (const source of sources){
            options.push.load(source?.push);
        }
    }
    reset() {}
}
}}),
"[project]/node_modules/tsparticles-interaction-external-push/esm/index.js [client] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "loadExternalPushInteraction": (()=>loadExternalPushInteraction)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$push$2f$esm$2f$Pusher$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-external-push/esm/Pusher.js [client] (ecmascript)");
;
async function loadExternalPushInteraction(engine, refresh = true) {
    await engine.addInteractor("externalPush", (container)=>new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$push$2f$esm$2f$Pusher$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Pusher"](container), refresh);
}
;
;
}}),
"[project]/node_modules/tsparticles-interaction-external-remove/esm/Options/Classes/Remove.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Remove": (()=>Remove)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/NumberUtils.js [client] (ecmascript)");
;
class Remove {
    constructor(){
        this.quantity = 2;
    }
    get particles_nb() {
        return this.quantity;
    }
    set particles_nb(value) {
        this.quantity = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["setRangeValue"])(value);
    }
    load(data) {
        if (!data) {
            return;
        }
        const quantity = data.quantity ?? data.particles_nb;
        if (quantity !== undefined) {
            this.quantity = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["setRangeValue"])(quantity);
        }
    }
}
}}),
"[project]/node_modules/tsparticles-interaction-external-remove/esm/Remover.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Remover": (()=>Remover)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$ExternalInteractorBase$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Core/Utils/ExternalInteractorBase.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/NumberUtils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$remove$2f$esm$2f$Options$2f$Classes$2f$Remove$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-external-remove/esm/Options/Classes/Remove.js [client] (ecmascript)");
;
;
class Remover extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$ExternalInteractorBase$2e$js__$5b$client$5d$__$28$ecmascript$29$__["ExternalInteractorBase"] {
    constructor(container){
        super(container);
        this.handleClickMode = (mode)=>{
            const container = this.container, options = container.actualOptions;
            if (!options.interactivity.modes.remove || mode !== "remove") {
                return;
            }
            const removeNb = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getRangeValue"])(options.interactivity.modes.remove.quantity);
            container.particles.removeQuantity(removeNb);
        };
    }
    clear() {}
    init() {}
    async interact() {}
    isEnabled() {
        return true;
    }
    loadModeOptions(options, ...sources) {
        if (!options.remove) {
            options.remove = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$remove$2f$esm$2f$Options$2f$Classes$2f$Remove$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Remove"]();
        }
        for (const source of sources){
            options.remove.load(source?.remove);
        }
    }
    reset() {}
}
}}),
"[project]/node_modules/tsparticles-interaction-external-remove/esm/index.js [client] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "loadExternalRemoveInteraction": (()=>loadExternalRemoveInteraction)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$remove$2f$esm$2f$Remover$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-external-remove/esm/Remover.js [client] (ecmascript)");
;
async function loadExternalRemoveInteraction(engine, refresh = true) {
    await engine.addInteractor("externalRemove", (container)=>new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$remove$2f$esm$2f$Remover$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Remover"](container), refresh);
}
;
;
}}),
"[project]/node_modules/tsparticles-interaction-external-repulse/esm/Options/Classes/RepulseBase.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "RepulseBase": (()=>RepulseBase)
});
class RepulseBase {
    constructor(){
        this.distance = 200;
        this.duration = 0.4;
        this.factor = 100;
        this.speed = 1;
        this.maxSpeed = 50;
        this.easing = "ease-out-quad";
    }
    load(data) {
        if (!data) {
            return;
        }
        if (data.distance !== undefined) {
            this.distance = data.distance;
        }
        if (data.duration !== undefined) {
            this.duration = data.duration;
        }
        if (data.easing !== undefined) {
            this.easing = data.easing;
        }
        if (data.factor !== undefined) {
            this.factor = data.factor;
        }
        if (data.speed !== undefined) {
            this.speed = data.speed;
        }
        if (data.maxSpeed !== undefined) {
            this.maxSpeed = data.maxSpeed;
        }
    }
}
}}),
"[project]/node_modules/tsparticles-interaction-external-repulse/esm/Options/Classes/RepulseDiv.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "RepulseDiv": (()=>RepulseDiv)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/Utils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$repulse$2f$esm$2f$Options$2f$Classes$2f$RepulseBase$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-external-repulse/esm/Options/Classes/RepulseBase.js [client] (ecmascript)");
;
;
class RepulseDiv extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$repulse$2f$esm$2f$Options$2f$Classes$2f$RepulseBase$2e$js__$5b$client$5d$__$28$ecmascript$29$__["RepulseBase"] {
    constructor(){
        super();
        this.selectors = [];
    }
    get ids() {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["executeOnSingleOrMultiple"])(this.selectors, (t)=>t.replace("#", ""));
    }
    set ids(value) {
        this.selectors = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["executeOnSingleOrMultiple"])(value, (t)=>`#${t}`);
    }
    load(data) {
        super.load(data);
        if (!data) {
            return;
        }
        if (data.ids !== undefined) {
            this.ids = data.ids;
        }
        if (data.selectors !== undefined) {
            this.selectors = data.selectors;
        }
    }
}
}}),
"[project]/node_modules/tsparticles-interaction-external-repulse/esm/Options/Classes/Repulse.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Repulse": (()=>Repulse)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/Utils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$repulse$2f$esm$2f$Options$2f$Classes$2f$RepulseBase$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-external-repulse/esm/Options/Classes/RepulseBase.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$repulse$2f$esm$2f$Options$2f$Classes$2f$RepulseDiv$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-external-repulse/esm/Options/Classes/RepulseDiv.js [client] (ecmascript)");
;
;
;
class Repulse extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$repulse$2f$esm$2f$Options$2f$Classes$2f$RepulseBase$2e$js__$5b$client$5d$__$28$ecmascript$29$__["RepulseBase"] {
    load(data) {
        super.load(data);
        if (!data) {
            return;
        }
        this.divs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["executeOnSingleOrMultiple"])(data.divs, (div)=>{
            const tmp = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$repulse$2f$esm$2f$Options$2f$Classes$2f$RepulseDiv$2e$js__$5b$client$5d$__$28$ecmascript$29$__["RepulseDiv"]();
            tmp.load(div);
            return tmp;
        });
    }
}
}}),
"[project]/node_modules/tsparticles-interaction-external-repulse/esm/Repulser.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Repulser": (()=>Repulser)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Circle$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Core/Utils/Circle.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$ExternalInteractorBase$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Core/Utils/ExternalInteractorBase.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Rectangle$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Core/Utils/Rectangle.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Vector$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Core/Utils/Vector.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/NumberUtils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/Utils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Constants$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Core/Utils/Constants.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$repulse$2f$esm$2f$Options$2f$Classes$2f$Repulse$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-external-repulse/esm/Options/Classes/Repulse.js [client] (ecmascript)");
;
;
class Repulser extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$ExternalInteractorBase$2e$js__$5b$client$5d$__$28$ecmascript$29$__["ExternalInteractorBase"] {
    constructor(engine, container){
        super(container);
        this._clickRepulse = ()=>{
            const container = this.container, repulseOptions = container.actualOptions.interactivity.modes.repulse;
            if (!repulseOptions) {
                return;
            }
            const repulse = container.repulse || {
                particles: []
            };
            if (!repulse.finish) {
                if (!repulse.count) {
                    repulse.count = 0;
                }
                repulse.count++;
                if (repulse.count === container.particles.count) {
                    repulse.finish = true;
                }
            }
            if (repulse.clicking) {
                const repulseDistance = container.retina.repulseModeDistance;
                if (!repulseDistance || repulseDistance < 0) {
                    return;
                }
                const repulseRadius = Math.pow(repulseDistance / 6, 3), mouseClickPos = container.interactivity.mouse.clickPosition;
                if (mouseClickPos === undefined) {
                    return;
                }
                const range = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Circle$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Circle"](mouseClickPos.x, mouseClickPos.y, repulseRadius), query = container.particles.quadTree.query(range, (p)=>this.isEnabled(p));
                for (const particle of query){
                    const { dx, dy, distance } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getDistances"])(mouseClickPos, particle.position), d = distance ** 2, velocity = repulseOptions.speed, force = -repulseRadius * velocity / d;
                    if (d <= repulseRadius) {
                        repulse.particles.push(particle);
                        const vect = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Vector$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Vector"].create(dx, dy);
                        vect.length = force;
                        particle.velocity.setTo(vect);
                    }
                }
            } else if (repulse.clicking === false) {
                for (const particle of repulse.particles){
                    particle.velocity.setTo(particle.initialVelocity);
                }
                repulse.particles = [];
            }
        };
        this._hoverRepulse = ()=>{
            const container = this.container, mousePos = container.interactivity.mouse.position, repulseRadius = container.retina.repulseModeDistance;
            if (!repulseRadius || repulseRadius < 0 || !mousePos) {
                return;
            }
            this._processRepulse(mousePos, repulseRadius, new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Circle$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Circle"](mousePos.x, mousePos.y, repulseRadius));
        };
        this._processRepulse = (position, repulseRadius, area, divRepulse)=>{
            const container = this.container, query = container.particles.quadTree.query(area, (p)=>this.isEnabled(p)), repulseOptions = container.actualOptions.interactivity.modes.repulse;
            if (!repulseOptions) {
                return;
            }
            for (const particle of query){
                const { dx, dy, distance } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getDistances"])(particle.position, position), velocity = (divRepulse?.speed ?? repulseOptions.speed) * repulseOptions.factor, repulseFactor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["clamp"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getEasing"])(repulseOptions.easing)(1 - distance / repulseRadius) * velocity, 0, repulseOptions.maxSpeed), normVec = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Vector$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Vector"].create(distance === 0 ? velocity : dx / distance * repulseFactor, distance === 0 ? velocity : dy / distance * repulseFactor);
                particle.position.addTo(normVec);
            }
        };
        this._singleSelectorRepulse = (selector, div)=>{
            const container = this.container, repulse = container.actualOptions.interactivity.modes.repulse;
            if (!repulse) {
                return;
            }
            const query = document.querySelectorAll(selector);
            if (!query.length) {
                return;
            }
            query.forEach((item)=>{
                const elem = item, pxRatio = container.retina.pixelRatio, pos = {
                    x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,
                    y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio
                }, repulseRadius = elem.offsetWidth / 2 * pxRatio, area = div.type === "circle" ? new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Circle$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Circle"](pos.x, pos.y, repulseRadius) : new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Rectangle$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Rectangle"](elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio), divs = repulse.divs, divRepulse = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["divMode"])(divs, elem);
                this._processRepulse(pos, repulseRadius, area, divRepulse);
            });
        };
        this._engine = engine;
        if (!container.repulse) {
            container.repulse = {
                particles: []
            };
        }
        this.handleClickMode = (mode)=>{
            const options = this.container.actualOptions, repulseOpts = options.interactivity.modes.repulse;
            if (!repulseOpts || mode !== "repulse") {
                return;
            }
            if (!container.repulse) {
                container.repulse = {
                    particles: []
                };
            }
            const repulse = container.repulse;
            repulse.clicking = true;
            repulse.count = 0;
            for (const particle of container.repulse.particles){
                if (!this.isEnabled(particle)) {
                    continue;
                }
                particle.velocity.setTo(particle.initialVelocity);
            }
            repulse.particles = [];
            repulse.finish = false;
            setTimeout(()=>{
                if (container.destroyed) {
                    return;
                }
                repulse.clicking = false;
            }, repulseOpts.duration * 1000);
        };
    }
    clear() {}
    init() {
        const container = this.container, repulse = container.actualOptions.interactivity.modes.repulse;
        if (!repulse) {
            return;
        }
        container.retina.repulseModeDistance = repulse.distance * container.retina.pixelRatio;
    }
    async interact() {
        const container = this.container, options = container.actualOptions, mouseMoveStatus = container.interactivity.status === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Constants$2e$js__$5b$client$5d$__$28$ecmascript$29$__["mouseMoveEvent"], events = options.interactivity.events, hover = events.onHover, hoverEnabled = hover.enable, hoverMode = hover.mode, click = events.onClick, clickEnabled = click.enable, clickMode = click.mode, divs = events.onDiv;
        if (mouseMoveStatus && hoverEnabled && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["isInArray"])("repulse", hoverMode)) {
            this._hoverRepulse();
        } else if (clickEnabled && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["isInArray"])("repulse", clickMode)) {
            this._clickRepulse();
        } else {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["divModeExecute"])("repulse", divs, (selector, div)=>this._singleSelectorRepulse(selector, div));
        }
    }
    isEnabled(particle) {
        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events, divs = events.onDiv, hover = events.onHover, click = events.onClick, divRepulse = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["isDivModeEnabled"])("repulse", divs);
        if (!(divRepulse || hover.enable && mouse.position || click.enable && mouse.clickPosition)) {
            return false;
        }
        const hoverMode = hover.mode, clickMode = click.mode;
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["isInArray"])("repulse", hoverMode) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["isInArray"])("repulse", clickMode) || divRepulse;
    }
    loadModeOptions(options, ...sources) {
        if (!options.repulse) {
            options.repulse = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$repulse$2f$esm$2f$Options$2f$Classes$2f$Repulse$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Repulse"]();
        }
        for (const source of sources){
            options.repulse.load(source?.repulse);
        }
    }
    reset() {}
}
}}),
"[project]/node_modules/tsparticles-interaction-external-repulse/esm/index.js [client] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "loadExternalRepulseInteraction": (()=>loadExternalRepulseInteraction)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$repulse$2f$esm$2f$Repulser$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-external-repulse/esm/Repulser.js [client] (ecmascript)");
;
async function loadExternalRepulseInteraction(engine, refresh = true) {
    await engine.addInteractor("externalRepulse", (container)=>new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$repulse$2f$esm$2f$Repulser$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Repulser"](engine, container), refresh);
}
;
;
;
;
;
;
}}),
"[project]/node_modules/tsparticles-interaction-external-slow/esm/Options/Classes/Slow.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Slow": (()=>Slow)
});
class Slow {
    constructor(){
        this.factor = 3;
        this.radius = 200;
    }
    load(data) {
        if (!data) {
            return;
        }
        if (data.factor !== undefined) {
            this.factor = data.factor;
        }
        if (data.radius !== undefined) {
            this.radius = data.radius;
        }
    }
}
}}),
"[project]/node_modules/tsparticles-interaction-external-slow/esm/Slower.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Slower": (()=>Slower)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$ExternalInteractorBase$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Core/Utils/ExternalInteractorBase.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/NumberUtils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/Utils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$slow$2f$esm$2f$Options$2f$Classes$2f$Slow$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-external-slow/esm/Options/Classes/Slow.js [client] (ecmascript)");
;
;
class Slower extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$ExternalInteractorBase$2e$js__$5b$client$5d$__$28$ecmascript$29$__["ExternalInteractorBase"] {
    constructor(container){
        super(container);
    }
    clear(particle, delta, force) {
        if (particle.slow.inRange && !force) {
            return;
        }
        particle.slow.factor = 1;
    }
    init() {
        const container = this.container, slow = container.actualOptions.interactivity.modes.slow;
        if (!slow) {
            return;
        }
        container.retina.slowModeRadius = slow.radius * container.retina.pixelRatio;
    }
    async interact() {}
    isEnabled(particle) {
        const container = this.container, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? container.actualOptions.interactivity).events;
        return events.onHover.enable && !!mouse.position && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["isInArray"])("slow", events.onHover.mode);
    }
    loadModeOptions(options, ...sources) {
        if (!options.slow) {
            options.slow = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$slow$2f$esm$2f$Options$2f$Classes$2f$Slow$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Slow"]();
        }
        for (const source of sources){
            options.slow.load(source?.slow);
        }
    }
    reset(particle) {
        particle.slow.inRange = false;
        const container = this.container, options = container.actualOptions, mousePos = container.interactivity.mouse.position, radius = container.retina.slowModeRadius, slowOptions = options.interactivity.modes.slow;
        if (!slowOptions || !radius || radius < 0 || !mousePos) {
            return;
        }
        const particlePos = particle.getPosition(), dist = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getDistance"])(mousePos, particlePos), proximityFactor = dist / radius, slowFactor = slowOptions.factor, { slow } = particle;
        if (dist > radius) {
            return;
        }
        slow.inRange = true;
        slow.factor = proximityFactor / slowFactor;
    }
}
}}),
"[project]/node_modules/tsparticles-interaction-external-slow/esm/index.js [client] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "loadExternalSlowInteraction": (()=>loadExternalSlowInteraction)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$slow$2f$esm$2f$Slower$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-external-slow/esm/Slower.js [client] (ecmascript)");
;
async function loadExternalSlowInteraction(engine, refresh = true) {
    await engine.addInteractor("externalSlow", (container)=>new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$slow$2f$esm$2f$Slower$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Slower"](container), refresh);
}
;
;
}}),
"[project]/node_modules/tsparticles-shape-image/esm/GifUtils/Constants.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "InterlaceOffsets": (()=>InterlaceOffsets),
    "InterlaceSteps": (()=>InterlaceSteps)
});
const InterlaceOffsets = [
    0,
    4,
    2,
    1
];
const InterlaceSteps = [
    8,
    8,
    4,
    2
];
}}),
"[project]/node_modules/tsparticles-shape-image/esm/GifUtils/ByteStream.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "ByteStream": (()=>ByteStream)
});
class ByteStream {
    constructor(bytes){
        this.pos = 0;
        this.data = new Uint8ClampedArray(bytes);
    }
    getString(count) {
        const slice = this.data.slice(this.pos, this.pos + count);
        this.pos += slice.length;
        return slice.reduce((acc, curr)=>acc + String.fromCharCode(curr), "");
    }
    nextByte() {
        return this.data[this.pos++];
    }
    nextTwoBytes() {
        this.pos += 2;
        return this.data[this.pos - 2] + (this.data[this.pos - 1] << 8);
    }
    readSubBlocks() {
        let blockString = "", size = 0;
        do {
            size = this.data[this.pos++];
            for(let count = size; --count >= 0; blockString += String.fromCharCode(this.data[this.pos++])){}
        }while (size !== 0)
        return blockString;
    }
    readSubBlocksBin() {
        let size = 0, len = 0;
        for(let offset = 0; (size = this.data[this.pos + offset]) !== 0; offset += size + 1){
            len += size;
        }
        const blockData = new Uint8Array(len);
        for(let i = 0; (size = this.data[this.pos++]) !== 0;){
            for(let count = size; --count >= 0; blockData[i++] = this.data[this.pos++]){}
        }
        return blockData;
    }
    skipSubBlocks() {
        for(; this.data[this.pos] !== 0; this.pos += this.data[this.pos] + 1){}
        this.pos++;
    }
}
}}),
"[project]/node_modules/tsparticles-shape-image/esm/GifUtils/Utils.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "decodeGIF": (()=>decodeGIF),
    "getGIFLoopAmount": (()=>getGIFLoopAmount)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$image$2f$esm$2f$GifUtils$2f$Constants$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-shape-image/esm/GifUtils/Constants.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$image$2f$esm$2f$GifUtils$2f$ByteStream$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-shape-image/esm/GifUtils/ByteStream.js [client] (ecmascript)");
;
;
function parseColorTable(byteStream, count) {
    const colors = [];
    for(let i = 0; i < count; i++){
        colors.push({
            r: byteStream.data[byteStream.pos],
            g: byteStream.data[byteStream.pos + 1],
            b: byteStream.data[byteStream.pos + 2]
        });
        byteStream.pos += 3;
    }
    return colors;
}
async function parseExtensionBlock(byteStream, gif, getFrameIndex, getTransparencyIndex) {
    switch(byteStream.nextByte()){
        case 249:
            {
                const frame = gif.frames[getFrameIndex(false)];
                byteStream.pos++;
                const packedByte = byteStream.nextByte();
                frame.GCreserved = (packedByte & 0xe0) >>> 5;
                frame.disposalMethod = (packedByte & 0x1c) >>> 2;
                frame.userInputDelayFlag = (packedByte & 2) === 2;
                const transparencyFlag = (packedByte & 1) === 1;
                frame.delayTime = byteStream.nextTwoBytes() * 0xa;
                const transparencyIndex = byteStream.nextByte();
                if (transparencyFlag) {
                    getTransparencyIndex(transparencyIndex);
                }
                byteStream.pos++;
                break;
            }
        case 255:
            {
                byteStream.pos++;
                const applicationExtension = {
                    identifier: byteStream.getString(8),
                    authenticationCode: byteStream.getString(3),
                    data: byteStream.readSubBlocksBin()
                };
                gif.applicationExtensions.push(applicationExtension);
                break;
            }
        case 254:
            {
                gif.comments.push([
                    getFrameIndex(false),
                    byteStream.readSubBlocks()
                ]);
                break;
            }
        case 1:
            {
                if (gif.globalColorTable.length === 0) {
                    throw new EvalError("plain text extension without global color table");
                }
                byteStream.pos++;
                gif.frames[getFrameIndex(false)].plainTextData = {
                    left: byteStream.nextTwoBytes(),
                    top: byteStream.nextTwoBytes(),
                    width: byteStream.nextTwoBytes(),
                    height: byteStream.nextTwoBytes(),
                    charSize: {
                        width: byteStream.nextTwoBytes(),
                        height: byteStream.nextTwoBytes()
                    },
                    foregroundColor: byteStream.nextByte(),
                    backgroundColor: byteStream.nextByte(),
                    text: byteStream.readSubBlocks()
                };
                break;
            }
        default:
            byteStream.skipSubBlocks();
            break;
    }
}
async function parseImageBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback) {
    const frame = gif.frames[getFrameIndex(true)];
    frame.left = byteStream.nextTwoBytes();
    frame.top = byteStream.nextTwoBytes();
    frame.width = byteStream.nextTwoBytes();
    frame.height = byteStream.nextTwoBytes();
    const packedByte = byteStream.nextByte(), localColorTableFlag = (packedByte & 0x80) === 0x80, interlacedFlag = (packedByte & 0x40) === 0x40;
    frame.sortFlag = (packedByte & 0x20) === 0x20;
    frame.reserved = (packedByte & 0x18) >>> 3;
    const localColorCount = 1 << (packedByte & 7) + 1;
    if (localColorTableFlag) {
        frame.localColorTable = parseColorTable(byteStream, localColorCount);
    }
    const getColor = (index)=>{
        const { r, g, b } = (localColorTableFlag ? frame.localColorTable : gif.globalColorTable)[index];
        return {
            r,
            g,
            b,
            a: index === getTransparencyIndex(null) ? avgAlpha ? ~~((r + g + b) / 3) : 0 : 255
        };
    };
    const image = (()=>{
        try {
            return new ImageData(frame.width, frame.height, {
                colorSpace: "srgb"
            });
        } catch (error) {
            if (error instanceof DOMException && error.name === "IndexSizeError") {
                return null;
            }
            throw error;
        }
    })();
    if (image == null) {
        throw new EvalError("GIF frame size is to large");
    }
    const minCodeSize = byteStream.nextByte(), imageData = byteStream.readSubBlocksBin(), clearCode = 1 << minCodeSize;
    const readBits = (pos, len)=>{
        const bytePos = pos >>> 3, bitPos = pos & 7;
        return (imageData[bytePos] + (imageData[bytePos + 1] << 8) + (imageData[bytePos + 2] << 16) & (1 << len) - 1 << bitPos) >>> bitPos;
    };
    if (interlacedFlag) {
        for(let code = 0, size = minCodeSize + 1, pos = 0, dic = [
            [
                0
            ]
        ], pass = 0; pass < 4; pass++){
            if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$image$2f$esm$2f$GifUtils$2f$Constants$2e$js__$5b$client$5d$__$28$ecmascript$29$__["InterlaceOffsets"][pass] < frame.height) {
                for(let pixelPos = 0, lineIndex = 0;;){
                    const last = code;
                    code = readBits(pos, size);
                    pos += size + 1;
                    if (code === clearCode) {
                        size = minCodeSize + 1;
                        dic.length = clearCode + 2;
                        for(let i = 0; i < dic.length; i++){
                            dic[i] = i < clearCode ? [
                                i
                            ] : [];
                        }
                    } else {
                        if (code >= dic.length) {
                            dic.push(dic[last].concat(dic[last][0]));
                        } else if (last !== clearCode) {
                            dic.push(dic[last].concat(dic[code][0]));
                        }
                        for(let i = 0; i < dic[code].length; i++){
                            const { r, g, b, a } = getColor(dic[code][i]);
                            image.data.set([
                                r,
                                g,
                                b,
                                a
                            ], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$image$2f$esm$2f$GifUtils$2f$Constants$2e$js__$5b$client$5d$__$28$ecmascript$29$__["InterlaceOffsets"][pass] * frame.width + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$image$2f$esm$2f$GifUtils$2f$Constants$2e$js__$5b$client$5d$__$28$ecmascript$29$__["InterlaceSteps"][pass] * lineIndex + pixelPos % (frame.width * 4));
                            pixelPos += 4;
                        }
                        if (dic.length === 1 << size && size < 0xc) {
                            size++;
                        }
                    }
                    if (pixelPos === frame.width * 4 * (lineIndex + 1)) {
                        lineIndex++;
                        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$image$2f$esm$2f$GifUtils$2f$Constants$2e$js__$5b$client$5d$__$28$ecmascript$29$__["InterlaceOffsets"][pass] + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$image$2f$esm$2f$GifUtils$2f$Constants$2e$js__$5b$client$5d$__$28$ecmascript$29$__["InterlaceSteps"][pass] * lineIndex >= frame.height) {
                            break;
                        }
                    }
                }
            }
            progressCallback?.(byteStream.pos / (byteStream.data.length - 1), getFrameIndex(false) + 1, image, {
                x: frame.left,
                y: frame.top
            }, {
                width: gif.width,
                height: gif.height
            });
        }
        frame.image = image;
        frame.bitmap = await createImageBitmap(image);
    } else {
        for(let code = 0, size = minCodeSize + 1, pos = 0, dic = [
            [
                0
            ]
        ], pixelPos = -4;;){
            const last = code;
            code = readBits(pos, size);
            pos += size;
            if (code === clearCode) {
                size = minCodeSize + 1;
                dic.length = clearCode + 2;
                for(let i = 0; i < dic.length; i++){
                    dic[i] = i < clearCode ? [
                        i
                    ] : [];
                }
            } else {
                if (code === clearCode + 1) {
                    break;
                }
                if (code >= dic.length) {
                    dic.push(dic[last].concat(dic[last][0]));
                } else if (last !== clearCode) {
                    dic.push(dic[last].concat(dic[code][0]));
                }
                for(let i = 0; i < dic[code].length; i++){
                    const { r, g, b, a } = getColor(dic[code][i]);
                    image.data.set([
                        r,
                        g,
                        b,
                        a
                    ], pixelPos += 4);
                }
                if (dic.length >= 1 << size && size < 0xc) {
                    size++;
                }
            }
        }
        frame.image = image;
        frame.bitmap = await createImageBitmap(image);
        progressCallback?.((byteStream.pos + 1) / byteStream.data.length, getFrameIndex(false) + 1, frame.image, {
            x: frame.left,
            y: frame.top
        }, {
            width: gif.width,
            height: gif.height
        });
    }
}
async function parseBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback) {
    switch(byteStream.nextByte()){
        case 59:
            return true;
        case 44:
            await parseImageBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback);
            break;
        case 33:
            await parseExtensionBlock(byteStream, gif, getFrameIndex, getTransparencyIndex);
            break;
        default:
            throw new EvalError("undefined block found");
    }
    return false;
}
function getGIFLoopAmount(gif) {
    for (const extension of gif.applicationExtensions){
        if (extension.identifier + extension.authenticationCode !== "NETSCAPE2.0") {
            continue;
        }
        return extension.data[1] + (extension.data[2] << 8);
    }
    return NaN;
}
async function decodeGIF(gifURL, progressCallback, avgAlpha) {
    if (!avgAlpha) avgAlpha = false;
    const res = await fetch(gifURL);
    if (!res.ok && res.status === 404) {
        throw new EvalError("file not found");
    }
    const buffer = await res.arrayBuffer();
    const gif = {
        width: 0,
        height: 0,
        totalTime: 0,
        colorRes: 0,
        pixelAspectRatio: 0,
        frames: [],
        sortFlag: false,
        globalColorTable: [],
        backgroundImage: new ImageData(1, 1, {
            colorSpace: "srgb"
        }),
        comments: [],
        applicationExtensions: []
    }, byteStream = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$image$2f$esm$2f$GifUtils$2f$ByteStream$2e$js__$5b$client$5d$__$28$ecmascript$29$__["ByteStream"](new Uint8ClampedArray(buffer));
    if (byteStream.getString(6) !== "GIF89a") {
        throw new Error("not a supported GIF file");
    }
    gif.width = byteStream.nextTwoBytes();
    gif.height = byteStream.nextTwoBytes();
    const packedByte = byteStream.nextByte(), globalColorTableFlag = (packedByte & 0x80) === 0x80;
    gif.colorRes = (packedByte & 0x70) >>> 4;
    gif.sortFlag = (packedByte & 8) === 8;
    const globalColorCount = 1 << (packedByte & 7) + 1, backgroundColorIndex = byteStream.nextByte();
    gif.pixelAspectRatio = byteStream.nextByte();
    if (gif.pixelAspectRatio !== 0) {
        gif.pixelAspectRatio = (gif.pixelAspectRatio + 0xf) / 0x40;
    }
    if (globalColorTableFlag) {
        gif.globalColorTable = parseColorTable(byteStream, globalColorCount);
    }
    const backgroundImage = (()=>{
        try {
            return new ImageData(gif.width, gif.height, {
                colorSpace: "srgb"
            });
        } catch (error) {
            if (error instanceof DOMException && error.name === "IndexSizeError") {
                return null;
            }
            throw error;
        }
    })();
    if (backgroundImage == null) {
        throw new Error("GIF frame size is to large");
    }
    const { r, g, b } = gif.globalColorTable[backgroundColorIndex];
    backgroundImage.data.set(globalColorTableFlag ? [
        r,
        g,
        b,
        255
    ] : [
        0,
        0,
        0,
        0
    ]);
    for(let i = 4; i < backgroundImage.data.length; i *= 2){
        backgroundImage.data.copyWithin(i, 0, i);
    }
    gif.backgroundImage = backgroundImage;
    let frameIndex = -1, incrementFrameIndex = true, transparencyIndex = -1;
    const getframeIndex = (increment)=>{
        if (increment) {
            incrementFrameIndex = true;
        }
        return frameIndex;
    };
    const getTransparencyIndex = (newValue)=>{
        if (newValue != null) {
            transparencyIndex = newValue;
        }
        return transparencyIndex;
    };
    try {
        do {
            if (incrementFrameIndex) {
                gif.frames.push({
                    left: 0,
                    top: 0,
                    width: 0,
                    height: 0,
                    disposalMethod: 0,
                    image: new ImageData(1, 1, {
                        colorSpace: "srgb"
                    }),
                    plainTextData: null,
                    userInputDelayFlag: false,
                    delayTime: 0,
                    sortFlag: false,
                    localColorTable: [],
                    reserved: 0,
                    GCreserved: 0
                });
                frameIndex++;
                transparencyIndex = -1;
                incrementFrameIndex = false;
            }
        }while (!await parseBlock(byteStream, gif, avgAlpha, getframeIndex, getTransparencyIndex, progressCallback))
        gif.frames.length--;
        for (const frame of gif.frames){
            if (frame.userInputDelayFlag && frame.delayTime === 0) {
                gif.totalTime = Infinity;
                break;
            }
            gif.totalTime += frame.delayTime;
        }
        return gif;
    } catch (error) {
        if (error instanceof EvalError) {
            throw new Error(`error while parsing frame ${frameIndex} "${error.message}"`);
        }
        throw error;
    }
}
}}),
"[project]/node_modules/tsparticles-shape-image/esm/Utils.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "downloadSvgImage": (()=>downloadSvgImage),
    "loadGifImage": (()=>loadGifImage),
    "loadImage": (()=>loadImage),
    "replaceImageColor": (()=>replaceImageColor)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Constants$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Core/Utils/Constants.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/Utils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$ColorUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/ColorUtils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$image$2f$esm$2f$GifUtils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-shape-image/esm/GifUtils/Utils.js [client] (ecmascript)");
;
;
const currentColorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\((-?\d+%?[,\s]+){2,3}\s*[\d.]+%?\))|currentcolor/gi;
function replaceColorSvg(imageShape, color, opacity) {
    const { svgData } = imageShape;
    if (!svgData) {
        return "";
    }
    const colorStyle = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$ColorUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getStyleFromHsl"])(color, opacity);
    if (svgData.includes("fill")) {
        return svgData.replace(currentColorRegex, ()=>colorStyle);
    }
    const preFillIndex = svgData.indexOf(">");
    return `${svgData.substring(0, preFillIndex)} fill="${colorStyle}"${svgData.substring(preFillIndex)}`;
}
async function loadImage(image) {
    return new Promise((resolve)=>{
        image.loading = true;
        const img = new Image();
        image.element = img;
        img.addEventListener("load", ()=>{
            image.loading = false;
            resolve();
        });
        img.addEventListener("error", ()=>{
            image.element = undefined;
            image.error = true;
            image.loading = false;
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getLogger"])().error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Constants$2e$js__$5b$client$5d$__$28$ecmascript$29$__["errorPrefix"]} loading image: ${image.source}`);
            resolve();
        });
        img.src = image.source;
    });
}
async function loadGifImage(image) {
    if (image.type !== "gif") {
        await loadImage(image);
        return;
    }
    image.loading = true;
    try {
        image.gifData = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$image$2f$esm$2f$GifUtils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["decodeGIF"])(image.source);
        image.gifLoopCount = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$image$2f$esm$2f$GifUtils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getGIFLoopAmount"])(image.gifData) ?? 0;
        if (image.gifLoopCount === 0) {
            image.gifLoopCount = Infinity;
        }
    } catch  {
        image.error = true;
    }
    image.loading = false;
}
async function downloadSvgImage(image) {
    if (image.type !== "svg") {
        await loadImage(image);
        return;
    }
    image.loading = true;
    const response = await fetch(image.source);
    if (!response.ok) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getLogger"])().error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Constants$2e$js__$5b$client$5d$__$28$ecmascript$29$__["errorPrefix"]} Image not found`);
        image.error = true;
    } else {
        image.svgData = await response.text();
    }
    image.loading = false;
}
function replaceImageColor(image, imageData, color, particle) {
    const svgColoredData = replaceColorSvg(image, color, particle.opacity?.value ?? 1), imageRes = {
        color,
        gif: imageData.gif,
        data: {
            ...image,
            svgData: svgColoredData
        },
        loaded: false,
        ratio: imageData.width / imageData.height,
        replaceColor: imageData.replaceColor ?? imageData.replace_color,
        source: imageData.src
    };
    return new Promise((resolve)=>{
        const svg = new Blob([
            svgColoredData
        ], {
            type: "image/svg+xml"
        }), domUrl = URL || window.URL || window.webkitURL || window, url = domUrl.createObjectURL(svg), img = new Image();
        img.addEventListener("load", ()=>{
            imageRes.loaded = true;
            imageRes.element = img;
            resolve(imageRes);
            domUrl.revokeObjectURL(url);
        });
        img.addEventListener("error", async ()=>{
            domUrl.revokeObjectURL(url);
            const img2 = {
                ...image,
                error: false,
                loading: true
            };
            await loadImage(img2);
            imageRes.loaded = true;
            imageRes.element = img2.element;
            resolve(imageRes);
        });
        img.src = url;
    });
}
}}),
"[project]/node_modules/tsparticles-shape-image/esm/ImageDrawer.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "ImageDrawer": (()=>ImageDrawer)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Constants$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Core/Utils/Constants.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$image$2f$esm$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-shape-image/esm/Utils.js [client] (ecmascript)");
;
;
class ImageDrawer {
    constructor(engine){
        this.loadImageShape = async (imageShape)=>{
            if (!this._engine.loadImage) {
                throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Constants$2e$js__$5b$client$5d$__$28$ecmascript$29$__["errorPrefix"]} image shape not initialized`);
            }
            await this._engine.loadImage({
                gif: imageShape.gif,
                name: imageShape.name,
                replaceColor: imageShape.replaceColor ?? imageShape.replace_color ?? false,
                src: imageShape.src
            });
        };
        this._engine = engine;
    }
    addImage(image) {
        if (!this._engine.images) {
            this._engine.images = [];
        }
        this._engine.images.push(image);
    }
    draw(context, particle, radius, opacity, delta) {
        const image = particle.image, element = image?.element;
        if (!image) {
            return;
        }
        context.globalAlpha = opacity;
        if (image.gif && image.gifData) {
            const offscreenCanvas = new OffscreenCanvas(image.gifData.width, image.gifData.height), offscreenContext = offscreenCanvas.getContext("2d");
            if (!offscreenContext) {
                throw new Error("could not create offscreen canvas context");
            }
            offscreenContext.imageSmoothingQuality = "low";
            offscreenContext.imageSmoothingEnabled = false;
            offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);
            if (particle.gifLoopCount === undefined) {
                particle.gifLoopCount = image.gifLoopCount ?? 0;
            }
            let frameIndex = particle.gifFrame ?? 0;
            const pos = {
                x: -image.gifData.width * 0.5,
                y: -image.gifData.height * 0.5
            }, frame = image.gifData.frames[frameIndex];
            if (particle.gifTime === undefined) {
                particle.gifTime = 0;
            }
            if (!frame.bitmap) {
                return;
            }
            context.scale(radius / image.gifData.width, radius / image.gifData.height);
            switch(frame.disposalMethod){
                case 4:
                case 5:
                case 6:
                case 7:
                case 0:
                    offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);
                    context.drawImage(offscreenCanvas, pos.x, pos.y);
                    offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);
                    break;
                case 1:
                    offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);
                    context.drawImage(offscreenCanvas, pos.x, pos.y);
                    break;
                case 2:
                    offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);
                    context.drawImage(offscreenCanvas, pos.x, pos.y);
                    offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);
                    if (image.gifData.globalColorTable.length === 0) {
                        offscreenContext.putImageData(image.gifData.frames[0].image, pos.x + frame.left, pos.y + frame.top);
                    } else {
                        offscreenContext.putImageData(image.gifData.backgroundImage, pos.x, pos.y);
                    }
                    break;
                case 3:
                    {
                        const previousImageData = offscreenContext.getImageData(0, 0, offscreenCanvas.width, offscreenCanvas.height);
                        offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);
                        context.drawImage(offscreenCanvas, pos.x, pos.y);
                        offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);
                        offscreenContext.putImageData(previousImageData, 0, 0);
                    }
                    break;
            }
            particle.gifTime += delta.value;
            if (particle.gifTime > frame.delayTime) {
                particle.gifTime -= frame.delayTime;
                if (++frameIndex >= image.gifData.frames.length) {
                    if (--particle.gifLoopCount <= 0) {
                        return;
                    }
                    frameIndex = 0;
                    offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);
                }
                particle.gifFrame = frameIndex;
            }
            context.scale(image.gifData.width / radius, image.gifData.height / radius);
        } else if (element) {
            const ratio = image.ratio, pos = {
                x: -radius,
                y: -radius
            };
            context.drawImage(element, pos.x, pos.y, radius * 2, radius * 2 / ratio);
        }
        context.globalAlpha = 1;
    }
    getSidesCount() {
        return 12;
    }
    async init(container) {
        const options = container.actualOptions;
        if (!options.preload || !this._engine.loadImage) {
            return;
        }
        for (const imageData of options.preload){
            await this._engine.loadImage(imageData);
        }
    }
    loadShape(particle) {
        if (particle.shape !== "image" && particle.shape !== "images") {
            return;
        }
        if (!this._engine.images) {
            this._engine.images = [];
        }
        const imageData = particle.shapeData, image = this._engine.images.find((t)=>t.name === imageData.name || t.source === imageData.src);
        if (!image) {
            this.loadImageShape(imageData).then(()=>{
                this.loadShape(particle);
            });
        }
    }
    particleInit(container, particle) {
        if (particle.shape !== "image" && particle.shape !== "images") {
            return;
        }
        if (!this._engine.images) {
            this._engine.images = [];
        }
        const images = this._engine.images, imageData = particle.shapeData, color = particle.getFillColor(), image = images.find((t)=>t.name === imageData.name || t.source === imageData.src);
        if (!image) {
            return;
        }
        const replaceColor = imageData.replaceColor ?? imageData.replace_color ?? image.replaceColor;
        if (image.loading) {
            setTimeout(()=>{
                this.particleInit(container, particle);
            });
            return;
        }
        (async ()=>{
            let imageRes;
            if (image.svgData && color) {
                imageRes = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$image$2f$esm$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["replaceImageColor"])(image, imageData, color, particle);
            } else {
                imageRes = {
                    color,
                    data: image,
                    element: image.element,
                    gif: image.gif,
                    gifData: image.gifData,
                    gifLoopCount: image.gifLoopCount,
                    loaded: true,
                    ratio: imageData.width && imageData.height ? imageData.width / imageData.height : image.ratio ?? 1,
                    replaceColor: replaceColor,
                    source: imageData.src
                };
            }
            if (!imageRes.ratio) {
                imageRes.ratio = 1;
            }
            const fill = imageData.fill ?? particle.fill, close = imageData.close ?? particle.close, imageShape = {
                image: imageRes,
                fill,
                close
            };
            particle.image = imageShape.image;
            particle.fill = imageShape.fill;
            particle.close = imageShape.close;
        })();
    }
}
}}),
"[project]/node_modules/tsparticles-shape-image/esm/Options/Classes/Preload.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Preload": (()=>Preload)
});
class Preload {
    constructor(){
        this.src = "";
        this.gif = false;
    }
    load(data) {
        if (!data) {
            return;
        }
        if (data.gif !== undefined) {
            this.gif = data.gif;
        }
        if (data.height !== undefined) {
            this.height = data.height;
        }
        if (data.name !== undefined) {
            this.name = data.name;
        }
        if (data.replaceColor !== undefined) {
            this.replaceColor = data.replaceColor;
        }
        if (data.src !== undefined) {
            this.src = data.src;
        }
        if (data.width !== undefined) {
            this.width = data.width;
        }
    }
}
}}),
"[project]/node_modules/tsparticles-shape-image/esm/ImagePreloader.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "ImagePreloaderPlugin": (()=>ImagePreloaderPlugin)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$image$2f$esm$2f$Options$2f$Classes$2f$Preload$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-shape-image/esm/Options/Classes/Preload.js [client] (ecmascript)");
;
class ImagePreloaderPlugin {
    constructor(engine){
        this.id = "imagePreloader";
        this._engine = engine;
    }
    getPlugin() {
        return {};
    }
    loadOptions(options, source) {
        if (!source || !source.preload) {
            return;
        }
        if (!options.preload) {
            options.preload = [];
        }
        const preloadOptions = options.preload;
        for (const item of source.preload){
            const existing = preloadOptions.find((t)=>t.name === item.name || t.src === item.src);
            if (existing) {
                existing.load(item);
            } else {
                const preload = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$image$2f$esm$2f$Options$2f$Classes$2f$Preload$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Preload"]();
                preload.load(item);
                preloadOptions.push(preload);
            }
        }
    }
    needsPlugin() {
        return true;
    }
}
}}),
"[project]/node_modules/tsparticles-shape-image/esm/index.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "loadImageShape": (()=>loadImageShape)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$image$2f$esm$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-shape-image/esm/Utils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$image$2f$esm$2f$ImageDrawer$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-shape-image/esm/ImageDrawer.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$image$2f$esm$2f$ImagePreloader$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-shape-image/esm/ImagePreloader.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Constants$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Core/Utils/Constants.js [client] (ecmascript)");
;
;
;
;
function addLoadImageToEngine(engine) {
    if (engine.loadImage) {
        return;
    }
    engine.loadImage = async (data)=>{
        if (!data.name && !data.src) {
            throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Constants$2e$js__$5b$client$5d$__$28$ecmascript$29$__["errorPrefix"]} no image source provided`);
        }
        if (!engine.images) {
            engine.images = [];
        }
        if (engine.images.find((t)=>t.name === data.name || t.source === data.src)) {
            return;
        }
        try {
            const image = {
                gif: data.gif ?? false,
                name: data.name ?? data.src,
                source: data.src,
                type: data.src.substring(data.src.length - 3),
                error: false,
                loading: true,
                replaceColor: data.replaceColor,
                ratio: data.width && data.height ? data.width / data.height : undefined
            };
            engine.images.push(image);
            const imageFunc = data.gif ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$image$2f$esm$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["loadGifImage"] : data.replaceColor ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$image$2f$esm$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["downloadSvgImage"] : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$image$2f$esm$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["loadImage"];
            await imageFunc(image);
        } catch  {
            throw new Error(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Constants$2e$js__$5b$client$5d$__$28$ecmascript$29$__["errorPrefix"]} ${data.name ?? data.src} not found`);
        }
    };
}
async function loadImageShape(engine, refresh = true) {
    addLoadImageToEngine(engine);
    const preloader = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$image$2f$esm$2f$ImagePreloader$2e$js__$5b$client$5d$__$28$ecmascript$29$__["ImagePreloaderPlugin"](engine);
    await engine.addPlugin(preloader, refresh);
    await engine.addShape([
        "image",
        "images"
    ], new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$image$2f$esm$2f$ImageDrawer$2e$js__$5b$client$5d$__$28$ecmascript$29$__["ImageDrawer"](engine), refresh);
}
}}),
"[project]/node_modules/tsparticles-updater-life/esm/Options/Classes/LifeDelay.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "LifeDelay": (()=>LifeDelay)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Options$2f$Classes$2f$ValueWithRandom$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Options/Classes/ValueWithRandom.js [client] (ecmascript)");
;
class LifeDelay extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Options$2f$Classes$2f$ValueWithRandom$2e$js__$5b$client$5d$__$28$ecmascript$29$__["ValueWithRandom"] {
    constructor(){
        super();
        this.sync = false;
    }
    load(data) {
        if (!data) {
            return;
        }
        super.load(data);
        if (data.sync !== undefined) {
            this.sync = data.sync;
        }
    }
}
}}),
"[project]/node_modules/tsparticles-updater-life/esm/Options/Classes/LifeDuration.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "LifeDuration": (()=>LifeDuration)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Options$2f$Classes$2f$ValueWithRandom$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Options/Classes/ValueWithRandom.js [client] (ecmascript)");
;
class LifeDuration extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Options$2f$Classes$2f$ValueWithRandom$2e$js__$5b$client$5d$__$28$ecmascript$29$__["ValueWithRandom"] {
    constructor(){
        super();
        this.random.minimumValue = 0.0001;
        this.sync = false;
    }
    load(data) {
        if (!data) {
            return;
        }
        super.load(data);
        if (data.sync !== undefined) {
            this.sync = data.sync;
        }
    }
}
}}),
"[project]/node_modules/tsparticles-updater-life/esm/Options/Classes/Life.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Life": (()=>Life)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$life$2f$esm$2f$Options$2f$Classes$2f$LifeDelay$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-updater-life/esm/Options/Classes/LifeDelay.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$life$2f$esm$2f$Options$2f$Classes$2f$LifeDuration$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-updater-life/esm/Options/Classes/LifeDuration.js [client] (ecmascript)");
;
;
class Life {
    constructor(){
        this.count = 0;
        this.delay = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$life$2f$esm$2f$Options$2f$Classes$2f$LifeDelay$2e$js__$5b$client$5d$__$28$ecmascript$29$__["LifeDelay"]();
        this.duration = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$life$2f$esm$2f$Options$2f$Classes$2f$LifeDuration$2e$js__$5b$client$5d$__$28$ecmascript$29$__["LifeDuration"]();
    }
    load(data) {
        if (!data) {
            return;
        }
        if (data.count !== undefined) {
            this.count = data.count;
        }
        this.delay.load(data.delay);
        this.duration.load(data.duration);
    }
}
}}),
"[project]/node_modules/tsparticles-updater-life/esm/LifeUpdater.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "LifeUpdater": (()=>LifeUpdater)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/NumberUtils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$life$2f$esm$2f$Options$2f$Classes$2f$Life$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-updater-life/esm/Options/Classes/Life.js [client] (ecmascript)");
;
;
class LifeUpdater {
    constructor(container){
        this.container = container;
    }
    init(particle) {
        const container = this.container, particlesOptions = particle.options, lifeOptions = particlesOptions.life;
        if (!lifeOptions) {
            return;
        }
        particle.life = {
            delay: container.retina.reduceFactor ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getRangeValue"])(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getRandom"])()) / container.retina.reduceFactor * 1000 : 0,
            delayTime: 0,
            duration: container.retina.reduceFactor ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getRangeValue"])(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getRandom"])()) / container.retina.reduceFactor * 1000 : 0,
            time: 0,
            count: lifeOptions.count
        };
        if (particle.life.duration <= 0) {
            particle.life.duration = -1;
        }
        if (particle.life.count <= 0) {
            particle.life.count = -1;
        }
        if (particle.life) {
            particle.spawning = particle.life.delay > 0;
        }
    }
    isEnabled(particle) {
        return !particle.destroyed;
    }
    loadOptions(options, ...sources) {
        if (!options.life) {
            options.life = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$life$2f$esm$2f$Options$2f$Classes$2f$Life$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Life"]();
        }
        for (const source of sources){
            options.life.load(source?.life);
        }
    }
    update(particle, delta) {
        if (!this.isEnabled(particle) || !particle.life) {
            return;
        }
        const life = particle.life;
        let justSpawned = false;
        if (particle.spawning) {
            life.delayTime += delta.value;
            if (life.delayTime >= particle.life.delay) {
                justSpawned = true;
                particle.spawning = false;
                life.delayTime = 0;
                life.time = 0;
            } else {
                return;
            }
        }
        if (life.duration === -1) {
            return;
        }
        if (particle.spawning) {
            return;
        }
        if (justSpawned) {
            life.time = 0;
        } else {
            life.time += delta.value;
        }
        if (life.time < life.duration) {
            return;
        }
        life.time = 0;
        if (particle.life.count > 0) {
            particle.life.count--;
        }
        if (particle.life.count === 0) {
            particle.destroy();
            return;
        }
        const canvasSize = this.container.canvas.size, widthRange = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["setRangeValue"])(0, canvasSize.width), heightRange = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["setRangeValue"])(0, canvasSize.width);
        particle.position.x = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["randomInRange"])(widthRange);
        particle.position.y = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["randomInRange"])(heightRange);
        particle.spawning = true;
        life.delayTime = 0;
        life.time = 0;
        particle.reset();
        const lifeOptions = particle.options.life;
        if (lifeOptions) {
            life.delay = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getRangeValue"])(lifeOptions.delay.value) * 1000;
            life.duration = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getRangeValue"])(lifeOptions.duration.value) * 1000;
        }
    }
}
}}),
"[project]/node_modules/tsparticles-updater-life/esm/index.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "loadLifeUpdater": (()=>loadLifeUpdater)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$life$2f$esm$2f$LifeUpdater$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-updater-life/esm/LifeUpdater.js [client] (ecmascript)");
;
async function loadLifeUpdater(engine, refresh = true) {
    await engine.addParticleUpdater("life", (container)=>new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$life$2f$esm$2f$LifeUpdater$2e$js__$5b$client$5d$__$28$ecmascript$29$__["LifeUpdater"](container), refresh);
}
}}),
"[project]/node_modules/tsparticles-shape-line/esm/LineDrawer.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "LineDrawer": (()=>LineDrawer)
});
class LineDrawer {
    draw(context, particle, radius) {
        const shapeData = particle.shapeData;
        context.moveTo(-radius / 2, 0);
        context.lineTo(radius / 2, 0);
        context.lineCap = shapeData?.cap ?? "butt";
    }
    getSidesCount() {
        return 1;
    }
}
}}),
"[project]/node_modules/tsparticles-shape-line/esm/index.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "loadLineShape": (()=>loadLineShape)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$line$2f$esm$2f$LineDrawer$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-shape-line/esm/LineDrawer.js [client] (ecmascript)");
;
async function loadLineShape(engine, refresh = true) {
    await engine.addShape("line", new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$line$2f$esm$2f$LineDrawer$2e$js__$5b$client$5d$__$28$ecmascript$29$__["LineDrawer"](), refresh);
}
}}),
"[project]/node_modules/tsparticles-move-parallax/esm/ParallaxMover.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "ParallaxMover": (()=>ParallaxMover)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/Utils.js [client] (ecmascript)");
;
class ParallaxMover {
    init() {}
    isEnabled(particle) {
        return !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["isSsr"])() && !particle.destroyed && particle.container.actualOptions.interactivity.events.onHover.parallax.enable;
    }
    move(particle) {
        const container = particle.container, options = container.actualOptions, parallaxOptions = options.interactivity.events.onHover.parallax;
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["isSsr"])() || !parallaxOptions.enable) {
            return;
        }
        const parallaxForce = parallaxOptions.force, mousePos = container.interactivity.mouse.position;
        if (!mousePos) {
            return;
        }
        const canvasSize = container.canvas.size, canvasCenter = {
            x: canvasSize.width / 2,
            y: canvasSize.height / 2
        }, parallaxSmooth = parallaxOptions.smooth, factor = particle.getRadius() / parallaxForce, centerDistance = {
            x: (mousePos.x - canvasCenter.x) * factor,
            y: (mousePos.y - canvasCenter.y) * factor
        }, { offset } = particle;
        offset.x += (centerDistance.x - offset.x) / parallaxSmooth;
        offset.y += (centerDistance.y - offset.y) / parallaxSmooth;
    }
}
}}),
"[project]/node_modules/tsparticles-move-parallax/esm/index.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "loadParallaxMover": (()=>loadParallaxMover)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$move$2d$parallax$2f$esm$2f$ParallaxMover$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-move-parallax/esm/ParallaxMover.js [client] (ecmascript)");
;
async function loadParallaxMover(engine, refresh = true) {
    await engine.addMover("parallax", ()=>new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$move$2d$parallax$2f$esm$2f$ParallaxMover$2e$js__$5b$client$5d$__$28$ecmascript$29$__["ParallaxMover"](), refresh);
}
}}),
"[project]/node_modules/tsparticles-interaction-particles-attract/esm/Attractor.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Attractor": (()=>Attractor)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$ParticlesInteractorBase$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Core/Utils/ParticlesInteractorBase.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/NumberUtils.js [client] (ecmascript)");
;
class Attractor extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$ParticlesInteractorBase$2e$js__$5b$client$5d$__$28$ecmascript$29$__["ParticlesInteractorBase"] {
    constructor(container){
        super(container);
    }
    clear() {}
    init() {}
    async interact(p1) {
        const container = this.container, distance = p1.retina.attractDistance ?? container.retina.attractDistance, pos1 = p1.getPosition(), query = container.particles.quadTree.queryCircle(pos1, distance);
        for (const p2 of query){
            if (p1 === p2 || !p2.options.move.attract.enable || p2.destroyed || p2.spawning) {
                continue;
            }
            const pos2 = p2.getPosition(), { dx, dy } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getDistances"])(pos1, pos2), rotate = p1.options.move.attract.rotate, ax = dx / (rotate.x * 1000), ay = dy / (rotate.y * 1000), p1Factor = p2.size.value / p1.size.value, p2Factor = 1 / p1Factor;
            p1.velocity.x -= ax * p1Factor;
            p1.velocity.y -= ay * p1Factor;
            p2.velocity.x += ax * p2Factor;
            p2.velocity.y += ay * p2Factor;
        }
    }
    isEnabled(particle) {
        return particle.options.move.attract.enable;
    }
    reset() {}
}
}}),
"[project]/node_modules/tsparticles-interaction-particles-attract/esm/index.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "loadParticlesAttractInteraction": (()=>loadParticlesAttractInteraction)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$particles$2d$attract$2f$esm$2f$Attractor$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-particles-attract/esm/Attractor.js [client] (ecmascript)");
;
async function loadParticlesAttractInteraction(engine, refresh = true) {
    await engine.addInteractor("particlesAttract", (container)=>new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$particles$2d$attract$2f$esm$2f$Attractor$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Attractor"](container), refresh);
}
}}),
"[project]/node_modules/tsparticles-interaction-particles-collisions/esm/Absorb.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "absorb": (()=>absorb)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/NumberUtils.js [client] (ecmascript)");
;
function updateAbsorb(p1, r1, p2, r2, delta, pixelRatio) {
    const factor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["clamp"])(p1.options.collisions.absorb.speed * delta.factor / 10, 0, r2);
    p1.size.value += factor / 2;
    p2.size.value -= factor;
    if (r2 <= pixelRatio) {
        p2.size.value = 0;
        p2.destroy();
    }
}
function absorb(p1, p2, delta, pixelRatio) {
    const r1 = p1.getRadius(), r2 = p2.getRadius();
    if (r1 === undefined && r2 !== undefined) {
        p1.destroy();
    } else if (r1 !== undefined && r2 === undefined) {
        p2.destroy();
    } else if (r1 !== undefined && r2 !== undefined) {
        if (r1 >= r2) {
            updateAbsorb(p1, r1, p2, r2, delta, pixelRatio);
        } else {
            updateAbsorb(p2, r2, p1, r1, delta, pixelRatio);
        }
    }
}
}}),
"[project]/node_modules/tsparticles-interaction-particles-collisions/esm/Bounce.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "bounce": (()=>bounce)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/Utils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/NumberUtils.js [client] (ecmascript)");
;
const fixBounceSpeed = (p)=>{
    if (p.collisionMaxSpeed === undefined) {
        p.collisionMaxSpeed = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getRangeValue"])(p.options.collisions.maxSpeed);
    }
    if (p.velocity.length > p.collisionMaxSpeed) {
        p.velocity.length = p.collisionMaxSpeed;
    }
};
function bounce(p1, p2) {
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["circleBounce"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["circleBounceDataFromParticle"])(p1), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["circleBounceDataFromParticle"])(p2));
    fixBounceSpeed(p1);
    fixBounceSpeed(p2);
}
}}),
"[project]/node_modules/tsparticles-interaction-particles-collisions/esm/Destroy.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "destroy": (()=>destroy)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$particles$2d$collisions$2f$esm$2f$Bounce$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-particles-collisions/esm/Bounce.js [client] (ecmascript)");
;
function destroy(p1, p2) {
    if (!p1.unbreakable && !p2.unbreakable) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$particles$2d$collisions$2f$esm$2f$Bounce$2e$js__$5b$client$5d$__$28$ecmascript$29$__["bounce"])(p1, p2);
    }
    if (p1.getRadius() === undefined && p2.getRadius() !== undefined) {
        p1.destroy();
    } else if (p1.getRadius() !== undefined && p2.getRadius() === undefined) {
        p2.destroy();
    } else if (p1.getRadius() !== undefined && p2.getRadius() !== undefined) {
        const deleteP = p1.getRadius() >= p2.getRadius() ? p2 : p1;
        deleteP.destroy();
    }
}
}}),
"[project]/node_modules/tsparticles-interaction-particles-collisions/esm/ResolveCollision.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "resolveCollision": (()=>resolveCollision)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$particles$2d$collisions$2f$esm$2f$Absorb$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-particles-collisions/esm/Absorb.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$particles$2d$collisions$2f$esm$2f$Bounce$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-particles-collisions/esm/Bounce.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$particles$2d$collisions$2f$esm$2f$Destroy$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-particles-collisions/esm/Destroy.js [client] (ecmascript)");
;
;
;
function resolveCollision(p1, p2, delta, pixelRatio) {
    switch(p1.options.collisions.mode){
        case "absorb":
            {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$particles$2d$collisions$2f$esm$2f$Absorb$2e$js__$5b$client$5d$__$28$ecmascript$29$__["absorb"])(p1, p2, delta, pixelRatio);
                break;
            }
        case "bounce":
            {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$particles$2d$collisions$2f$esm$2f$Bounce$2e$js__$5b$client$5d$__$28$ecmascript$29$__["bounce"])(p1, p2);
                break;
            }
        case "destroy":
            {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$particles$2d$collisions$2f$esm$2f$Destroy$2e$js__$5b$client$5d$__$28$ecmascript$29$__["destroy"])(p1, p2);
                break;
            }
    }
}
}}),
"[project]/node_modules/tsparticles-interaction-particles-collisions/esm/Collider.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Collider": (()=>Collider)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$ParticlesInteractorBase$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Core/Utils/ParticlesInteractorBase.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/NumberUtils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$particles$2d$collisions$2f$esm$2f$ResolveCollision$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-particles-collisions/esm/ResolveCollision.js [client] (ecmascript)");
;
;
class Collider extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$ParticlesInteractorBase$2e$js__$5b$client$5d$__$28$ecmascript$29$__["ParticlesInteractorBase"] {
    constructor(container){
        super(container);
    }
    clear() {}
    init() {}
    async interact(p1, delta) {
        if (p1.destroyed || p1.spawning) {
            return;
        }
        const container = this.container, pos1 = p1.getPosition(), radius1 = p1.getRadius(), query = container.particles.quadTree.queryCircle(pos1, radius1 * 2);
        for (const p2 of query){
            if (p1 === p2 || !p2.options.collisions.enable || p1.options.collisions.mode !== p2.options.collisions.mode || p2.destroyed || p2.spawning) {
                continue;
            }
            const pos2 = p2.getPosition(), radius2 = p2.getRadius();
            if (Math.abs(Math.round(pos1.z) - Math.round(pos2.z)) > radius1 + radius2) {
                continue;
            }
            const dist = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getDistance"])(pos1, pos2), distP = radius1 + radius2;
            if (dist > distP) {
                continue;
            }
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$particles$2d$collisions$2f$esm$2f$ResolveCollision$2e$js__$5b$client$5d$__$28$ecmascript$29$__["resolveCollision"])(p1, p2, delta, container.retina.pixelRatio);
        }
    }
    isEnabled(particle) {
        return particle.options.collisions.enable;
    }
    reset() {}
}
}}),
"[project]/node_modules/tsparticles-interaction-particles-collisions/esm/index.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "loadParticlesCollisionsInteraction": (()=>loadParticlesCollisionsInteraction)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$particles$2d$collisions$2f$esm$2f$Collider$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-particles-collisions/esm/Collider.js [client] (ecmascript)");
;
async function loadParticlesCollisionsInteraction(engine, refresh = true) {
    await engine.addInteractor("particlesCollisions", (container)=>new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$particles$2d$collisions$2f$esm$2f$Collider$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Collider"](container), refresh);
}
}}),
"[project]/node_modules/tsparticles-interaction-particles-links/esm/CircleWarp.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "CircleWarp": (()=>CircleWarp)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Circle$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Core/Utils/Circle.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Rectangle$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Core/Utils/Rectangle.js [client] (ecmascript)");
;
class CircleWarp extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Circle$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Circle"] {
    constructor(x, y, radius, canvasSize){
        super(x, y, radius);
        this.canvasSize = canvasSize;
        this.canvasSize = {
            ...canvasSize
        };
    }
    contains(point) {
        const { width, height } = this.canvasSize;
        const { x, y } = point;
        return super.contains(point) || super.contains({
            x: x - width,
            y
        }) || super.contains({
            x: x - width,
            y: y - height
        }) || super.contains({
            x,
            y: y - height
        });
    }
    intersects(range) {
        if (super.intersects(range)) {
            return true;
        }
        const rect = range, circle = range, newPos = {
            x: range.position.x - this.canvasSize.width,
            y: range.position.y - this.canvasSize.height
        };
        if (circle.radius !== undefined) {
            const biggerCircle = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Circle$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Circle"](newPos.x, newPos.y, circle.radius * 2);
            return super.intersects(biggerCircle);
        } else if (rect.size !== undefined) {
            const rectSW = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Rectangle$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Rectangle"](newPos.x, newPos.y, rect.size.width * 2, rect.size.height * 2);
            return super.intersects(rectSW);
        }
        return false;
    }
}
}}),
"[project]/node_modules/tsparticles-interaction-particles-links/esm/Options/Classes/LinksShadow.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "LinksShadow": (()=>LinksShadow)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Options$2f$Classes$2f$OptionsColor$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Options/Classes/OptionsColor.js [client] (ecmascript)");
;
class LinksShadow {
    constructor(){
        this.blur = 5;
        this.color = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Options$2f$Classes$2f$OptionsColor$2e$js__$5b$client$5d$__$28$ecmascript$29$__["OptionsColor"]();
        this.color.value = "#000";
        this.enable = false;
    }
    load(data) {
        if (!data) {
            return;
        }
        if (data.blur !== undefined) {
            this.blur = data.blur;
        }
        this.color = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Options$2f$Classes$2f$OptionsColor$2e$js__$5b$client$5d$__$28$ecmascript$29$__["OptionsColor"].create(this.color, data.color);
        if (data.enable !== undefined) {
            this.enable = data.enable;
        }
    }
}
}}),
"[project]/node_modules/tsparticles-interaction-particles-links/esm/Options/Classes/LinksTriangle.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "LinksTriangle": (()=>LinksTriangle)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Options$2f$Classes$2f$OptionsColor$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Options/Classes/OptionsColor.js [client] (ecmascript)");
;
class LinksTriangle {
    constructor(){
        this.enable = false;
        this.frequency = 1;
    }
    load(data) {
        if (!data) {
            return;
        }
        if (data.color !== undefined) {
            this.color = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Options$2f$Classes$2f$OptionsColor$2e$js__$5b$client$5d$__$28$ecmascript$29$__["OptionsColor"].create(this.color, data.color);
        }
        if (data.enable !== undefined) {
            this.enable = data.enable;
        }
        if (data.frequency !== undefined) {
            this.frequency = data.frequency;
        }
        if (data.opacity !== undefined) {
            this.opacity = data.opacity;
        }
    }
}
}}),
"[project]/node_modules/tsparticles-interaction-particles-links/esm/Options/Classes/Links.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Links": (()=>Links)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Options$2f$Classes$2f$OptionsColor$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Options/Classes/OptionsColor.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$particles$2d$links$2f$esm$2f$Options$2f$Classes$2f$LinksShadow$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-particles-links/esm/Options/Classes/LinksShadow.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$particles$2d$links$2f$esm$2f$Options$2f$Classes$2f$LinksTriangle$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-particles-links/esm/Options/Classes/LinksTriangle.js [client] (ecmascript)");
;
;
;
class Links {
    constructor(){
        this.blink = false;
        this.color = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Options$2f$Classes$2f$OptionsColor$2e$js__$5b$client$5d$__$28$ecmascript$29$__["OptionsColor"]();
        this.color.value = "#fff";
        this.consent = false;
        this.distance = 100;
        this.enable = false;
        this.frequency = 1;
        this.opacity = 1;
        this.shadow = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$particles$2d$links$2f$esm$2f$Options$2f$Classes$2f$LinksShadow$2e$js__$5b$client$5d$__$28$ecmascript$29$__["LinksShadow"]();
        this.triangles = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$particles$2d$links$2f$esm$2f$Options$2f$Classes$2f$LinksTriangle$2e$js__$5b$client$5d$__$28$ecmascript$29$__["LinksTriangle"]();
        this.width = 1;
        this.warp = false;
    }
    load(data) {
        if (!data) {
            return;
        }
        if (data.id !== undefined) {
            this.id = data.id;
        }
        if (data.blink !== undefined) {
            this.blink = data.blink;
        }
        this.color = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Options$2f$Classes$2f$OptionsColor$2e$js__$5b$client$5d$__$28$ecmascript$29$__["OptionsColor"].create(this.color, data.color);
        if (data.consent !== undefined) {
            this.consent = data.consent;
        }
        if (data.distance !== undefined) {
            this.distance = data.distance;
        }
        if (data.enable !== undefined) {
            this.enable = data.enable;
        }
        if (data.frequency !== undefined) {
            this.frequency = data.frequency;
        }
        if (data.opacity !== undefined) {
            this.opacity = data.opacity;
        }
        this.shadow.load(data.shadow);
        this.triangles.load(data.triangles);
        if (data.width !== undefined) {
            this.width = data.width;
        }
        if (data.warp !== undefined) {
            this.warp = data.warp;
        }
    }
}
}}),
"[project]/node_modules/tsparticles-interaction-particles-links/esm/Linker.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Linker": (()=>Linker)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Circle$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Core/Utils/Circle.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$ParticlesInteractorBase$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Core/Utils/ParticlesInteractorBase.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/NumberUtils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$ColorUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/ColorUtils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$particles$2d$links$2f$esm$2f$CircleWarp$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-particles-links/esm/CircleWarp.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$particles$2d$links$2f$esm$2f$Options$2f$Classes$2f$Links$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-particles-links/esm/Options/Classes/Links.js [client] (ecmascript)");
;
;
;
function getLinkDistance(pos1, pos2, optDistance, canvasSize, warp) {
    const { dx, dy, distance } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getDistances"])(pos1, pos2);
    if (!warp || distance <= optDistance) {
        return distance;
    }
    const absDiffs = {
        x: Math.abs(dx),
        y: Math.abs(dy)
    }, warpDistances = {
        x: Math.min(absDiffs.x, canvasSize.width - absDiffs.x),
        y: Math.min(absDiffs.y, canvasSize.height - absDiffs.y)
    };
    return Math.sqrt(warpDistances.x ** 2 + warpDistances.y ** 2);
}
class Linker extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$ParticlesInteractorBase$2e$js__$5b$client$5d$__$28$ecmascript$29$__["ParticlesInteractorBase"] {
    constructor(container){
        super(container);
        this._setColor = (p1)=>{
            if (!p1.options.links) {
                return;
            }
            const container = this.linkContainer, linksOptions = p1.options.links;
            let linkColor = linksOptions.id === undefined ? container.particles.linksColor : container.particles.linksColors.get(linksOptions.id);
            if (linkColor) {
                return;
            }
            const optColor = linksOptions.color;
            linkColor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$ColorUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getLinkRandomColor"])(optColor, linksOptions.blink, linksOptions.consent);
            if (linksOptions.id === undefined) {
                container.particles.linksColor = linkColor;
            } else {
                container.particles.linksColors.set(linksOptions.id, linkColor);
            }
        };
        this.linkContainer = container;
    }
    clear() {}
    init() {
        this.linkContainer.particles.linksColor = undefined;
        this.linkContainer.particles.linksColors = new Map();
    }
    async interact(p1) {
        if (!p1.options.links) {
            return;
        }
        p1.links = [];
        const pos1 = p1.getPosition(), container = this.container, canvasSize = container.canvas.size;
        if (pos1.x < 0 || pos1.y < 0 || pos1.x > canvasSize.width || pos1.y > canvasSize.height) {
            return;
        }
        const linkOpt1 = p1.options.links, optOpacity = linkOpt1.opacity, optDistance = p1.retina.linksDistance ?? 0, warp = linkOpt1.warp, range = warp ? new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$particles$2d$links$2f$esm$2f$CircleWarp$2e$js__$5b$client$5d$__$28$ecmascript$29$__["CircleWarp"](pos1.x, pos1.y, optDistance, canvasSize) : new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Core$2f$Utils$2f$Circle$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Circle"](pos1.x, pos1.y, optDistance), query = container.particles.quadTree.query(range);
        for (const p2 of query){
            const linkOpt2 = p2.options.links;
            if (p1 === p2 || !linkOpt2?.enable || linkOpt1.id !== linkOpt2.id || p2.spawning || p2.destroyed || !p2.links || p1.links.some((t)=>t.destination === p2) || p2.links.some((t)=>t.destination === p1)) {
                continue;
            }
            const pos2 = p2.getPosition();
            if (pos2.x < 0 || pos2.y < 0 || pos2.x > canvasSize.width || pos2.y > canvasSize.height) {
                continue;
            }
            const distance = getLinkDistance(pos1, pos2, optDistance, canvasSize, warp && linkOpt2.warp);
            if (distance > optDistance) {
                continue;
            }
            const opacityLine = (1 - distance / optDistance) * optOpacity;
            this._setColor(p1);
            p1.links.push({
                destination: p2,
                opacity: opacityLine
            });
        }
    }
    isEnabled(particle) {
        return !!particle.options.links?.enable;
    }
    loadParticlesOptions(options, ...sources) {
        if (!options.links) {
            options.links = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$particles$2d$links$2f$esm$2f$Options$2f$Classes$2f$Links$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Links"]();
        }
        for (const source of sources){
            options.links.load(source?.links ?? source?.lineLinked ?? source?.line_linked);
        }
    }
    reset() {}
}
}}),
"[project]/node_modules/tsparticles-interaction-particles-links/esm/interaction.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "loadLinksInteraction": (()=>loadLinksInteraction)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$particles$2d$links$2f$esm$2f$Linker$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-particles-links/esm/Linker.js [client] (ecmascript)");
;
async function loadLinksInteraction(engine, refresh = true) {
    await engine.addInteractor("particlesLinks", (container)=>new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$particles$2d$links$2f$esm$2f$Linker$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Linker"](container), refresh);
}
}}),
"[project]/node_modules/tsparticles-interaction-particles-links/esm/Utils.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "drawLinkLine": (()=>drawLinkLine),
    "drawLinkTriangle": (()=>drawLinkTriangle),
    "getLinkKey": (()=>getLinkKey),
    "setLinkFrequency": (()=>setLinkFrequency)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$CanvasUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/CanvasUtils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/NumberUtils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$ColorUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/ColorUtils.js [client] (ecmascript)");
;
function drawLinkLine(params) {
    let drawn = false;
    const { begin, end, maxDistance, context, canvasSize, width, backgroundMask, colorLine, opacity, links } = params;
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getDistance"])(begin, end) <= maxDistance) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$CanvasUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["drawLine"])(context, begin, end);
        drawn = true;
    } else if (links.warp) {
        let pi1;
        let pi2;
        const endNE = {
            x: end.x - canvasSize.width,
            y: end.y
        };
        const d1 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getDistances"])(begin, endNE);
        if (d1.distance <= maxDistance) {
            const yi = begin.y - d1.dy / d1.dx * begin.x;
            pi1 = {
                x: 0,
                y: yi
            };
            pi2 = {
                x: canvasSize.width,
                y: yi
            };
        } else {
            const endSW = {
                x: end.x,
                y: end.y - canvasSize.height
            };
            const d2 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getDistances"])(begin, endSW);
            if (d2.distance <= maxDistance) {
                const yi = begin.y - d2.dy / d2.dx * begin.x;
                const xi = -yi / (d2.dy / d2.dx);
                pi1 = {
                    x: xi,
                    y: 0
                };
                pi2 = {
                    x: xi,
                    y: canvasSize.height
                };
            } else {
                const endSE = {
                    x: end.x - canvasSize.width,
                    y: end.y - canvasSize.height
                };
                const d3 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getDistances"])(begin, endSE);
                if (d3.distance <= maxDistance) {
                    const yi = begin.y - d3.dy / d3.dx * begin.x;
                    const xi = -yi / (d3.dy / d3.dx);
                    pi1 = {
                        x: xi,
                        y: yi
                    };
                    pi2 = {
                        x: pi1.x + canvasSize.width,
                        y: pi1.y + canvasSize.height
                    };
                }
            }
        }
        if (pi1 && pi2) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$CanvasUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["drawLine"])(context, begin, pi1);
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$CanvasUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["drawLine"])(context, end, pi2);
            drawn = true;
        }
    }
    if (!drawn) {
        return;
    }
    context.lineWidth = width;
    if (backgroundMask.enable) {
        context.globalCompositeOperation = backgroundMask.composite;
    }
    context.strokeStyle = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$ColorUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getStyleFromRgb"])(colorLine, opacity);
    const { shadow } = links;
    if (shadow.enable) {
        const shadowColor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$ColorUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["rangeColorToRgb"])(shadow.color);
        if (shadowColor) {
            context.shadowBlur = shadow.blur;
            context.shadowColor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$ColorUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getStyleFromRgb"])(shadowColor);
        }
    }
    context.stroke();
}
function drawLinkTriangle(params) {
    const { context, pos1, pos2, pos3, backgroundMask, colorTriangle, opacityTriangle } = params;
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$CanvasUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["drawTriangle"])(context, pos1, pos2, pos3);
    if (backgroundMask.enable) {
        context.globalCompositeOperation = backgroundMask.composite;
    }
    context.fillStyle = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$ColorUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getStyleFromRgb"])(colorTriangle, opacityTriangle);
    context.fill();
}
function getLinkKey(ids) {
    ids.sort((a, b)=>a - b);
    return ids.join("_");
}
function setLinkFrequency(particles, dictionary) {
    const key = getLinkKey(particles.map((t)=>t.id));
    let res = dictionary.get(key);
    if (res === undefined) {
        res = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getRandom"])();
        dictionary.set(key, res);
    }
    return res;
}
}}),
"[project]/node_modules/tsparticles-interaction-particles-links/esm/LinkInstance.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "LinkInstance": (()=>LinkInstance)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/NumberUtils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$ColorUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/ColorUtils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$particles$2d$links$2f$esm$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-particles-links/esm/Utils.js [client] (ecmascript)");
;
;
class LinkInstance {
    constructor(container){
        this.container = container;
        this._drawLinkLine = (p1, link)=>{
            const p1LinksOptions = p1.options.links;
            if (!p1LinksOptions?.enable) {
                return;
            }
            const container = this.container, options = container.actualOptions, p2 = link.destination, pos1 = p1.getPosition(), pos2 = p2.getPosition();
            let opacity = link.opacity;
            container.canvas.draw((ctx)=>{
                let colorLine;
                const twinkle = p1.options.twinkle?.lines;
                if (twinkle?.enable) {
                    const twinkleFreq = twinkle.frequency, twinkleRgb = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$ColorUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["rangeColorToRgb"])(twinkle.color), twinkling = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getRandom"])() < twinkleFreq;
                    if (twinkling && twinkleRgb) {
                        colorLine = twinkleRgb;
                        opacity = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getRangeValue"])(twinkle.opacity);
                    }
                }
                if (!colorLine) {
                    const linkColor = p1LinksOptions.id !== undefined ? container.particles.linksColors.get(p1LinksOptions.id) : container.particles.linksColor;
                    colorLine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$ColorUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getLinkColor"])(p1, p2, linkColor);
                }
                if (!colorLine) {
                    return;
                }
                const width = p1.retina.linksWidth ?? 0, maxDistance = p1.retina.linksDistance ?? 0, { backgroundMask } = options;
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$particles$2d$links$2f$esm$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["drawLinkLine"])({
                    context: ctx,
                    width,
                    begin: pos1,
                    end: pos2,
                    maxDistance,
                    canvasSize: container.canvas.size,
                    links: p1LinksOptions,
                    backgroundMask: backgroundMask,
                    colorLine,
                    opacity
                });
            });
        };
        this._drawLinkTriangle = (p1, link1, link2)=>{
            const linksOptions = p1.options.links;
            if (!linksOptions?.enable) {
                return;
            }
            const triangleOptions = linksOptions.triangles;
            if (!triangleOptions.enable) {
                return;
            }
            const container = this.container, options = container.actualOptions, p2 = link1.destination, p3 = link2.destination, opacityTriangle = triangleOptions.opacity ?? (link1.opacity + link2.opacity) / 2;
            if (opacityTriangle <= 0) {
                return;
            }
            container.canvas.draw((ctx)=>{
                const pos1 = p1.getPosition(), pos2 = p2.getPosition(), pos3 = p3.getPosition(), linksDistance = p1.retina.linksDistance ?? 0;
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getDistance"])(pos1, pos2) > linksDistance || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getDistance"])(pos3, pos2) > linksDistance || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getDistance"])(pos3, pos1) > linksDistance) {
                    return;
                }
                let colorTriangle = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$ColorUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["rangeColorToRgb"])(triangleOptions.color);
                if (!colorTriangle) {
                    const linkColor = linksOptions.id !== undefined ? container.particles.linksColors.get(linksOptions.id) : container.particles.linksColor;
                    colorTriangle = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$ColorUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getLinkColor"])(p1, p2, linkColor);
                }
                if (!colorTriangle) {
                    return;
                }
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$particles$2d$links$2f$esm$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["drawLinkTriangle"])({
                    context: ctx,
                    pos1,
                    pos2,
                    pos3,
                    backgroundMask: options.backgroundMask,
                    colorTriangle,
                    opacityTriangle
                });
            });
        };
        this._drawTriangles = (options, p1, link, p1Links)=>{
            const p2 = link.destination;
            if (!(options.links?.triangles.enable && p2.options.links?.triangles.enable)) {
                return;
            }
            const vertices = p2.links?.filter((t)=>{
                const linkFreq = this._getLinkFrequency(p2, t.destination);
                return p2.options.links && linkFreq <= p2.options.links.frequency && p1Links.findIndex((l)=>l.destination === t.destination) >= 0;
            });
            if (!vertices?.length) {
                return;
            }
            for (const vertex of vertices){
                const p3 = vertex.destination, triangleFreq = this._getTriangleFrequency(p1, p2, p3);
                if (triangleFreq > options.links.triangles.frequency) {
                    continue;
                }
                this._drawLinkTriangle(p1, link, vertex);
            }
        };
        this._getLinkFrequency = (p1, p2)=>{
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$particles$2d$links$2f$esm$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["setLinkFrequency"])([
                p1,
                p2
            ], this._freqs.links);
        };
        this._getTriangleFrequency = (p1, p2, p3)=>{
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$particles$2d$links$2f$esm$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["setLinkFrequency"])([
                p1,
                p2,
                p3
            ], this._freqs.triangles);
        };
        this._freqs = {
            links: new Map(),
            triangles: new Map()
        };
    }
    drawParticle(context, particle) {
        const { links, options } = particle;
        if (!links || links.length <= 0) {
            return;
        }
        const p1Links = links.filter((l)=>options.links && this._getLinkFrequency(particle, l.destination) <= options.links.frequency);
        for (const link of p1Links){
            this._drawTriangles(options, particle, link, p1Links);
            if (link.opacity > 0 && (particle.retina.linksWidth ?? 0) > 0) {
                this._drawLinkLine(particle, link);
            }
        }
    }
    async init() {
        this._freqs.links = new Map();
        this._freqs.triangles = new Map();
    }
    particleCreated(particle) {
        particle.links = [];
        if (!particle.options.links) {
            return;
        }
        const ratio = this.container.retina.pixelRatio, { retina } = particle, { distance, width } = particle.options.links;
        retina.linksDistance = distance * ratio;
        retina.linksWidth = width * ratio;
    }
    particleDestroyed(particle) {
        particle.links = [];
    }
}
}}),
"[project]/node_modules/tsparticles-interaction-particles-links/esm/plugin.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "loadLinksPlugin": (()=>loadLinksPlugin)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$particles$2d$links$2f$esm$2f$LinkInstance$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-particles-links/esm/LinkInstance.js [client] (ecmascript)");
;
class LinksPlugin {
    constructor(){
        this.id = "links";
    }
    getPlugin(container) {
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$particles$2d$links$2f$esm$2f$LinkInstance$2e$js__$5b$client$5d$__$28$ecmascript$29$__["LinkInstance"](container);
    }
    loadOptions() {}
    needsPlugin() {
        return true;
    }
}
async function loadLinksPlugin(engine, refresh = true) {
    const plugin = new LinksPlugin();
    await engine.addPlugin(plugin, refresh);
}
}}),
"[project]/node_modules/tsparticles-interaction-particles-links/esm/index.js [client] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "loadParticlesLinksInteraction": (()=>loadParticlesLinksInteraction)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$particles$2d$links$2f$esm$2f$interaction$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-particles-links/esm/interaction.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$particles$2d$links$2f$esm$2f$plugin$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-particles-links/esm/plugin.js [client] (ecmascript)");
;
;
async function loadParticlesLinksInteraction(engine, refresh = true) {
    await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$particles$2d$links$2f$esm$2f$interaction$2e$js__$5b$client$5d$__$28$ecmascript$29$__["loadLinksInteraction"])(engine, refresh);
    await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$particles$2d$links$2f$esm$2f$plugin$2e$js__$5b$client$5d$__$28$ecmascript$29$__["loadLinksPlugin"])(engine, refresh);
}
;
;
;
;
;
;
}}),
"[project]/node_modules/tsparticles-shape-polygon/esm/PolygonDrawerBase.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "PolygonDrawerBase": (()=>PolygonDrawerBase)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/NumberUtils.js [client] (ecmascript)");
;
class PolygonDrawerBase {
    draw(context, particle, radius) {
        const start = this.getCenter(particle, radius), side = this.getSidesData(particle, radius), sideCount = side.count.numerator * side.count.denominator, decimalSides = side.count.numerator / side.count.denominator, interiorAngleDegrees = 180 * (decimalSides - 2) / decimalSides, interiorAngle = Math.PI - Math.PI * interiorAngleDegrees / 180;
        if (!context) {
            return;
        }
        context.beginPath();
        context.translate(start.x, start.y);
        context.moveTo(0, 0);
        for(let i = 0; i < sideCount; i++){
            context.lineTo(side.length, 0);
            context.translate(side.length, 0);
            context.rotate(interiorAngle);
        }
    }
    getSidesCount(particle) {
        const polygon = particle.shapeData;
        return Math.round((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getRangeValue"])(polygon?.sides ?? polygon?.nb_sides ?? 5));
    }
}
}}),
"[project]/node_modules/tsparticles-shape-polygon/esm/PolygonDrawer.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "PolygonDrawer": (()=>PolygonDrawer)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$polygon$2f$esm$2f$PolygonDrawerBase$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-shape-polygon/esm/PolygonDrawerBase.js [client] (ecmascript)");
;
class PolygonDrawer extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$polygon$2f$esm$2f$PolygonDrawerBase$2e$js__$5b$client$5d$__$28$ecmascript$29$__["PolygonDrawerBase"] {
    getCenter(particle, radius) {
        return {
            x: -radius / (particle.sides / 3.5),
            y: -radius / (2.66 / 3.5)
        };
    }
    getSidesData(particle, radius) {
        const sides = particle.sides;
        return {
            count: {
                denominator: 1,
                numerator: sides
            },
            length: radius * 2.66 / (sides / 3)
        };
    }
}
}}),
"[project]/node_modules/tsparticles-shape-polygon/esm/TriangleDrawer.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "TriangleDrawer": (()=>TriangleDrawer)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$polygon$2f$esm$2f$PolygonDrawerBase$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-shape-polygon/esm/PolygonDrawerBase.js [client] (ecmascript)");
;
class TriangleDrawer extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$polygon$2f$esm$2f$PolygonDrawerBase$2e$js__$5b$client$5d$__$28$ecmascript$29$__["PolygonDrawerBase"] {
    getCenter(particle, radius) {
        return {
            x: -radius,
            y: radius / 1.66
        };
    }
    getSidesCount() {
        return 3;
    }
    getSidesData(particle, radius) {
        return {
            count: {
                denominator: 2,
                numerator: 3
            },
            length: radius * 2
        };
    }
}
}}),
"[project]/node_modules/tsparticles-shape-polygon/esm/index.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "loadGenericPolygonShape": (()=>loadGenericPolygonShape),
    "loadPolygonShape": (()=>loadPolygonShape),
    "loadTriangleShape": (()=>loadTriangleShape)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$polygon$2f$esm$2f$PolygonDrawer$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-shape-polygon/esm/PolygonDrawer.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$polygon$2f$esm$2f$TriangleDrawer$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-shape-polygon/esm/TriangleDrawer.js [client] (ecmascript)");
;
;
async function loadGenericPolygonShape(engine, refresh = true) {
    await engine.addShape("polygon", new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$polygon$2f$esm$2f$PolygonDrawer$2e$js__$5b$client$5d$__$28$ecmascript$29$__["PolygonDrawer"](), refresh);
}
async function loadTriangleShape(engine, refresh = true) {
    await engine.addShape("triangle", new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$polygon$2f$esm$2f$TriangleDrawer$2e$js__$5b$client$5d$__$28$ecmascript$29$__["TriangleDrawer"](), refresh);
}
async function loadPolygonShape(engine, refresh = true) {
    await loadGenericPolygonShape(engine, refresh);
    await loadTriangleShape(engine, refresh);
}
}}),
"[project]/node_modules/tsparticles-updater-rotate/esm/Options/Classes/RotateAnimation.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "RotateAnimation": (()=>RotateAnimation)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/NumberUtils.js [client] (ecmascript)");
;
class RotateAnimation {
    constructor(){
        this.enable = false;
        this.speed = 0;
        this.decay = 0;
        this.sync = false;
    }
    load(data) {
        if (!data) {
            return;
        }
        if (data.enable !== undefined) {
            this.enable = data.enable;
        }
        if (data.speed !== undefined) {
            this.speed = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["setRangeValue"])(data.speed);
        }
        if (data.decay !== undefined) {
            this.decay = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["setRangeValue"])(data.decay);
        }
        if (data.sync !== undefined) {
            this.sync = data.sync;
        }
    }
}
}}),
"[project]/node_modules/tsparticles-updater-rotate/esm/Options/Classes/Rotate.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Rotate": (()=>Rotate)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Options$2f$Classes$2f$ValueWithRandom$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Options/Classes/ValueWithRandom.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$rotate$2f$esm$2f$Options$2f$Classes$2f$RotateAnimation$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-updater-rotate/esm/Options/Classes/RotateAnimation.js [client] (ecmascript)");
;
;
class Rotate extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Options$2f$Classes$2f$ValueWithRandom$2e$js__$5b$client$5d$__$28$ecmascript$29$__["ValueWithRandom"] {
    constructor(){
        super();
        this.animation = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$rotate$2f$esm$2f$Options$2f$Classes$2f$RotateAnimation$2e$js__$5b$client$5d$__$28$ecmascript$29$__["RotateAnimation"]();
        this.direction = "clockwise";
        this.path = false;
        this.value = 0;
    }
    load(data) {
        if (!data) {
            return;
        }
        super.load(data);
        if (data.direction !== undefined) {
            this.direction = data.direction;
        }
        this.animation.load(data.animation);
        if (data.path !== undefined) {
            this.path = data.path;
        }
    }
}
}}),
"[project]/node_modules/tsparticles-updater-rotate/esm/RotateUpdater.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "RotateUpdater": (()=>RotateUpdater)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/NumberUtils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$rotate$2f$esm$2f$Options$2f$Classes$2f$Rotate$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-updater-rotate/esm/Options/Classes/Rotate.js [client] (ecmascript)");
;
;
function updateRotate(particle, delta) {
    const rotate = particle.rotate, rotateOptions = particle.options.rotate;
    if (!rotate || !rotateOptions) {
        return;
    }
    const rotateAnimation = rotateOptions.animation, speed = (rotate.velocity ?? 0) * delta.factor, max = 2 * Math.PI, decay = rotate.decay ?? 1;
    if (!rotateAnimation.enable) {
        return;
    }
    switch(rotate.status){
        case "increasing":
            rotate.value += speed;
            if (rotate.value > max) {
                rotate.value -= max;
            }
            break;
        case "decreasing":
        default:
            rotate.value -= speed;
            if (rotate.value < 0) {
                rotate.value += max;
            }
            break;
    }
    if (rotate.velocity && decay !== 1) {
        rotate.velocity *= decay;
    }
}
class RotateUpdater {
    constructor(container){
        this.container = container;
    }
    init(particle) {
        const rotateOptions = particle.options.rotate;
        if (!rotateOptions) {
            return;
        }
        particle.rotate = {
            enable: rotateOptions.animation.enable,
            value: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getRangeValue"])(rotateOptions.value) * Math.PI / 180
        };
        particle.pathRotation = rotateOptions.path;
        let rotateDirection = rotateOptions.direction;
        if (rotateDirection === "random") {
            const index = Math.floor((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getRandom"])() * 2);
            rotateDirection = index > 0 ? "counter-clockwise" : "clockwise";
        }
        switch(rotateDirection){
            case "counter-clockwise":
            case "counterClockwise":
                particle.rotate.status = "decreasing";
                break;
            case "clockwise":
                particle.rotate.status = "increasing";
                break;
        }
        const rotateAnimation = rotateOptions.animation;
        if (rotateAnimation.enable) {
            particle.rotate.decay = 1 - (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getRangeValue"])(rotateAnimation.decay);
            particle.rotate.velocity = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getRangeValue"])(rotateAnimation.speed) / 360 * this.container.retina.reduceFactor;
            if (!rotateAnimation.sync) {
                particle.rotate.velocity *= (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getRandom"])();
            }
        }
        particle.rotation = particle.rotate.value;
    }
    isEnabled(particle) {
        const rotate = particle.options.rotate;
        if (!rotate) {
            return false;
        }
        return !particle.destroyed && !particle.spawning && rotate.animation.enable && !rotate.path;
    }
    loadOptions(options, ...sources) {
        if (!options.rotate) {
            options.rotate = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$rotate$2f$esm$2f$Options$2f$Classes$2f$Rotate$2e$js__$5b$client$5d$__$28$ecmascript$29$__["Rotate"]();
        }
        for (const source of sources){
            options.rotate.load(source?.rotate);
        }
    }
    update(particle, delta) {
        if (!this.isEnabled(particle)) {
            return;
        }
        updateRotate(particle, delta);
        particle.rotation = particle.rotate?.value ?? 0;
    }
}
}}),
"[project]/node_modules/tsparticles-updater-rotate/esm/index.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "loadRotateUpdater": (()=>loadRotateUpdater)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$rotate$2f$esm$2f$RotateUpdater$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-updater-rotate/esm/RotateUpdater.js [client] (ecmascript)");
;
async function loadRotateUpdater(engine, refresh = true) {
    await engine.addParticleUpdater("rotate", (container)=>new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$rotate$2f$esm$2f$RotateUpdater$2e$js__$5b$client$5d$__$28$ecmascript$29$__["RotateUpdater"](container), refresh);
}
}}),
"[project]/node_modules/tsparticles-shape-square/esm/SquareDrawer.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "SquareDrawer": (()=>SquareDrawer)
});
const fixFactor = Math.sqrt(2);
class SquareDrawer {
    draw(context, particle, radius) {
        const fixedRadius = radius / fixFactor, fixedDiameter = fixedRadius * 2;
        context.rect(-fixedRadius, -fixedRadius, fixedDiameter, fixedDiameter);
    }
    getSidesCount() {
        return 4;
    }
}
}}),
"[project]/node_modules/tsparticles-shape-square/esm/index.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "loadSquareShape": (()=>loadSquareShape)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$square$2f$esm$2f$SquareDrawer$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-shape-square/esm/SquareDrawer.js [client] (ecmascript)");
;
async function loadSquareShape(engine, refresh = true) {
    await engine.addShape([
        "edge",
        "square"
    ], new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$square$2f$esm$2f$SquareDrawer$2e$js__$5b$client$5d$__$28$ecmascript$29$__["SquareDrawer"](), refresh);
}
}}),
"[project]/node_modules/tsparticles-shape-star/esm/StarDrawer.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "StarDrawer": (()=>StarDrawer)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/NumberUtils.js [client] (ecmascript)");
;
class StarDrawer {
    draw(context, particle, radius) {
        const sides = particle.sides, inset = particle.starInset ?? 2;
        context.moveTo(0, 0 - radius);
        for(let i = 0; i < sides; i++){
            context.rotate(Math.PI / sides);
            context.lineTo(0, 0 - radius * inset);
            context.rotate(Math.PI / sides);
            context.lineTo(0, 0 - radius);
        }
    }
    getSidesCount(particle) {
        const star = particle.shapeData;
        return Math.round((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getRangeValue"])(star?.sides ?? star?.nb_sides ?? 5));
    }
    particleInit(container, particle) {
        const star = particle.shapeData, inset = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getRangeValue"])(star?.inset ?? 2);
        particle.starInset = inset;
    }
}
}}),
"[project]/node_modules/tsparticles-shape-star/esm/index.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "loadStarShape": (()=>loadStarShape)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$star$2f$esm$2f$StarDrawer$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-shape-star/esm/StarDrawer.js [client] (ecmascript)");
;
async function loadStarShape(engine, refresh = true) {
    await engine.addShape("star", new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$star$2f$esm$2f$StarDrawer$2e$js__$5b$client$5d$__$28$ecmascript$29$__["StarDrawer"](), refresh);
}
}}),
"[project]/node_modules/tsparticles-updater-stroke-color/esm/Utils.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "updateStrokeColor": (()=>updateStrokeColor)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/NumberUtils.js [client] (ecmascript)");
;
function updateColorValue(delta, colorValue, valueAnimation, max, decrease) {
    if (!colorValue || !valueAnimation.enable || (colorValue.maxLoops ?? 0) > 0 && (colorValue.loops ?? 0) > (colorValue.maxLoops ?? 0)) {
        return;
    }
    if (!colorValue.time) {
        colorValue.time = 0;
    }
    if ((colorValue.delayTime ?? 0) > 0 && colorValue.time < (colorValue.delayTime ?? 0)) {
        colorValue.time += delta.value;
    }
    if ((colorValue.delayTime ?? 0) > 0 && colorValue.time < (colorValue.delayTime ?? 0)) {
        return;
    }
    const offset = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["randomInRange"])(valueAnimation.offset), velocity = (colorValue.velocity ?? 0) * delta.factor + offset * 3.6, decay = colorValue.decay ?? 1;
    if (!decrease || colorValue.status === "increasing") {
        colorValue.value += velocity;
        if (colorValue.value > max) {
            if (!colorValue.loops) {
                colorValue.loops = 0;
            }
            colorValue.loops++;
            if (decrease) {
                colorValue.status = "decreasing";
                colorValue.value -= colorValue.value % max;
            }
        }
    } else {
        colorValue.value -= velocity;
        if (colorValue.value < 0) {
            if (!colorValue.loops) {
                colorValue.loops = 0;
            }
            colorValue.loops++;
            colorValue.status = "increasing";
            colorValue.value += colorValue.value;
        }
    }
    if (colorValue.velocity && decay !== 1) {
        colorValue.velocity *= decay;
    }
    if (colorValue.value > max) {
        colorValue.value %= max;
    }
}
function updateStrokeColor(particle, delta) {
    if (!particle.strokeColor || !particle.strokeAnimation) {
        return;
    }
    const { h, s, l } = particle.strokeColor, { h: hAnimation, s: sAnimation, l: lAnimation } = particle.strokeAnimation;
    if (h) {
        updateColorValue(delta, h, hAnimation, 360, false);
    }
    if (s) {
        updateColorValue(delta, s, sAnimation, 100, true);
    }
    if (l) {
        updateColorValue(delta, l, lAnimation, 100, true);
    }
}
}}),
"[project]/node_modules/tsparticles-updater-stroke-color/esm/StrokeColorUpdater.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "StrokeColorUpdater": (()=>StrokeColorUpdater)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$ColorUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/ColorUtils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/NumberUtils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/Utils.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$stroke$2d$color$2f$esm$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-updater-stroke-color/esm/Utils.js [client] (ecmascript)");
;
;
class StrokeColorUpdater {
    constructor(container){
        this.container = container;
    }
    init(particle) {
        const container = this.container, options = particle.options;
        const stroke = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["itemFromSingleOrMultiple"])(options.stroke, particle.id, options.reduceDuplicates);
        particle.strokeWidth = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getRangeValue"])(stroke.width) * container.retina.pixelRatio;
        particle.strokeOpacity = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$NumberUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getRangeValue"])(stroke.opacity ?? 1);
        particle.strokeAnimation = stroke.color?.animation;
        const strokeHslColor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$ColorUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["rangeColorToHsl"])(stroke.color) ?? particle.getFillColor();
        if (strokeHslColor) {
            particle.strokeColor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$ColorUtils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["getHslAnimationFromHsl"])(strokeHslColor, particle.strokeAnimation, container.retina.reduceFactor);
        }
    }
    isEnabled(particle) {
        const color = particle.strokeAnimation, { strokeColor } = particle;
        return !particle.destroyed && !particle.spawning && !!color && (strokeColor?.h.value !== undefined && strokeColor.h.enable || strokeColor?.s.value !== undefined && strokeColor.s.enable || strokeColor?.l.value !== undefined && strokeColor.l.enable);
    }
    update(particle, delta) {
        if (!this.isEnabled(particle)) {
            return;
        }
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$stroke$2d$color$2f$esm$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["updateStrokeColor"])(particle, delta);
    }
}
}}),
"[project]/node_modules/tsparticles-updater-stroke-color/esm/index.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "loadStrokeColorUpdater": (()=>loadStrokeColorUpdater)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$stroke$2d$color$2f$esm$2f$StrokeColorUpdater$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-updater-stroke-color/esm/StrokeColorUpdater.js [client] (ecmascript)");
;
async function loadStrokeColorUpdater(engine, refresh = true) {
    await engine.addParticleUpdater("strokeColor", (container)=>new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$stroke$2d$color$2f$esm$2f$StrokeColorUpdater$2e$js__$5b$client$5d$__$28$ecmascript$29$__["StrokeColorUpdater"](container), refresh);
}
}}),
"[project]/node_modules/tsparticles-shape-text/esm/TextDrawer.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "TextDrawer": (()=>TextDrawer),
    "validTypes": (()=>validTypes)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-engine/esm/Utils/Utils.js [client] (ecmascript)");
;
const validTypes = [
    "text",
    "character",
    "char"
];
class TextDrawer {
    draw(context, particle, radius, opacity) {
        const character = particle.shapeData;
        if (character === undefined) {
            return;
        }
        const textData = character.value;
        if (textData === undefined) {
            return;
        }
        if (particle.text === undefined) {
            particle.text = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["itemFromSingleOrMultiple"])(textData, particle.randomIndexData);
        }
        const text = particle.text, style = character.style ?? "", weight = character.weight ?? "400", size = Math.round(radius) * 2, font = character.font ?? "Verdana", fill = particle.fill, offsetX = text.length * radius / 2;
        context.font = `${style} ${weight} ${size}px "${font}"`;
        const pos = {
            x: -offsetX,
            y: radius / 2
        };
        context.globalAlpha = opacity;
        if (fill) {
            context.fillText(text, pos.x, pos.y);
        } else {
            context.strokeText(text, pos.x, pos.y);
        }
        context.globalAlpha = 1;
    }
    getSidesCount() {
        return 12;
    }
    async init(container) {
        const options = container.actualOptions;
        if (validTypes.find((t)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["isInArray"])(t, options.particles.shape.type))) {
            const shapeOptions = validTypes.map((t)=>options.particles.shape.options[t]).find((t)=>!!t), promises = [];
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["executeOnSingleOrMultiple"])(shapeOptions, (shape)=>{
                promises.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["loadFont"])(shape.font, shape.weight));
            });
            await Promise.all(promises);
        }
    }
    particleInit(container, particle) {
        if (!particle.shape || !validTypes.includes(particle.shape)) {
            return;
        }
        const character = particle.shapeData;
        if (character === undefined) {
            return;
        }
        const textData = character.value;
        if (textData === undefined) {
            return;
        }
        particle.text = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$engine$2f$esm$2f$Utils$2f$Utils$2e$js__$5b$client$5d$__$28$ecmascript$29$__["itemFromSingleOrMultiple"])(textData, particle.randomIndexData);
    }
}
}}),
"[project]/node_modules/tsparticles-shape-text/esm/index.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "loadTextShape": (()=>loadTextShape)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$text$2f$esm$2f$TextDrawer$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-shape-text/esm/TextDrawer.js [client] (ecmascript)");
;
async function loadTextShape(engine, refresh = true) {
    await engine.addShape(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$text$2f$esm$2f$TextDrawer$2e$js__$5b$client$5d$__$28$ecmascript$29$__["validTypes"], new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$text$2f$esm$2f$TextDrawer$2e$js__$5b$client$5d$__$28$ecmascript$29$__["TextDrawer"](), refresh);
}
}}),
"[project]/node_modules/tsparticles-slim/esm/index.js [client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "loadSlim": (()=>loadSlim)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$particles$2e$js$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-particles.js/esm/index.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$basic$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-basic/esm/index.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$plugin$2d$easing$2d$quad$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-plugin-easing-quad/esm/index.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$attract$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-external-attract/esm/index.js [client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$bounce$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-external-bounce/esm/index.js [client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$bubble$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-external-bubble/esm/index.js [client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$connect$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-external-connect/esm/index.js [client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$grab$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-external-grab/esm/index.js [client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$pause$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-external-pause/esm/index.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$push$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-external-push/esm/index.js [client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$remove$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-external-remove/esm/index.js [client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$repulse$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-external-repulse/esm/index.js [client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$slow$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-external-slow/esm/index.js [client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$image$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-shape-image/esm/index.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$life$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-updater-life/esm/index.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$line$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-shape-line/esm/index.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$move$2d$parallax$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-move-parallax/esm/index.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$particles$2d$attract$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-particles-attract/esm/index.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$particles$2d$collisions$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-particles-collisions/esm/index.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$particles$2d$links$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-interaction-particles-links/esm/index.js [client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$polygon$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-shape-polygon/esm/index.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$rotate$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-updater-rotate/esm/index.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$square$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-shape-square/esm/index.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$star$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-shape-star/esm/index.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$stroke$2d$color$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-updater-stroke-color/esm/index.js [client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$text$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tsparticles-shape-text/esm/index.js [client] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
async function loadSlim(engine, refresh = true) {
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$particles$2e$js$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__["initPjs"])(engine);
    await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$move$2d$parallax$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__["loadParallaxMover"])(engine, false);
    await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$attract$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["loadExternalAttractInteraction"])(engine, false);
    await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$bounce$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["loadExternalBounceInteraction"])(engine, false);
    await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$bubble$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["loadExternalBubbleInteraction"])(engine, false);
    await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$connect$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["loadExternalConnectInteraction"])(engine, false);
    await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$grab$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["loadExternalGrabInteraction"])(engine, false);
    await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$pause$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__["loadExternalPauseInteraction"])(engine, false);
    await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$push$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["loadExternalPushInteraction"])(engine, false);
    await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$remove$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["loadExternalRemoveInteraction"])(engine, false);
    await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$repulse$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["loadExternalRepulseInteraction"])(engine, false);
    await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$external$2d$slow$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["loadExternalSlowInteraction"])(engine, false);
    await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$particles$2d$attract$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__["loadParticlesAttractInteraction"])(engine, false);
    await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$particles$2d$collisions$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__["loadParticlesCollisionsInteraction"])(engine, false);
    await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$interaction$2d$particles$2d$links$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["loadParticlesLinksInteraction"])(engine, false);
    await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$plugin$2d$easing$2d$quad$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__["loadEasingQuadPlugin"])();
    await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$image$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__["loadImageShape"])(engine, false);
    await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$line$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__["loadLineShape"])(engine, false);
    await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$polygon$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__["loadPolygonShape"])(engine, false);
    await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$square$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__["loadSquareShape"])(engine, false);
    await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$star$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__["loadStarShape"])(engine, false);
    await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$shape$2d$text$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__["loadTextShape"])(engine, false);
    await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$life$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__["loadLifeUpdater"])(engine, false);
    await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$rotate$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__["loadRotateUpdater"])(engine, false);
    await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$updater$2d$stroke$2d$color$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__["loadStrokeColorUpdater"])(engine, false);
    await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tsparticles$2d$basic$2f$esm$2f$index$2e$js__$5b$client$5d$__$28$ecmascript$29$__["loadBasic"])(engine, refresh);
}
}}),
}]);

//# sourceMappingURL=node_modules_7f413f9e._.js.map